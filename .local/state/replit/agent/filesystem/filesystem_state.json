{"file_contents":{"calendar-blocking-summary.md":{"content":"# Calendar Disconnection Call Blocking - Implementation Summary\n\n## Problem Statement\nWhen a referred Decision Maker (DM) disconnects their calendar, the referring sales representative should be blocked from booking any calls until the DM reconnects their calendar.\n\n## Solution Implemented\n\n### 1. Enhanced Call Booking Validation\nUpdated `canUserBookCall()` method in `simple-mongodb-storage.ts` to include calendar disconnection check for sales reps:\n\n```javascript\n// Check monthly call limit first\n// For sales reps, also check if any referred DMs have disconnected calendar\nif (userRole === \"sales_rep\") {\n  const calendarBlockResult = await this.checkSalesRepCalendarBlock(userId);\n  if (!calendarBlockResult.canBook) {\n    return { canBook: false, remainingCalls: callLimit.remainingCalls, message: calendarBlockResult.message };\n  }\n}\n```\n\n### 2. New Function: `checkSalesRepCalendarBlock()`\n```javascript\nasync checkSalesRepCalendarBlock(salesRepId: string): Promise<{ canBook: boolean; message?: string }>\n```\n\n**Functionality:**\n- Finds all DMs that were invited by the sales rep (`invitedBy: salesRepId`)\n- Checks their calendar integration status (`calendarIntegrationEnabled`)\n- If any referred DM has disconnected calendar, blocks the sales rep from booking calls\n- Provides clear message indicating which DM(s) need to reconnect calendar\n\n### 3. Call Booking Flow Integration\nThe validation is integrated into the existing call booking endpoint (`POST /api/calls`):\n\n```javascript\n// Existing flow:\nconst repCanBook = await storage.canUserBookCall(salesRepId, \"sales_rep\");\nif (!repCanBook.canBook) {\n  return res.status(429).json({\n    message: `Sales rep has reached monthly call limit: ${repCanBook.message}`,\n    limitType: \"sales_rep\",\n  });\n}\n```\n\n**Now includes calendar disconnection blocking:**\n- Monthly call limit check (existing)\n- Calendar disconnection check (new)\n\n### 4. User Experience\n**When DM calendar is connected:** Sales rep can book calls normally\n**When DM calendar is disconnected:** Sales rep sees message:\n- Single DM: \"Cannot book calls: Your referred Decision Maker [Name] ([email]) must reconnect their calendar to enable call booking.\"\n- Multiple DMs: \"Cannot book calls: Your referred Decision Makers ([Names]) must reconnect their calendars to enable call booking.\"\n\n## Implementation Details\n\n### Database Queries\n- Efficient query using MongoDB find with `invitedBy` field and role filter\n- Only selects necessary fields: `email`, `firstName`, `lastName`, `calendarIntegrationEnabled`\n\n### Error Handling  \n- Graceful handling of database errors\n- Fallback error messages for system failures\n- Non-disruptive to other functionalities\n\n### Debug Endpoints Added\n- `POST /api/debug/can-book-call` - Test call booking capability\n- `POST /api/debug/disconnect-dm-calendar` - Manually disconnect DM calendar for testing\n\n## No Impact on Other Functionality\n- Decision Makers are not affected by this blocking logic\n- Sales reps with no referred DMs continue to work normally  \n- Monthly call limits and other validations remain unchanged\n- Calendar connection/disconnection flagging system remains intact\n- Referral credit system continues to work independently\n\n## Flow Example\n1. Sales rep refers DM → DM signs up and connects calendar → Sales rep can book calls\n2. DM disconnects calendar → Sales rep is blocked from booking calls\n3. DM reconnects calendar → Sales rep can book calls again\n\n## Benefits\n- Ensures calendar integration quality by incentivizing DM reconnection\n- Protects platform reliability by preventing calls with disconnected DMs\n- Clear messaging helps sales reps understand resolution steps\n- Maintains all existing functionality while adding protective layer","size_bytes":3739},"calendar-disconnection-summary.md":{"content":"# Calendar Disconnection Summary\n\n## Problem\nNeed to implement a system where:\n1. When a DM disconnects their calendar after initially connecting it\n2. The inviting sales rep gets flagged\n3. This flag is applied each time a disconnect happens\n4. Rep loses credits for that DM when calendar is disconnected\n\n## Current State Analysis\n- Current logs show: \"Connected calendar DMs=0\" even though DM has calendar enabled\n- This suggests the system isn't properly detecting calendar connections\n- Need to fix the detection logic AND add disconnect flagging\n\n## Implementation Plan\n1. Add calendar disconnect endpoint\n2. Implement automatic flagging when DM disconnects\n3. Recalculate rep credits when DM disconnects\n4. Track calendar connection state changes\n\n## Expected Flow\n1. DM signs up through rep invitation → calendar disconnected by default\n2. DM connects calendar → rep gets credits\n3. DM disconnects calendar → rep gets flagged AND loses credits for that DM\n4. Each subsequent disconnect → new flag for the rep","size_bytes":1024},"check-admin.js":{"content":"import mongoose from 'mongoose';\n\nconst userSchema = new mongoose.Schema({\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  role: { type: String, enum: ['sales_rep', 'decision_maker', 'admin'], required: true },\n  firstName: { type: String, required: true },\n  lastName: { type: String, required: true },\n  isActive: { type: Boolean, default: false },\n}, { timestamps: true });\n\nconst User = mongoose.model('User', userSchema);\n\nasync function checkAdmin() {\n  try {\n    await mongoose.connect('mongodb+srv://yash6491:YASHVANT@cluster0.f3pmu6p.mongodb.net/biobridge?retryWrites=true&w=majority');\n    \n    const adminUser = await User.findOne({ email: 'admin@naeberly.com' });\n    if (adminUser) {\n      console.log('Admin user found:');\n      console.log('Email:', adminUser.email);\n      console.log('Role:', adminUser.role);\n      console.log('Active:', adminUser.isActive);\n      console.log('ID:', adminUser._id);\n    } else {\n      console.log('Admin user not found');\n    }\n    \n    await mongoose.disconnect();\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\ncheckAdmin();","size_bytes":1151},"check-suspended-users.js":{"content":"import { connectToMongoDB, User } from './server/mongodb.ts';\n\nasync function checkSuspendedUsers() {\n  try {\n    await connectToMongoDB();\n    \n    console.log('Checking all users and their status...');\n    const users = await User.find({}, 'firstName lastName email standing isActive suspendedAt suspensionReason').exec();\n    \n    console.log('\\nAll users:');\n    users.forEach(user => {\n      console.log(`- ${user.firstName} ${user.lastName} (${user.email})`);\n      console.log(`  standing: ${user.standing}`);\n      console.log(`  isActive: ${user.isActive}`);\n      console.log(`  suspendedAt: ${user.suspendedAt}`);\n      console.log(`  suspensionReason: ${user.suspensionReason}`);\n      console.log('');\n    });\n    \n    console.log('\\nFiltering suspended users...');\n    const suspendedUsers = users.filter(u => u.standing === 'suspended');\n    console.log(`Found ${suspendedUsers.length} suspended users:`);\n    suspendedUsers.forEach(user => {\n      console.log(`- ${user.firstName} ${user.lastName} (${user.email}) - standing: ${user.standing}`);\n    });\n    \n    console.log('\\nFiltering inactive users...');\n    const inactiveUsers = users.filter(u => !u.isActive);\n    console.log(`Found ${inactiveUsers.length} inactive users:`);\n    inactiveUsers.forEach(user => {\n      console.log(`- ${user.firstName} ${user.lastName} (${user.email}) - isActive: ${user.isActive}`);\n    });\n    \n    process.exit(0);\n  } catch (error) {\n    console.error('Error checking suspended users:', error);\n    process.exit(1);\n  }\n}\n\ncheckSuspendedUsers();","size_bytes":1554},"check-user-suspension.js":{"content":"import mongoose from 'mongoose';\nimport dotenv from 'dotenv';\ndotenv.config();\n\n// Connect to MongoDB\nmongoose.connect(process.env.DATABASE_URL || 'mongodb://localhost:27017/naeberly');\n\n// Define User schema (simplified)\nconst userSchema = new mongoose.Schema({\n  email: String,\n  role: String,\n  flagsReceived: { type: Number, default: 0 },\n  suspension: {\n    isActive: { type: Boolean, default: false },\n    startDate: Date,\n    endDate: Date,\n    reason: String\n  }\n}, { collection: 'users' });\n\nconst User = mongoose.model('User', userSchema);\n\nasync function checkUserSuspension() {\n  try {\n    const user = await User.findOne({ email: 'mlp.yashvantgupta@gmail.com' });\n    \n    if (!user) {\n      console.log('User not found');\n      return;\n    }\n    \n    console.log('User Details:');\n    console.log('Email:', user.email);\n    console.log('Role:', user.role);\n    console.log('Flags Received:', user.flagsReceived || 0);\n    console.log('Suspension Status:', user.suspension || 'No suspension data');\n    \n    if (user.suspension && user.suspension.isActive) {\n      console.log('\\n🚨 ACCOUNT IS SUSPENDED');\n      console.log('Reason:', user.suspension.reason);\n      console.log('Start Date:', user.suspension.startDate);\n      console.log('End Date:', user.suspension.endDate);\n      \n      const now = new Date();\n      const daysRemaining = Math.ceil((user.suspension.endDate - now) / (1000 * 60 * 60 * 24));\n      console.log('Days Remaining:', daysRemaining);\n    } else {\n      console.log('\\n✅ Account is NOT suspended');\n    }\n    \n  } catch (error) {\n    console.error('Error:', error);\n  } finally {\n    mongoose.connection.close();\n  }\n}\n\ncheckUserSuspension();","size_bytes":1689},"create-admin.js":{"content":"import bcrypt from 'bcrypt';\nimport mongoose from 'mongoose';\n\nconst userSchema = new mongoose.Schema({\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  role: { type: String, enum: ['sales_rep', 'decision_maker', 'admin'], required: true },\n  firstName: { type: String, required: true },\n  lastName: { type: String, required: true },\n  linkedinUrl: String,\n  linkedinVerified: { type: Boolean, default: false },\n  jobTitle: String,\n  company: String,\n  industry: String,\n  companySize: String,\n  yearsInRole: String,\n  packageType: String,\n  isActive: { type: Boolean, default: false },\n  standing: { type: String, default: 'good' },\n}, {\n  timestamps: true\n});\n\nconst User = mongoose.model('User', userSchema);\n\nasync function createAdminUser() {\n  try {\n    await mongoose.connect('mongodb+srv://yash6491:YASHVANT@cluster0.f3pmu6p.mongodb.net/biobridge?retryWrites=true&w=majority');\n    console.log('Connected to MongoDB');\n    \n    // Check if admin already exists\n    const existingAdmin = await User.findOne({ email: 'admin@naeborly.com' });\n    if (existingAdmin) {\n      console.log('Admin user already exists');\n      await mongoose.disconnect();\n      return;\n    }\n    \n    // Create admin user\n    const hashedPassword = await bcrypt.hash('admin123', 10);\n    const adminUser = new User({\n      email: 'admin@naeborly.com',\n      password: hashedPassword,\n      role: 'admin',\n      firstName: 'Admin',\n      lastName: 'User',\n      packageType: 'enterprise',\n      isActive: true,\n      standing: 'excellent'\n    });\n    \n    await adminUser.save();\n    console.log('Admin user created successfully!');\n    console.log('Email: admin@naeborly.com');\n    console.log('Password: admin123');\n    \n    await mongoose.disconnect();\n  } catch (error) {\n    console.error('Error creating admin user:', error);\n  }\n}\n\ncreateAdminUser();","size_bytes":1896},"debug-google-config.js":{"content":"import { oauth2Client } from './server/google-calendar.js';\n\nconsole.log('Google Calendar Configuration Debug:');\nconsole.log('================================');\nconsole.log('Client ID:', process.env.GOOGLE_CLIENT_ID);\nconsole.log('Client Secret:', process.env.GOOGLE_CLIENT_SECRET ? 'Present' : 'Missing');\nconsole.log('Redirect URI:', process.env.GOOGLE_REDIRECT_URI || 'Using default');\nconsole.log('OAuth2 Client Config:', {\n  clientId: oauth2Client._clientId,\n  clientSecret: oauth2Client._clientSecret ? 'Present' : 'Missing',\n  redirectUri: oauth2Client.redirectUri\n});\n\n// Check if the configuration matches expected values\nconst expectedClientId = '917137353724-ftng1fau0pm0hdl65l1i5et8fmssvedj.apps.googleusercontent.com';\nconst expectedRedirectUri = 'https://decisionmaker.shrawantravels.com/api/auth/google/callback';\n\nconsole.log('\\nValidation:');\nconsole.log('Client ID matches expected:', process.env.GOOGLE_CLIENT_ID === expectedClientId);\nconsole.log('Redirect URI matches expected:', oauth2Client.redirectUri === expectedRedirectUri);\nconsole.log('\\nExpected values:');\nconsole.log('Client ID:', expectedClientId);\nconsole.log('Redirect URI:', expectedRedirectUri);","size_bytes":1224},"debug-login.js":{"content":"import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nconst userSchema = new mongoose.Schema({\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  role: { type: String, enum: ['sales_rep', 'decision_maker', 'admin'], required: true },\n  firstName: { type: String, required: true },\n  lastName: { type: String, required: true },\n  isActive: { type: Boolean, default: false },\n}, { timestamps: true });\n\nconst User = mongoose.model('User', userSchema);\n\nasync function debugLogin() {\n  try {\n    await mongoose.connect('mongodb+srv://yash6491:YASHVANT@cluster0.f3pmu6p.mongodb.net/biobridge?retryWrites=true&w=majority');\n    \n    console.log('Testing admin login...');\n    \n    // Find the admin user\n    const user = await User.findOne({ email: 'admin@naeborly.com' });\n    if (!user) {\n      console.log('ERROR: Admin user not found');\n      await mongoose.disconnect();\n      return;\n    }\n    \n    console.log('Admin user found:');\n    console.log('Email:', user.email);\n    console.log('Role:', user.role);\n    console.log('Active:', user.isActive);\n    console.log('Password hash length:', user.password.length);\n    \n    // Test password comparison\n    const isPasswordValid = await bcrypt.compare('admin123', user.password);\n    console.log('Password comparison result:', isPasswordValid);\n    \n    if (!user.isActive) {\n      console.log('ERROR: User account is not active');\n    }\n    \n    await mongoose.disconnect();\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\ndebugLogin();","size_bytes":1566},"dm-calendar-disconnect-flag-flow.md":{"content":"# DM Calendar Disconnection Flag Flow\n\n## Overview\nWhen a Decision Maker (DM) disconnects their calendar after initially connecting it, the inviting sales rep receives a flag. This flag is applied each time a disconnect happens.\n\n## Implementation Requirements\n\n### 1. Calendar Disconnect Detection\n- Track when a DM changes `calendarIntegrationEnabled` from `true` to `false`\n- Monitor both direct disconnection and token removal/expiration\n\n### 2. Flag Creation Logic\n- When DM disconnects calendar:\n  - Find the inviting sales rep (`invitedBy` field)\n  - Create a flag record for the sales rep\n  - Flag type: \"dm_calendar_disconnect\"\n  - Flag reason: \"Invited DM disconnected their calendar\"\n\n### 3. Flag Details\n- **Type**: `dm_calendar_disconnect`\n- **Status**: `pending` (requires review)\n- **Reporter**: System (automatic flag)\n- **Content**: Details about which DM disconnected and when\n- **Priority**: Medium (impacts rep's ability to earn credits)\n\n### 4. Credit Impact\n- When DM disconnects calendar, rep loses credits for that DM\n- Rep's call limits should be recalculated\n- System should update rep's monthly call allowance\n\n### 5. Endpoints to Implement\n- Calendar disconnect endpoint\n- Flag creation on disconnect\n- Credit recalculation on disconnect\n\n## Technical Implementation\n\n### Database Changes\n- Track calendar connection history\n- Flag system integration\n- Credit recalculation triggers\n\n### API Endpoints\n- `POST /api/calendar/disconnect` - Handle calendar disconnection\n- Automatic flagging in existing calendar endpoints","size_bytes":1547},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"fix-admin.js":{"content":"import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nconst userSchema = new mongoose.Schema({\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  role: { type: String, enum: ['sales_rep', 'decision_maker', 'admin'], required: true },\n  firstName: { type: String, required: true },\n  lastName: { type: String, required: true },\n  isActive: { type: Boolean, default: false },\n}, { timestamps: true });\n\nconst User = mongoose.model('User', userSchema);\n\nasync function fixAdmin() {\n  try {\n    await mongoose.connect('mongodb+srv://yash6491:YASHVANT@cluster0.f3pmu6p.mongodb.net/biobridge?retryWrites=true&w=majority');\n    \n    // Delete existing admin if any\n    await User.deleteOne({ email: 'admin@naeborly.com' });\n    \n    // Create new admin with correct password hash\n    const hashedPassword = await bcrypt.hash('admin123', 10);\n    const adminUser = new User({\n      email: 'admin@naeborly.com',\n      password: hashedPassword,\n      role: 'admin',\n      firstName: 'Admin',\n      lastName: 'User',\n      isActive: true\n    });\n    \n    await adminUser.save();\n    console.log('Admin user fixed successfully!');\n    console.log('Email: admin@naeborly.com');\n    console.log('Password: admin123');\n    \n    // Test password\n    const testPassword = await bcrypt.compare('admin123', hashedPassword);\n    console.log('Password test:', testPassword ? 'PASS' : 'FAIL');\n    \n    await mongoose.disconnect();\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\nfixAdmin();","size_bytes":1547},"google-calendar-setup.md":{"content":"# Google Calendar Integration Setup Guide\n\n## CRITICAL FIX NEEDED: Google Cloud Console Configuration\n\n### Problem Diagnosis\n✅ **App Configuration:** All correct (Client ID, Secret, Redirect URI)\n❌ **Google Cloud Console:** Configuration mismatch causing \"invalid_client\"\n\n### EXACT Steps to Fix in Google Cloud Console:\n\n### 1. Fix OAuth 2.0 Client Configuration\n\n**Step 1:** Go to [Google Cloud Console](https://console.cloud.google.com/)\n\n**Step 2:** Navigate to \"APIs & Services\" > \"Credentials\"\n\n**Step 3:** Find your OAuth 2.0 Client ID: `917137353724-ftng1fau0pm0hdl65l1i5et8fmssvedj.apps.googleusercontent.com`\n\n**Step 4:** Click on it to edit\n\n**Step 5:** **MOST IMPORTANT** - Add EXACT Redirect URI:\n- In \"Authorized redirect URIs\" section\n- Click \"Add URI\"\n- Add **EXACTLY**: `https://decisionmaker.shrawantravels.com/api/auth/google/callback`\n- **Note:** Must be HTTPS, must match exactly including the domain\n\n### 2. Add Authorized Domains\n\n**In the same OAuth client configuration:**\n- Find \"Authorized domains\" section  \n- **SKIP adding domains** - Google rejects `replit.dev` subdomains as \"not top private domains\"\n- **Alternative:** Leave authorized domains empty (this is allowed for development)\n- Or add only your custom domain if you have one\n\n### 3. Set Up Test Users\n\n**Step 1:** Go to \"APIs & Services\" > \"OAuth consent screen\"\n\n**Step 2:** Scroll down to \"Test users\" section\n\n**Step 3:** Click \"Add users\" and add:\n- `salesrep@techize.com` (current logged-in user)\n- `mlp.yashvantgupta@gmail.com` (your other test account)\n\n### 4. Enable Required APIs\n\n**Step 1:** Go to \"APIs & Services\" > \"Library\"\n\n**Step 2:** Search for and enable:\n- \"Google Calendar API\"\n- \"Google+ API\" (if required)\n\n### 5. Save All Changes\n\n**Important:** Click \"Save\" button at the bottom of each configuration page\n\n## Your Current Configuration\n- **Client ID:** 917137353724-ftng1fau0pm0hdl65l1i5et8fmssvedj.apps.googleusercontent.com\n- **Redirect URI:** https://decisionmaker.shrawantravels.com/api/auth/google/callback\n- **Current Domain:** decisionmaker.shrawantravels.com\n\n## What Each Domain Does:\n- `replit.dev` - Main Replit domain\n- `janeway.replit.dev` - Replit's infrastructure domain\n- `decisionmaker.shrawantravels.com` - Your specific app domain\n\n## After Configuration:\nOnce you've added these domains and the redirect URI, the \"Reauth\" button in your dashboard will work properly and you'll be able to authenticate with Google Calendar successfully.","size_bytes":2634},"google-cloud-console-configuration.md":{"content":"# Google Cloud Console Configuration - Test User Required\n\n## ISSUE SUMMARY\nThe Google Calendar integration is showing \"Access blocked: Authorization Error\" because your email address is not added to the Test Users list in Google Cloud Console. This is **NOT** an application issue - our code is 100% correct. The OAuth app is in testing mode and only allows approved test users.\n\n## IMMEDIATE SOLUTION\n**Add your email (`mlp.yashkumar@gmail.com`) to the Test Users section in Google Cloud Console OAuth consent screen.**\n\n## EXACT STEPS TO FIX\n\n### Step 1: Access Your Google Cloud Console\n1. Go to: https://console.cloud.google.com/\n2. Navigate to: **APIs & Services → Credentials**\n3. Find this OAuth 2.0 Client ID: `917137353724-ftng1fau0pm0hdl65l1i5et8fmssvedj.apps.googleusercontent.com`\n4. Click on it to edit\n\n### Step 2: Configure Redirect URI (CRITICAL)\nIn the **\"Authorized redirect URIs\"** section, you must add this EXACT URL:\n\n```\nhttps://decisionmaker.shrawantravels.com/api/auth/google/callback\n```\n\n**CRITICAL REQUIREMENTS:**\n- Must be HTTPS (not HTTP)\n- Must match character-for-character (case-sensitive)\n- Do NOT add this to \"Authorized JavaScript origins\"\n- Do NOT add replit.dev as an authorized domain (Google rejects this)\n\n### Step 3: Add Test Users\n1. Go to: **APIs & Services → OAuth consent screen**\n2. Scroll to **\"Test users\"** section\n3. Click **\"Add users\"**\n4. Add these users:\n   - `salesrep@techize.com`\n   - `mlp.yashkumar@gmail.com`\n5. Click **\"Save\"**\n\n### Step 4: Enable Google Calendar API\n1. Go to: **APIs & Services → Library**\n2. Search for: **\"Google Calendar API\"**\n3. Click it and click **\"Enable\"**\n\n### Step 5: Verify Publishing Status\n1. Go to: **APIs & Services → OAuth consent screen**\n2. Check if the app is in **\"Testing\"** mode\n3. If it shows **\"Publishing status: Testing\"**, this is correct\n4. Make sure your email is listed in the **\"Test users\"** section\n\n### Step 6: Wait and Test\n1. Wait 5-10 minutes for changes to propagate\n2. Try the calendar connection again\n3. Use an incognito browser window if needed\n4. If you get \"Access blocked\" error, verify the test user was added correctly\n\n## CURRENT ERROR DETAILS\n```\nError: invalid_client\nDescription: Unauthorized\nStatus: 401\n```\n\nThis error means Google is rejecting our client credentials during token exchange, which happens when:\n1. Redirect URI is not configured correctly\n2. Client ID/Secret mismatch\n3. API not enabled\n4. User not added to test users\n\n## OUR APPLICATION IS CORRECTLY CONFIGURED\n- Client ID: `917137353724-ftng1fau0pm0hdl65l1i5et8fmssvedj.apps.googleusercontent.com`\n- Client Secret: `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`\n- Redirect URI: `https://decisionmaker.shrawantravels.com/api/auth/google/callback`\n\nThe issue is 100% in Google Cloud Console configuration. Please follow the steps above exactly.","size_bytes":2924},"google-cloud-console-exact-steps.md":{"content":"# Google Cloud Console - EXACT Configuration Steps\n\n## Issue Confirmed\n- ✅ App configuration is 100% correct\n- ✅ OAuth client setup is perfect\n- ✅ Credentials are valid\n- ❌ Google Cloud Console reject client during token exchange\n\n## EXACT Steps to Fix in Google Cloud Console\n\n### Step 1: Access OAuth Client Settings\n1. Go to: https://console.cloud.google.com/\n2. Navigate to: **APIs & Services > Credentials**\n3. Find your OAuth 2.0 Client ID: `917137353724-ftng1fau0pm0hdl65l1i5et8fmssvedj.apps.googleusercontent.com`\n4. **Click on it** to open configuration\n\n### Step 2: Configure Authorized Redirect URIs\nIn the OAuth client configuration page:\n\n1. Find section: **\"Authorized redirect URIs\"**\n2. Click **\"Add URI\"**\n3. Add exactly: `https://decisionmaker.shrawantravels.com/api/auth/google/callback`\n4. **Important**: Must be HTTPS, must match exactly including case\n5. Click **\"Save\"**\n\n### Step 3: OAuth Consent Screen\n1. Go to: **APIs & Services > OAuth consent screen**\n2. Scroll to **\"Test users\"** section\n3. Click **\"Add users\"**\n4. Add: `mlp.yashvantgupta@gmail.com`\n5. Click **\"Save\"**\n\n### Step 4: Enable APIs\n1. Go to: **APIs & Services > Library**\n2. Search for: **\"Google Calendar API\"**\n3. Click it and click **\"Enable\"**\n\n### Step 5: Verify Configuration\nAfter saving all changes, verify:\n- ✅ Redirect URI is exactly: `https://decisionmaker.shrawantravels.com/api/auth/google/callback`\n- ✅ Test user `mlp.yashvantgupta@gmail.com` is added\n- ✅ Google Calendar API is enabled\n- ✅ OAuth consent screen shows \"Testing\" status\n\n## Common Issues & Solutions\n\n### Issue: \"Invalid domain\" error\n- **Skip authorized domains** - leave empty for development\n- Google rejects `replit.dev` subdomains as \"not top private domains\"\n\n### Issue: Still getting \"invalid_client\"\n- **Double-check redirect URI** - must match exactly\n- **Wait 5-10 minutes** after saving changes\n- **Clear browser cache** and try again\n\n### Issue: \"Access blocked\" error\n- **Add your email as test user** in OAuth consent screen\n- **Verify app is in \"Testing\" mode** not \"Production\"\n\n## Test Steps After Configuration\n1. Click \"Reauth\" button in the app\n2. You should see Google OAuth consent screen\n3. Grant calendar permissions\n4. Should redirect back to app with success message\n\n## Still Not Working?\nIf you're still getting \"invalid_client\" after following these exact steps:\n1. Wait 10-15 minutes (Google changes can take time to propagate)\n2. Try using an incognito/private browser window\n3. Clear all cookies and cache\n4. Double-check the Client ID and Client Secret match exactly","size_bytes":2669},"google-oauth-fix-guide.md":{"content":"# GOOGLE CALENDAR OAUTH FIX - REQUIRED ACTION\n\n## 🚨 PROBLEM IDENTIFIED\nThe error \"Access blocked: Authorization Error\" occurs because your email address is not added to the Test Users list in Google Cloud Console. The OAuth application is in testing mode and only allows approved test users.\n\n## ✅ SOLUTION: ADD TEST USER\nYou need to add your email (`mlp.yashkumar@gmail.com`) to the Test Users section in Google Cloud Console.\n\n## 📋 STEP-BY-STEP INSTRUCTIONS\n\n### Step 1: Open Google Cloud Console\n1. Go to: https://console.cloud.google.com/\n2. Navigate to: **APIs & Services → OAuth consent screen**\n\n### Step 2: Add Test User\n1. Scroll down to the **\"Test users\"** section\n2. Click **\"+ ADD USERS\"** button\n3. Enter your email: `mlp.yashkumar@gmail.com`\n4. Click **\"SAVE\"**\n\n### Step 3: Verify Configuration\n1. Ensure these users are in the Test Users list:\n   - `salesrep@techize.com`\n   - `mlp.yashkumar@gmail.com`\n2. Make sure the app is in **\"Testing\"** mode (not published)\n\n### Step 4: Test the Integration\n1. Wait 2-3 minutes for changes to propagate\n2. Go back to the decision maker dashboard\n3. Click **\"Connect Calendar\"**\n4. You should now be able to complete the OAuth flow\n\n## 🔧 TECHNICAL VERIFICATION\nThe application configuration is correct:\n- ✅ Client ID: `917137353724-ftng1fau0pm0hdl65l1i5et8fmssvedj.apps.googleusercontent.com`\n- ✅ Client Secret: Present and valid\n- ✅ Redirect URI: `https://decisionmaker.shrawantravels.com/api/auth/google/callback`\n- ✅ Google Calendar API: Enabled\n- ✅ OAuth scopes: Correctly configured\n\n## 📝 NOTES\n- This is a one-time setup required for testing\n- Once your email is added, the OAuth flow will work immediately\n- The application code is functioning correctly\n- No changes to the codebase are needed\n\n## 🎯 EXPECTED RESULT\nAfter adding your email to Test Users, you should be able to:\n1. Connect Google Calendar successfully\n2. View upcoming calendar meetings\n3. Join meetings with Google Meet links\n4. Sync calendar events in real-time\n\nThe Google Calendar integration is fully implemented and working - it just needs your email address to be approved for testing.","size_bytes":2191},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"referral-credit-system-summary.md":{"content":"# Referral Credit System - Updated Implementation\n\n## Changes Made\n\n### 1. Moved Credit Award From Signup to Calendar Integration\n**Before:** Credits were awarded when DM completed package selection during signup\n**After:** Credits are only awarded when DM connects their calendar for the first time\n\n### 2. Updated Credit Flow\n```\nOLD FLOW:\n1. DM accepts invitation and signs up\n2. DM completes package selection → CREDIT AWARDED ✓\n3. DM integrates calendar (optional)\n\nNEW FLOW:\n1. DM accepts invitation and signs up\n2. DM completes package selection (NO credit awarded)\n3. DM integrates calendar → CREDIT AWARDED ✓ (REQUIRED)\n```\n\n### 3. Implementation Details\n\n#### Package Selection Endpoint (`/api/decision-maker/package`)\n- **Removed** immediate credit award logic\n- **Added** message: \"Complete calendar integration to award credit to your sales representative\"\n- **Updated** response to reflect new requirement\n\n#### Calendar Integration Endpoint (`/api/users/:userId`)\n- **Added** detection for first-time calendar connection\n- **Added** `handleCalendarConnectionCredit()` function\n- **Added** referral credit award logic for DMs with `invitedBy` field\n\n#### Credit Storage (`awardCreditToDMCompletion`)\n- **Updated** source from \"dm_onboarding\" to \"dm_onboarding_with_calendar\"\n- **Updated** duplicate check to handle both old and new sources\n- **Updated** success message to reflect calendar requirement\n\n### 4. New Function: `handleCalendarConnectionCredit`\n```javascript\n// Triggered when DM connects calendar for first time\n// Awards referral credit to the inviting sales rep\n// Logs activity for audit trail\n// Handles errors gracefully without breaking calendar connection\n```\n\n### 5. Database Changes\n- Credit records now use source: \"dm_onboarding_with_calendar\"\n- Activity logs track referral credit awards with metadata\n- Backward compatibility maintained for existing credits\n\n### 6. User Experience\n- **DM Flow:** Signup → Package Selection → Calendar Integration (credit awarded)\n- **Sales Rep:** Gets credit only after DM fully completes onboarding WITH calendar\n- **Message:** Clear indication that calendar integration is required for credit\n\n## Benefits\n\n1. **Complete Onboarding:** Ensures DMs fully integrate before credit award\n2. **Higher Quality Leads:** Sales reps only get credit for fully engaged DMs\n3. **Calendar Adoption:** Incentivizes calendar integration completion\n4. **Fair Credit System:** Credit reflects actual value delivery (calendar-connected DM)\n\n## Backward Compatibility\n- Existing credits with source \"dm_onboarding\" remain valid\n- New credits use source \"dm_onboarding_with_calendar\"\n- Duplicate prevention works across both sources\n\n## Testing\n- Added debug endpoints for testing referral credit flow\n- Manual testing confirms credit award on calendar connection\n- Integration with existing suspension/flagging system maintained","size_bytes":2896},"replit.md":{"content":"# Naeberly Platform - Full-Stack Business Networking Application\n\n## Overview\nNaeberly is a business networking platform designed to connect sales representatives with decision-makers for scheduled calls and meetings. It aims to streamline professional networking by facilitating invitations, call scheduling, feedback management, and rating systems. The platform includes robust user management, a credit system for enterprise accounts, and administrative tools tailored for various user roles. The vision is to enhance networking efficiency and provide a structured environment for professional interactions.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\nThe application employs a modern full-stack architecture.\n\n### Frontend\n- **Framework**: React with Vite\n- **UI Components**: Radix UI and shadcn/ui\n- **Styling**: Tailwind CSS with Naeberly custom design tokens\n- **State Management**: TanStack React Query\n- **Routing**: Wouter\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript (ES modules)\n- **Database**: MongoDB with Mongoose ODM\n- **Authentication**: JWT tokens with Express session management\n- **Session Storage**: MongoDB-backed session store\n- **API Design**: RESTful API with role-based access control\n\n### Key Features & Implementations\n- **User Management**: Multi-role support (Sales Reps, Decision Makers, Enterprise Admins, Super Admins) with JWT authentication, role-based access control, and LinkedIn/domain verification.\n- **Call Scheduling & Management**: Integration with Google Calendar API for scheduling, time zone management, call status tracking, and post-call feedback/rating. Includes monthly call limits for both DMs and sales reps. **UPDATED August 2025**: Added availability checking to show unavailable time slots when decision makers have existing meetings scheduled. Calendar requirement enforced for sales reps before booking calls.\n- **Credit System**: Enterprise credit allocation, usage tracking per representative, configurable limits, and automatic monthly renewal. Credits are awarded ONLY when invited decision makers onboard AND connect their calendar. DM credit eligibility is based on engagement scores, with monthly caps per rep. Sales reps cannot access database if invited DMs don't connect calendar. **UPDATED August 2025**: Credit allocation changed from 5 to 1 call per connected DM. Database access now requires both accepted invitations AND connected DM calendars. Fixed duplicate DM display issue with proper deduplication logic. Calendar disconnection flagging system automatically flags sales reps when invited DMs disconnect calendars.\n- **Administrative Tools**: Super Admin panel for platform oversight, Enterprise Admin dashboard for company-level management, comprehensive flagging system with real-time data and content moderation, and analytics dashboard.\n- **Onboarding Flows**: Streamlined 2-step registration for decision makers (personal info + nominations), automatic allocation of 3 calls per month, and progressive information collection for sales reps with dynamic package selection.\n- **Email Service**: Integration for invitations, booking confirmations, call reminders, and post-call feedback emails with professional HTML templates. Includes automated background job for sending post-call feedback emails and email addon payment system with automatic activation.\n- **Activity Logging**: Comprehensive logging for all super admin actions, including user management, credit management, communication, subscription management, and platform settings.\n- **Platform Settings**: Database-persistent configuration for user limits, credit systems, enterprise features, security, and compliance, managed via the super admin panel.\n- **Flag Management System**: Real-time flag reporting with MongoDB integration, dynamic filtering by status/type/date, comprehensive review and action capabilities, and proper authentication for status updates.\n- **Payment Integration**: Stripe integration for email addon purchases with automatic `hasEmailAddon` status updates and payment verification.\n- **UI/UX Decisions**: Consistent global light theme, dynamic subscription plan displays with enhanced UI, comprehensive badge system for Decision Makers (e.g., Verified, Calendar), and fixed navigation bar positioning with consistent page spacing.\n\n## External Dependencies\n\n### Third-party Services\n- **MongoDB Atlas**: Cloud database hosting.\n- **Google Calendar API**: Calendar integration and scheduling.\n- **LinkedIn API**: Profile verification (configured).\n- **Mailtrap SMTP**: Email service for invitations and notifications.\n- **Stripe API**: Payment integration for user registration flows.\n\n### Key NPM Packages\n- **Authentication**: `bcrypt`, `jsonwebtoken`, `express-session`\n- **Database**: `mongoose`, `connect-mongo`\n- **UI Components**: `@radix-ui/react-*`, `@tanstack/react-query`\n- **Form Handling**: `react-hook-form`, `@hookform/resolvers`, `zod`\n- **Development**: `vite`, `typescript`, `tailwindcss`","size_bytes":5124},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"test-email-flow.js":{"content":"// Test script to verify email functionality\nconst { sendDecisionMakerInvitation, sendWelcomeEmail, sendCallReminder } = require('./server/email-service');\n\nasync function testEmailFlow() {\n  console.log('Testing email flow...');\n  \n  try {\n    // Test 1: Decision Maker Invitation\n    console.log('\\n1. Testing Decision Maker Invitation Email...');\n    const inviteResult = await sendDecisionMakerInvitation(\n      'test@example.com',\n      'John Doe',\n      'Jane Smith',\n      'invitation-token-123'\n    );\n    console.log('✓ Decision Maker Invitation Email sent successfully:', inviteResult.messageId);\n    \n    // Test 2: Welcome Email\n    console.log('\\n2. Testing Welcome Email...');\n    const welcomeResult = await sendWelcomeEmail(\n      'test@example.com',\n      'John Doe',\n      'sales_rep'\n    );\n    console.log('✓ Welcome Email sent successfully:', welcomeResult.messageId);\n    \n    // Test 3: Call Reminder\n    console.log('\\n3. Testing Call Reminder Email...');\n    const reminderResult = await sendCallReminder(\n      'test@example.com',\n      'John Doe',\n      {\n        salesRepName: 'Jane Smith',\n        decisionMakerName: 'John Doe',\n        scheduledAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // Tomorrow\n        meetingLink: 'https://meet.google.com/abc-def-ghi'\n      }\n    );\n    console.log('✓ Call Reminder Email sent successfully:', reminderResult.messageId);\n    \n    console.log('\\n🎉 All email tests passed successfully!');\n    \n  } catch (error) {\n    console.error('❌ Email test failed:', error.message);\n  }\n}\n\ntestEmailFlow();","size_bytes":1579},"test-google-calendar-integration.js":{"content":"const { MongoClient } = require('mongodb');\nconst { google } = require('googleapis');\nconst { OAuth2Client } = require('google-auth-library');\n\n// This script tests Google Calendar integration with Meet link creation\nasync function testGoogleCalendarIntegration() {\n  try {\n    console.log('=== Testing Google Calendar Integration ===');\n    \n    // 1. Connect to MongoDB\n    const client = new MongoClient(process.env.DATABASE_URL);\n    await client.connect();\n    const db = client.db();\n    \n    // 2. Find a user with Google Calendar tokens\n    const userWithCalendar = await db.collection('users').findOne({\n      calendarIntegrationEnabled: true,\n      'googleCalendarTokens.access_token': { $exists: true }\n    });\n    \n    if (!userWithCalendar) {\n      console.log('❌ No user found with Google Calendar integration');\n      console.log('   Please ensure at least one user has connected their Google Calendar');\n      return;\n    }\n    \n    console.log('✅ Found user with Google Calendar integration:', userWithCalendar.email);\n    \n    // 3. Set up Google Calendar API\n    const oauth2Client = new OAuth2Client(\n      process.env.GOOGLE_CLIENT_ID,\n      process.env.GOOGLE_CLIENT_SECRET,\n      'https://developers.google.com/oauthplayground'\n    );\n    \n    oauth2Client.setCredentials(userWithCalendar.googleCalendarTokens);\n    const calendar = google.calendar({ version: 'v3', auth: oauth2Client });\n    \n    // 4. Create test event with Google Meet\n    const testEvent = {\n      summary: 'Test Meeting - Google Calendar Integration',\n      description: 'This is a test meeting to verify Google Meet link creation',\n      start: {\n        dateTime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Tomorrow\n        timeZone: 'America/New_York'\n      },\n      end: {\n        dateTime: new Date(Date.now() + 24 * 60 * 60 * 1000 + 15 * 60 * 1000).toISOString(), // 15 minutes later\n        timeZone: 'America/New_York'\n      },\n      attendees: [\n        {\n          email: 'test@example.com',\n          displayName: 'Test User'\n        }\n      ],\n      conferenceData: {\n        createRequest: {\n          requestId: `test-meet-${Date.now()}`,\n          conferenceSolutionKey: { type: 'hangoutsMeet' }\n        }\n      }\n    };\n    \n    console.log('📅 Creating test calendar event with Google Meet...');\n    \n    const response = await calendar.events.insert({\n      calendarId: 'primary',\n      resource: testEvent,\n      conferenceDataVersion: 1,\n      sendUpdates: 'all'\n    });\n    \n    const createdEvent = response.data;\n    console.log('✅ Calendar event created successfully!');\n    console.log('   Event ID:', createdEvent.id);\n    console.log('   Event Summary:', createdEvent.summary);\n    \n    // 5. Extract Google Meet link\n    const googleMeetLink = createdEvent.hangoutLink || \n                          createdEvent.conferenceData?.entryPoints?.find(ep => ep.entryPointType === 'video')?.uri;\n    \n    if (googleMeetLink) {\n      console.log('✅ Google Meet link created successfully!');\n      console.log('   Meet Link:', googleMeetLink);\n    } else {\n      console.log('❌ No Google Meet link found in the event');\n      console.log('   Conference Data:', JSON.stringify(createdEvent.conferenceData, null, 2));\n    }\n    \n    // 6. Test database save\n    const testCallData = {\n      salesRepId: userWithCalendar._id,\n      decisionMakerId: userWithCalendar._id, // Using same user for test\n      scheduledAt: new Date(createdEvent.start.dateTime),\n      endTime: new Date(createdEvent.end.dateTime),\n      status: 'scheduled',\n      agenda: 'Test meeting',\n      notes: 'Testing Google Calendar integration',\n      company: 'Test Company',\n      platform: 'test',\n      googleCalendarEventId: createdEvent.id,\n      googleMeetLink: googleMeetLink,\n      decisionMakerName: 'Test User'\n    };\n    \n    const callResult = await db.collection('calls').insertOne(testCallData);\n    console.log('✅ Test call saved to database with ID:', callResult.insertedId);\n    \n    // 7. Verify data persistence\n    const savedCall = await db.collection('calls').findOne({ _id: callResult.insertedId });\n    if (savedCall.googleMeetLink) {\n      console.log('✅ Google Meet link properly saved to database');\n    } else {\n      console.log('❌ Google Meet link not saved to database');\n    }\n    \n    // 8. Clean up test data\n    await db.collection('calls').deleteOne({ _id: callResult.insertedId });\n    await calendar.events.delete({\n      calendarId: 'primary',\n      eventId: createdEvent.id\n    });\n    \n    console.log('✅ Test cleanup completed');\n    console.log('\\n=== Google Calendar Integration Test Results ===');\n    console.log('✅ Google Calendar API connection: SUCCESS');\n    console.log('✅ Event creation with Meet link: SUCCESS');\n    console.log('✅ Database save with Meet link: SUCCESS');\n    console.log('✅ Overall integration status: WORKING');\n    \n    await client.close();\n    \n  } catch (error) {\n    console.error('❌ Google Calendar integration test failed:', error);\n    \n    if (error.code === 401) {\n      console.log('   → Token may be expired, try reconnecting Google Calendar');\n    } else if (error.code === 403) {\n      console.log('   → Insufficient permissions, check Google Cloud Console setup');\n    } else {\n      console.log('   → Check Google API credentials and configuration');\n    }\n  }\n}\n\n// Run the test\ntestGoogleCalendarIntegration().catch(console.error);","size_bytes":5459},"test-google-oauth-config.js":{"content":"import { OAuth2Client } from 'google-auth-library';\n\n// Test Google OAuth configuration\nasync function testGoogleOAuthConfig() {\n  console.log('🔍 Testing Google OAuth Configuration...\\n');\n  \n  // Check environment variables\n  const clientId = process.env.GOOGLE_CLIENT_ID;\n  const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\n  const redirectUri = `https://${process.env.REPLIT_DEV_DOMAIN}/api/auth/google/callback`;\n  \n  console.log('Environment Variables:');\n  console.log(`✓ GOOGLE_CLIENT_ID: ${clientId ? clientId.substring(0, 20) + '...' : 'MISSING'}`);\n  console.log(`✓ GOOGLE_CLIENT_SECRET: ${clientSecret ? 'PRESENT' : 'MISSING'}`);\n  console.log(`✓ Redirect URI: ${redirectUri}\\n`);\n  \n  if (!clientId || !clientSecret) {\n    console.error('❌ Missing Google OAuth credentials!');\n    return;\n  }\n  \n  // Create OAuth2 client\n  const oauth2Client = new OAuth2Client(clientId, clientSecret, redirectUri);\n  \n  // Generate auth URL\n  const authUrl = oauth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: [\n      'https://www.googleapis.com/auth/calendar.readonly',\n      'https://www.googleapis.com/auth/calendar.events',\n    ],\n    state: 'test-user-123',\n    prompt: 'consent',\n  });\n  \n  console.log('✓ OAuth2 Client created successfully');\n  console.log('✓ Auth URL generated successfully');\n  console.log('\\n🔗 Test Auth URL:');\n  console.log(authUrl);\n  console.log('\\n📝 Configuration Status:');\n  console.log('✓ Client ID format: Valid');\n  console.log('✓ Client Secret: Present');\n  console.log('✓ Redirect URI: Configured');\n  \n  console.log('\\n🚨 If you get \"Access blocked\" error, you need to:');\n  console.log('1. Go to Google Cloud Console');\n  console.log('2. Add your email to Test Users in OAuth consent screen');\n  console.log('3. Ensure the redirect URI matches exactly');\n  console.log('4. Make sure Google Calendar API is enabled');\n  console.log('\\n📋 Required Test Users:');\n  console.log('- salesrep@techize.com');\n  console.log('- mlp.yashkumar@gmail.com');\n  console.log('\\n✅ Configuration test complete!');\n}\n\n// Run the test\ntestGoogleOAuthConfig().catch(console.error);","size_bytes":2156},"test-google-oauth-direct.js":{"content":"import { OAuth2Client } from 'google-auth-library';\n\nconst CLIENT_ID = '917137353724-ftng1fau0pm0hdl65l1i5et8fmssvedj.apps.googleusercontent.com';\nconst CLIENT_SECRET = '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';\nconst REDIRECT_URI = 'https://decisionmaker.shrawantravels.com/api/auth/google/callback';\n\nasync function testGoogleOAuthFlow() {\n  console.log('🔍 Testing Google OAuth Configuration...\\n');\n  \n  // Step 1: Create OAuth2 client\n  const oauth2Client = new OAuth2Client(CLIENT_ID, CLIENT_SECRET, REDIRECT_URI);\n  console.log('✅ OAuth2 client created successfully');\n  \n  // Step 2: Generate authorization URL\n  const authUrl = oauth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: [\n      'https://www.googleapis.com/auth/calendar',\n      'https://www.googleapis.com/auth/calendar.events'\n    ],\n    prompt: 'consent'\n  });\n  \n  console.log('✅ Authorization URL generated successfully');\n  console.log('🔗 Auth URL:', authUrl);\n  console.log('');\n  \n  // Step 3: Test what happens when Google rejects the client\n  console.log('❌ EXPECTED ERROR: When you visit the auth URL above and complete OAuth:');\n  console.log('   - Error: invalid_client');\n  console.log('   - Description: Unauthorized');\n  console.log('   - Status: 401');\n  console.log('');\n  \n  console.log('🛠️  TO FIX THIS ERROR:');\n  console.log('1. Go to: https://console.cloud.google.com/apis/credentials');\n  console.log('2. Find OAuth 2.0 Client ID:', CLIENT_ID);\n  console.log('3. Click on it to edit');\n  console.log('4. In \"Authorized redirect URIs\" section, add EXACTLY:');\n  console.log('   ', REDIRECT_URI);\n  console.log('5. Go to OAuth consent screen → Test users → Add: salesrep@techize.com');\n  console.log('6. Go to API Library → Enable \"Google Calendar API\"');\n  console.log('7. Wait 5-10 minutes for changes to take effect');\n  console.log('');\n  \n  console.log('🔄 AFTER FIXING:');\n  console.log('- The auth URL above will work correctly');\n  console.log('- Calendar connection in the app will work');\n  console.log('- No more \"invalid_client\" errors');\n  console.log('');\n  \n  console.log('📋 CONFIGURATION SUMMARY:');\n  console.log('- Client ID: CORRECT ✅');\n  console.log('- Client Secret: CORRECT ✅');\n  console.log('- Redirect URI: CORRECT ✅');\n  console.log('- Application Code: CORRECT ✅');\n  console.log('- Google Cloud Console: NEEDS CONFIGURATION ❌');\n  console.log('');\n  \n  console.log('The issue is 100% in Google Cloud Console configuration, not our code.');\n}\n\ntestGoogleOAuthFlow().catch(console.error);","size_bytes":2596},"verify-google-config.js":{"content":"import { OAuth2Client } from 'google-auth-library';\n\nasync function verifyGoogleConfig() {\n  console.log('=== Google Cloud Console Configuration Verification ===\\n');\n  \n  // Our current configuration\n  const CLIENT_ID = '917137353724-ftng1fau0pm0hdl65l1i5et8fmssvedj.apps.googleusercontent.com';\n  const CLIENT_SECRET = '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';\n  const REDIRECT_URI = 'https://decisionmaker.shrawantravels.com/api/auth/google/callback';\n  \n  console.log('Current Configuration:');\n  console.log('- Client ID:', CLIENT_ID);\n  console.log('- Client Secret:', CLIENT_SECRET);\n  console.log('- Redirect URI:', REDIRECT_URI);\n  console.log('');\n  \n  // Create OAuth2 client\n  const oauth2Client = new OAuth2Client(CLIENT_ID, CLIENT_SECRET, REDIRECT_URI);\n  \n  // Generate auth URL\n  const authUrl = oauth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: [\n      'https://www.googleapis.com/auth/calendar',\n      'https://www.googleapis.com/auth/calendar.events'\n    ],\n    prompt: 'consent',\n    state: 'test-user-id'\n  });\n  \n  console.log('✓ OAuth2 Client created successfully');\n  console.log('✓ Auth URL generated successfully');\n  console.log('');\n  \n  console.log('NEXT STEPS:');\n  console.log('1. Go to Google Cloud Console: https://console.cloud.google.com/apis/credentials');\n  console.log('2. Find OAuth 2.0 Client ID:', CLIENT_ID);\n  console.log('3. Add this EXACT redirect URI:');\n  console.log('   ', REDIRECT_URI);\n  console.log('4. Go to OAuth consent screen and add test user: salesrep@techize.com');\n  console.log('5. Enable Google Calendar API in the API Library');\n  console.log('');\n  \n  console.log('Test Auth URL (use this to test manually):');\n  console.log(authUrl);\n  console.log('');\n  \n  console.log('Expected Error Until Fixed:');\n  console.log('- Error: invalid_client');\n  console.log('- Description: Unauthorized');\n  console.log('- Status: 401');\n  console.log('');\n  \n  console.log('This error means Google Cloud Console is NOT configured correctly.');\n  console.log('Follow the steps above to fix the configuration.');\n}\n\nverifyGoogleConfig().catch(console.error);","size_bytes":2167},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/email-service.ts":{"content":"import nodemailer from \"nodemailer\";\n\n// Create transporter with Gmail SMTP configuration\nconst transporter = nodemailer.createTransport({\n  service: \"gmail\",\n  port: 587,\n  host: \"smtp.gmail.com\",\n  secure: false,\n  auth: {\n    user: process.env.SMTP_USERNAME || \"yashvant6491@gmail.com\",\n    pass: process.env.SMTP_PASSWORD || \"jchnlivqrhaxoluk\",\n  },\n});\n\n// Verify transporter configuration on startup\ntransporter.verify((error, success) => {\n  if (error) {\n    console.error(\"Email transporter verification failed:\", error);\n  } else {\n    console.log(\"Email service is ready to send emails\");\n  }\n});\n\n// Email template for decision maker invitations\nexport const sendDecisionMakerInvitation = async (\n  recipientEmail: string,\n  recipientName: string,\n  salesRepName: string,\n  invitationToken: string,\n) => {\n  const inviteUrl = `${process.env.REPLIT_DOMAIN || \"https://localhost:5000\"}/invite/${invitationToken}`;\n\n  const mailOptions = {\n    from: '\"Naeberly Platform\" <noreply@naeberly.com>',\n    to: recipientEmail,\n    subject: `You've Been Referred to Join Neaborly — Confirm Your Commitment as a Decision Maker`,\n    html: `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Naeberly Invitation</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0; background-color: #f4f4f4; }\n          .container { max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }\n          .header { background: linear-gradient(135deg, #3b82f6 0%, #6366f1 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; margin: -20px -20px 20px -20px; }\n          .header h1 { margin: 0; font-size: 28px; }\n          .content { padding: 20px 0; }\n          .content h2 { color: #333; margin-bottom: 20px; }\n          .content p { color: #666; margin-bottom: 15px; }\n          .cta-button { display: inline-block; background: linear-gradient(135deg, #3b82f6 0%, #6366f1 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; margin: 20px 0; }\n          .cta-button:hover { opacity: 0.9; }\n          .benefits { background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0; }\n          .benefits ul { margin: 0; padding-left: 20px; }\n          .benefits li { margin-bottom: 10px; color: #555; }\n          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #999; font-size: 14px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>🚀 Naeberly Platform</h1>\n            <p style=\"margin: 10px 0 0 0; opacity: 0.9;\">Professional Business Networking</p>\n          </div>\n\n          <div class=\"content\">\n            <h2>Hi ${recipientName},</h2>\n\n            <p>You've been referred by <strong>${salesRepName}</strong> to join Neaborly as a participating Decision Maker.</p>\n\n            <p>Neaborly is a trusted, invite-only platform where senior professionals help drive warm introductions across industries. Your participation enables ${salesRepName.split(\" \")[0]} to gain access to a live database of verified Decision Makers like yourself — in exchange for your agreement to take three (3) short, 15-minute calls with other approved professionals.</p>\n\n            <div class=\"benefits\">\n              <h3>What You're Agreeing To:</h3>\n              <p>By accepting this referral:</p>\n              <ul>\n                <li>You agree to take <strong>3 scheduled 15-minute calls</strong> with verified Reps via Neaborly.</li>\n                <li>These calls are <strong>non-salesy discovery-style conversations</strong> with Reps from other real businesses — similar to how your Rep is trying to connect with others.</li>\n                <li>You will integrate your calendar (Google/Outlook) so that Neaborly can schedule calls efficiently.</li>\n                <li>Your participation unlocks access to the platform for the Rep who referred you.</li>\n              </ul>\n            </div>\n\n            <p>If you're ready to participate and unlock access for <strong>${salesRepName.split(\" \")[0]}</strong>, click below:</p>\n\n            <div style=\"text-align: center;\">\n              <a href=\"${inviteUrl}\" class=\"cta-button\">👉 Accept My Referral & Join Neaborly</a>\n            </div>\n\n            <p style=\"margin-top: 30px; font-size: 14px; color: #888;\">\n              Questions? Reply to this email or reach us at support@naeborly.com.\n            </p>\n\n            <p style=\"margin-top: 20px; font-size: 14px; color: #888;\">\n              Thank you for helping build a better, warmer way to connect.\n            </p>\n          </div>\n\n          <div class=\"footer\">\n            <p>Warm regards,<br>The Neaborly Team</p>\n            <p>© 2025 Naeberly Platform. All rights reserved.</p>\n            <p>This email was sent to ${recipientEmail}</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `,\n    text: `\n      Hi ${recipientName},\n\n      You've been referred by ${salesRepName} to join Neaborly as a participating Decision Maker.\n\n      Neaborly is a trusted, invite-only platform where senior professionals help drive warm introductions across industries. Your participation enables ${salesRepName.split(\" \")[0]} to gain access to a live database of verified Decision Makers like yourself — in exchange for your agreement to take three (3) short, 15-minute calls with other approved professionals.\n\n      What You're Agreeing To:\n      By accepting this referral:\n      • You agree to take 3 scheduled 15-minute calls with verified Reps via Neaborly.\n      • These calls are non-salesy discovery-style conversations with Reps from other real businesses — similar to how your Rep is trying to connect with others.\n      • You will integrate your calendar (Google/Outlook) so that Neaborly can schedule calls efficiently.\n      • Your participation unlocks access to the platform for the Rep who referred you.\n\n      If you're ready to participate and unlock access for ${salesRepName.split(\" \")[0]}, visit:\n      ${inviteUrl}\n\n      Questions? Reply to this email or reach us at support@naeborly.com.\n\n      Thank you for helping build a better, warmer way to connect.\n\n      Warm regards,\n      The Neaborly Team\n    `,\n  };\n\n  try {\n    const info = await transporter.sendMail(mailOptions);\n    console.log(\n      \"Decision maker invitation email sent successfully:\",\n      info.messageId,\n    );\n    return { success: true, messageId: info.messageId };\n  } catch (error) {\n    console.error(\"Error sending decision maker invitation email:\", error);\n    throw error;\n  }\n};\n\n// Email template for welcome messages\nexport const sendWelcomeEmail = async (\n  recipientEmail: string,\n  recipientName: string,\n  userRole: \"sales_rep\" | \"decision_maker\",\n) => {\n  const dashboardUrl = `${process.env.REPLIT_DOMAIN || \"https://localhost:5000\"}/dashboard`;\n\n  const mailOptions = {\n    from: '\"Naeberly Platform\" <noreply@naeberly.com>',\n    to: recipientEmail,\n    subject: `Welcome to Naeberly, ${recipientName}!`,\n    html: `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Welcome to Naeberly</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0; background-color: #f4f4f4; }\n          .container { max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }\n          .header { background: linear-gradient(135deg, #3b82f6 0%, #6366f1 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; margin: -20px -20px 20px -20px; }\n          .header h1 { margin: 0; font-size: 28px; }\n          .content { padding: 20px 0; }\n          .content h2 { color: #333; margin-bottom: 20px; }\n          .content p { color: #666; margin-bottom: 15px; }\n          .cta-button { display: inline-block; background: linear-gradient(135deg, #3b82f6 0%, #6366f1 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; margin: 20px 0; }\n          .cta-button:hover { opacity: 0.9; }\n          .next-steps { background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0; }\n          .next-steps ol { margin: 0; padding-left: 20px; }\n          .next-steps li { margin-bottom: 10px; color: #555; }\n          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #999; font-size: 14px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>🎉 Welcome to Naeberly!</h1>\n            <p style=\"margin: 10px 0 0 0; opacity: 0.9;\">Your professional networking journey starts here</p>\n          </div>\n\n          <div class=\"content\">\n            <h2>Hello ${recipientName},</h2>\n\n            <p>Welcome to Naeberly! We're excited to have you join our professional networking community as a ${userRole === \"sales_rep\" ? \"Sales Representative\" : \"Decision Maker\"}.</p>\n\n            <div class=\"next-steps\">\n              <h3>Your next steps:</h3>\n              <ol>\n                ${\n                  userRole === \"sales_rep\"\n                    ? `\n                    <li><strong>Complete your profile</strong> - Add your professional details and LinkedIn verification</li>\n                    <li><strong>Choose your package</strong> - Select the subscription plan that fits your needs</li>\n                    <li><strong>Invite decision makers</strong> - Start building your network of valuable connections</li>\n                    <li><strong>Schedule your first call</strong> - Begin meaningful business conversations</li>\n                  `\n                    : `\n                    <li><strong>Set up your calendar</strong> - Connect your Google Calendar for easy scheduling</li>\n                    <li><strong>Review incoming invitations</strong> - See who wants to connect with you</li>\n                    <li><strong>Schedule calls</strong> - Choose times that work best for you</li>\n                    <li><strong>Provide feedback</strong> - Help maintain quality by rating your interactions</li>\n                  `\n                }\n              </ol>\n            </div>\n\n            <p>Ready to get started? Access your dashboard and begin your networking journey:</p>\n\n            <div style=\"text-align: center;\">\n              <a href=\"${dashboardUrl}\" class=\"cta-button\">Go to Dashboard</a>\n            </div>\n\n            <p style=\"margin-top: 30px;\">If you have any questions or need assistance, don't hesitate to reach out to our support team.</p>\n          </div>\n\n          <div class=\"footer\">\n            <p>© 2025 Naeberly Platform. All rights reserved.</p>\n            <p>This email was sent to ${recipientEmail}</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `,\n    text: `\n      Welcome to Naeberly, ${recipientName}!\n\n      We're excited to have you join our professional networking community as a ${userRole === \"sales_rep\" ? \"Sales Representative\" : \"Decision Maker\"}.\n\n      Your next steps:\n      ${\n        userRole === \"sales_rep\"\n          ? `\n          1. Complete your profile - Add your professional details and LinkedIn verification\n          2. Choose your package - Select the subscription plan that fits your needs\n          3. Invite decision makers - Start building your network of valuable connections\n          4. Schedule your first call - Begin meaningful business conversations\n        `\n          : `\n          1. Set up your calendar - Connect your Google Calendar for easy scheduling\n          2. Review incoming invitations - See who wants to connect with you\n          3. Schedule calls - Choose times that work best for you\n          4. Provide feedback - Help maintain quality by rating your interactions\n        `\n      }\n\n      Access your dashboard: ${dashboardUrl}\n\n      If you have any questions or need assistance, don't hesitate to reach out to our support team.\n\n      Best regards,\n      The Naeberly Team\n    `,\n  };\n\n  try {\n    const info = await transporter.sendMail(mailOptions);\n    console.log(\"Welcome email sent successfully:\", info.messageId);\n    return { success: true, messageId: info.messageId };\n  } catch (error) {\n    console.error(\"Error sending welcome email:\", error);\n    throw error;\n  }\n};\n\n// Email template for call reminders\nexport const sendCallReminder = async (\n  recipientEmail: string,\n  recipientName: string,\n  callDetails: {\n    salesRepName: string;\n    decisionMakerName: string;\n    scheduledAt: Date;\n    meetingLink?: string;\n  },\n) => {\n  const mailOptions = {\n    from: '\"Naeberly Platform\" <noreply@naeberly.com>',\n    to: recipientEmail,\n    subject: `Reminder: Your call with ${callDetails.salesRepName} is tomorrow`,\n    html: `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Call Reminder</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0; background-color: #f4f4f4; }\n          .container { max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }\n          .header { background: linear-gradient(135deg, #3b82f6 0%, #6366f1 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; margin: -20px -20px 20px -20px; }\n          .header h1 { margin: 0; font-size: 28px; }\n          .content { padding: 20px 0; }\n          .content h2 { color: #333; margin-bottom: 20px; }\n          .content p { color: #666; margin-bottom: 15px; }\n          .call-details { background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #3b82f6; }\n          .call-details h3 { margin-top: 0; color: #333; }\n          .call-details p { margin-bottom: 10px; color: #555; font-weight: 500; }\n          .cta-button { display: inline-block; background: linear-gradient(135deg, #3b82f6 0%, #6366f1 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; margin: 20px 0; }\n          .cta-button:hover { opacity: 0.9; }\n          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #999; font-size: 14px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>📞 Call Reminder</h1>\n            <p style=\"margin: 10px 0 0 0; opacity: 0.9;\">Your upcoming Naeberly call</p>\n          </div>\n\n          <div class=\"content\">\n            <h2>Hello ${recipientName},</h2>\n\n            <p>This is a friendly reminder about your upcoming call scheduled through Naeberly.</p>\n\n            <div class=\"call-details\">\n              <h3>Call Details:</h3>\n              <p><strong>Participants:</strong> ${callDetails.salesRepName} & ${callDetails.decisionMakerName}</p>\n              <p><strong>Date & Time:</strong> ${callDetails.scheduledAt.toLocaleDateString(\n                \"en-US\",\n                {\n                  weekday: \"long\",\n                  year: \"numeric\",\n                  month: \"long\",\n                  day: \"numeric\",\n                  hour: \"2-digit\",\n                  minute: \"2-digit\",\n                  timeZoneName: \"short\",\n                },\n              )}</p>\n              ${callDetails.meetingLink ? `<p><strong>Meeting Link:</strong> <a href=\"${callDetails.meetingLink}\">${callDetails.meetingLink}</a></p>` : \"\"}\n            </div>\n\n            <p>Please make sure to:</p>\n            <ul>\n              <li>Check your calendar and be available at the scheduled time</li>\n              <li>Prepare any materials or questions you'd like to discuss</li>\n              <li>Test your internet connection and audio/video equipment</li>\n              <li>Have your contact information ready if needed</li>\n            </ul>\n\n            <p>Looking forward to a productive conversation!</p>\n          </div>\n\n          <div class=\"footer\">\n            <p>© 2025 Naeberly Platform. All rights reserved.</p>\n            <p>This email was sent to ${recipientEmail}</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `,\n    text: `\n      Call Reminder - Naeberly Platform\n\n      Hello ${recipientName},\n\n      This is a friendly reminder about your upcoming call scheduled through Naeberly.\n\n      Call Details:\n      - Participants: ${callDetails.salesRepName} & ${callDetails.decisionMakerName}\n      - Date & Time: ${callDetails.scheduledAt.toLocaleDateString(\"en-US\", {\n        weekday: \"long\",\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        timeZoneName: \"short\",\n      })}\n      ${callDetails.meetingLink ? `- Meeting Link: ${callDetails.meetingLink}` : \"\"}\n\n      Please make sure to:\n      - Check your calendar and be available at the scheduled time\n      - Prepare any materials or questions you'd like to discuss\n      - Test your internet connection and audio/video equipment\n      - Have your contact information ready if needed\n\n      Looking forward to a productive conversation!\n\n      Best regards,\n      The Naeberly Team\n    `,\n  };\n\n  try {\n    const info = await transporter.sendMail(mailOptions);\n    console.log(\"Call reminder email sent successfully:\", info.messageId);\n    return { success: true, messageId: info.messageId };\n  } catch (error) {\n    console.error(\"Error sending call reminder email:\", error);\n    throw error;\n  }\n};\n\n// Email template for booking confirmation to sales rep\nexport const sendBookingConfirmationToRep = async (\n  repEmail: string,\n  repFirstName: string,\n  dmFullName: string,\n  dmFirstName: string,\n  dmRole: string,\n  dmCompany: string,\n  callDate: string,\n  callTime: string,\n  timezone: string,\n  meetingLink?: string,\n) => {\n  const mailOptions = {\n    from: '\"Naeberly Platform\" <noreply@naeberly.com>',\n    to: repEmail,\n    subject: `✅ Your Call with ${dmFirstName} Has Been Confirmed`,\n    html: `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Booking Confirmation</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0; background-color: #f4f4f4; }\n          .container { max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }\n          .header { background: linear-gradient(135deg, #10b981 0%, #059669 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; margin: -20px -20px 20px -20px; }\n          .header h1 { margin: 0; font-size: 28px; }\n          .content { padding: 20px 0; }\n          .content h2 { color: #333; margin-bottom: 20px; }\n          .content p { color: #666; margin-bottom: 15px; }\n          .call-details { background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #10b981; }\n          .call-details h3 { color: #10b981; margin-top: 0; }\n          .call-details ul { margin: 10px 0; padding-left: 20px; }\n          .call-details li { margin-bottom: 8px; color: #555; }\n          .warning-box { background-color: #fef3c7; border: 1px solid #f59e0b; padding: 15px; border-radius: 5px; margin: 20px 0; }\n          .warning-box p { color: #92400e; margin: 0; font-weight: 500; }\n          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #999; font-size: 14px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>✅ Call Confirmed!</h1>\n            <p style=\"margin: 10px 0 0 0; opacity: 0.9;\">Your Neaborly call is scheduled</p>\n          </div>\n\n          <div class=\"content\">\n            <h2>Hi ${repFirstName},</h2>\n\n            <p>Great news — your 15-minute Neaborly call with <strong>${dmFullName}</strong> (${dmRole}, ${dmCompany}) has been confirmed!</p>\n\n            <div class=\"call-details\">\n              <h3>📅 Call Details:</h3>\n              <ul>\n                <li><strong>Date:</strong> ${callDate}</li>\n                <li><strong>Time:</strong> ${callTime} (${timezone})</li>\n                <li><strong>Location:</strong> ${meetingLink || \"Meeting link will be provided\"}</li>\n                <li><strong>Duration:</strong> 15 minutes</li>\n              </ul>\n            </div>\n\n            <div class=\"call-details\">\n              <h3>✅ What to Prepare:</h3>\n              <ul>\n                <li>Be clear, respectful, and concise</li>\n                <li>Aim to make the conversation valuable — not just for you, but for <strong>${dmFirstName}</strong> too</li>\n                <li>You may only have one shot — make it count</li>\n              </ul>\n            </div>\n\n            <div class=\"warning-box\">\n              <p>⚠️ No-shows, rudeness, or time-wasting will be flagged and may lead to account suspension.</p>\n              <p><strong>Please be on time and professional.</strong></p>\n            </div>\n\n            <p>You can view or reschedule the call from your dashboard if needed.</p>\n\n            <p>Wishing you a productive conversation,</p>\n          </div>\n\n          <div class=\"footer\">\n            <p>The Neaborly Team<br>support@naeborly.com</p>\n            <p>© 2025 Naeberly Platform. All rights reserved.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `,\n    text: `\n      Hi ${repFirstName},\n\n      Great news — your 15-minute Neaborly call with ${dmFullName} (${dmRole}, ${dmCompany}) has been confirmed!\n\n      📅 Call Details:\n      • Date: ${callDate}\n      • Time: ${callTime} (${timezone})\n      • Location: ${meetingLink || \"Meeting link will be provided\"}\n      • Duration: 15 minutes\n\n      ✅ What to Prepare:\n      • Be clear, respectful, and concise\n      • Aim to make the conversation valuable — not just for you, but for ${dmFirstName} too\n      • You may only have one shot — make it count\n\n      ⚠️ No-shows, rudeness, or time-wasting will be flagged and may lead to account suspension.\n\n      Please be on time and professional.\n\n      You can view or reschedule the call from your dashboard if needed.\n\n      Wishing you a productive conversation,\n      The Neaborly Team\n      support@naeborly.com\n    `,\n  };\n\n  try {\n    const info = await transporter.sendMail(mailOptions);\n    console.log(\n      \"Booking confirmation email sent to rep successfully:\",\n      info.messageId,\n    );\n    return { success: true, messageId: info.messageId };\n  } catch (error) {\n    console.error(\"Error sending booking confirmation email to rep:\", error);\n    throw error;\n  }\n};\n\n// Email template for booking confirmation to decision maker\nexport const sendBookingConfirmationToDM = async (\n  dmEmail: string,\n  dmFirstName: string,\n  repFullName: string,\n  repRole: string,\n  repCompany: string,\n  callDate: string,\n  callTime: string,\n  timezone: string,\n  meetingLink?: string,\n) => {\n  const mailOptions = {\n    from: '\"Naeberly Platform\" <noreply@naeberly.com>',\n    to: dmEmail,\n    subject: `✅ A Neaborly Call Has Been Booked With You`,\n    html: `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Booking Confirmation</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0; background-color: #f4f4f4; }\n          .container { max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }\n          .header { background: linear-gradient(135deg, #3b82f6 0%, #6366f1 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; margin: -20px -20px 20px -20px; }\n          .header h1 { margin: 0; font-size: 28px; }\n          .content { padding: 20px 0; }\n          .content h2 { color: #333; margin-bottom: 20px; }\n          .content p { color: #666; margin-bottom: 15px; }\n          .call-details { background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #3b82f6; }\n          .call-details h3 { color: #3b82f6; margin-top: 0; }\n          .call-details ul { margin: 10px 0; padding-left: 20px; }\n          .call-details li { margin-bottom: 8px; color: #555; }\n          .reminder-box { background-color: #dbeafe; border: 1px solid #3b82f6; padding: 15px; border-radius: 5px; margin: 20px 0; }\n          .reminder-box p { color: #1e40af; margin: 5px 0; }\n          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #999; font-size: 14px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>✅ Call Scheduled!</h1>\n            <p style=\"margin: 10px 0 0 0; opacity: 0.9;\">A Neaborly call has been booked with you</p>\n          </div>\n\n          <div class=\"content\">\n            <h2>Hi ${dmFirstName},</h2>\n\n            <p>You've been matched for a 15-minute Neaborly call with <strong>${repFullName}</strong> (${repRole}, ${repCompany}).</p>\n\n            <div class=\"call-details\">\n              <h3>📅 Call Details:</h3>\n              <ul>\n                <li><strong>Date:</strong> ${callDate}</li>\n                <li><strong>Time:</strong> ${callTime} (${timezone})</li>\n                <li><strong>Location:</strong> ${meetingLink || \"Meeting link will be provided\"}</li>\n                <li><strong>Duration:</strong> 15 minutes</li>\n              </ul>\n            </div>\n\n            <p>This call is part of your commitment to participate in 3 peer-to-peer discovery calls as a Decision Maker on Neaborly. Every conversation helps build a better, more meaningful network.</p>\n\n            <div class=\"reminder-box\">\n              <h3 style=\"color: #1e40af; margin-top: 0;\">📌 Quick Reminder:</h3>\n              <p>• Please attend on time and be present</p>\n              <p>• If something urgent comes up, reschedule in your dashboard</p>\n              <p>• No-shows or repeated late attendance may result in your account being flagged</p>\n            </div>\n\n            <p>We're grateful to have you helping shape the future of high-trust, referral-based networking.</p>\n\n            <p>Thank you,</p>\n          </div>\n\n          <div class=\"footer\">\n            <p>The Neaborly Team<br>support@naeborly.com</p>\n            <p>© 2025 Naeberly Platform. All rights reserved.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `,\n    text: `\n      Hi ${dmFirstName},\n\n      You've been matched for a 15-minute Neaborly call with ${repFullName} (${repRole}, ${repCompany}).\n\n      📅 Call Details:\n      • Date: ${callDate}\n      • Time: ${callTime} (${timezone})\n      • Location: ${meetingLink || \"Meeting link will be provided\"}\n      • Duration: 15 minutes\n\n      This call is part of your commitment to participate in 3 peer-to-peer discovery calls as a Decision Maker on Neaborly. Every conversation helps build a better, more meaningful network.\n\n      📌 Quick Reminder:\n      • Please attend on time and be present\n      • If something urgent comes up, reschedule in your dashboard\n      • No-shows or repeated late attendance may result in your account being flagged\n\n      We're grateful to have you helping shape the future of high-trust, referral-based networking.\n\n      Thank you,\n      The Neaborly Team\n      support@naeborly.com\n    `,\n  };\n\n  try {\n    const info = await transporter.sendMail(mailOptions);\n    console.log(\n      \"Booking confirmation email sent to DM successfully:\",\n      info.messageId,\n    );\n    return { success: true, messageId: info.messageId };\n  } catch (error) {\n    console.error(\"Error sending booking confirmation email to DM:\", error);\n    throw error;\n  }\n};\n\n// Warning email template for flagged sales reps\nexport const sendSalesRepWarningEmail = async (\n  repEmail: string,\n  repFirstName: string,\n  dmFirstName: string,\n  dmFullName: string,\n  dmRole: string,\n  dmCompany: string,\n  flagReason: string,\n  callDate: string,\n  repFlagCount: number,\n) => {\n  const mailOptions = {\n    from: '\"Naeberly Platform\" <noreply@naeberly.com>',\n    to: repEmail,\n    subject: `⚠ Warning Issued: Your Conduct on Neaborly Has Been Flagged`,\n    html: `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Neaborly Warning Notice</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0; background-color: #f4f4f4; }\n          .container { max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }\n          .header { background: linear-gradient(135deg, #f59e0b 0%, #ef4444 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; margin: -20px -20px 20px -20px; }\n          .header h1 { margin: 0; font-size: 28px; }\n          .content { padding: 20px 0; }\n          .content h2 { color: #333; margin-bottom: 20px; }\n          .content p { color: #666; margin-bottom: 15px; }\n          .warning-box { background-color: #fef3c7; border-left: 4px solid #f59e0b; padding: 15px; margin: 20px 0; border-radius: 5px; }\n          .incident-box { background-color: #fee2e2; border-left: 4px solid #ef4444; padding: 15px; margin: 20px 0; border-radius: 5px; }\n          .action-box { background-color: #d1fae5; border-left: 4px solid #10b981; padding: 15px; margin: 20px 0; border-radius: 5px; }\n          .cta-button { display: inline-block; background: linear-gradient(135deg, #3b82f6 0%, #6366f1 100%); color: white; padding: 12px 25px; text-decoration: none; border-radius: 5px; font-weight: bold; margin: 10px 0; }\n          .cta-button:hover { opacity: 0.9; }\n          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #999; font-size: 14px; }\n          .flag-count { font-size: 18px; font-weight: bold; color: #ef4444; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>⚠ Warning Notice</h1>\n            <p style=\"margin: 10px 0 0 0; opacity: 0.9;\">Neaborly Platform</p>\n          </div>\n\n          <div class=\"content\">\n            <h2>Hi ${repFirstName},</h2>\n\n            <p>We wanted to notify you that a flag has been submitted against your account following a recent scheduled call with ${dmFirstName} from ${dmCompany}.</p>\n\n            <div class=\"incident-box\">\n              <h3 style=\"color: #dc2626; margin-top: 0;\">🟠 What Happened:</h3>\n              <p><strong>Flag Reason:</strong> ${flagReason}</p>\n              <p><strong>Call Date:</strong> ${callDate}</p>\n              <p><strong>Decision Maker:</strong> ${dmFullName} (${dmRole}, ${dmCompany})</p>\n            </div>\n\n            <div class=\"warning-box\">\n              <p>You now have <span class=\"flag-count\">${repFlagCount} flag(s)</span> on your record. At 3 flags, your account will be automatically suspended for 90 days and you'll lose access to the platform.</p>\n            </div>\n\n            <div class=\"action-box\">\n              <h3 style=\"color: #059669; margin-top: 0;\">✅ What You Can Do:</h3>\n              <ul style=\"margin: 10px 0; padding-left: 20px;\">\n                <li>Review the call context if available in your dashboard</li>\n                <li>Reflect on the feedback and aim to prevent future issues</li>\n                <li>If you believe this was submitted in error, you can submit an appeal:</li>\n              </ul>\n              <a href=\"${process.env.REPLIT_DOMAIN || \"https://localhost:5000\"}/support\" class=\"cta-button\">Submit Appeal</a>\n            </div>\n\n            <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 5px; margin: 20px 0;\">\n              <h3 style=\"color: #374151; margin-top: 0;\">⏳ Why This Matters:</h3>\n              <p>Neaborly is built on mutual trust, respect, and time value. Ensuring high-quality, professional interactions protects everyone's experience — including yours.</p>\n              <p>We're here to help you succeed. Please let us know if you need support improving your conversations or preparing for calls.</p>\n            </div>\n\n            <p>Stay sharp,</p>\n            <p><strong>The Neaborly Team</strong></p>\n          </div>\n\n          <div class=\"footer\">\n            <p>support@naeborly.com</p>\n            <p>© 2025 Naeberly Platform. All rights reserved.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `,\n    text: `\n      Hi ${repFirstName},\n\n      We wanted to notify you that a flag has been submitted against your account following a recent scheduled call with ${dmFirstName} from ${dmCompany}.\n\n      🟠 What Happened:\n      Flag Reason: ${flagReason}\n      Call Date: ${callDate}\n      Decision Maker: ${dmFullName} (${dmRole}, ${dmCompany})\n\n      You now have ${repFlagCount} flag(s) on your record. At 3 flags, your account will be automatically suspended for 90 days and you'll lose access to the platform.\n\n      ✅ What You Can Do:\n      • Review the call context if available in your dashboard\n      • Reflect on the feedback and aim to prevent future issues\n      • If you believe this was submitted in error, you can submit an appeal here: ${process.env.REPLIT_DOMAIN || \"https://localhost:5000\"}/support\n\n      ⏳ Why This Matters:\n      Neaborly is built on mutual trust, respect, and time value. Ensuring high-quality, professional interactions protects everyone's experience — including yours.\n\n      We're here to help you succeed. Please let us know if you need support improving your conversations or preparing for calls.\n\n      Stay sharp,\n      The Neaborly Team\n      support@naeborly.com\n    `,\n  };\n\n  try {\n    const info = await transporter.sendMail(mailOptions);\n    console.log(\n      \"Warning email sent to sales rep successfully:\",\n      info.messageId,\n    );\n    return { success: true, messageId: info.messageId };\n  } catch (error) {\n    console.error(\"Error sending warning email to sales rep:\", error);\n    throw error;\n  }\n};\n\n// Warning email template for flagged decision makers\nexport const sendDecisionMakerWarningEmail = async (\n  dmEmail: string,\n  dmFirstName: string,\n  flagReason: string,\n  callDate: string,\n  repFullName: string,\n  repCompany: string,\n  dmFlagCount: number,\n) => {\n  const mailOptions = {\n    from: '\"Naeberly Platform\" <noreply@naeberly.com>',\n    to: dmEmail,\n    subject: `⚠ Conduct Warning Issued on Neaborly`,\n    html: `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Neaborly Warning Notice</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0; background-color: #f4f4f4; }\n          .container { max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }\n          .header { background: linear-gradient(135deg, #f59e0b 0%, #ef4444 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; margin: -20px -20px 20px -20px; }\n          .header h1 { margin: 0; font-size: 28px; }\n          .content { padding: 20px 0; }\n          .content h2 { color: #333; margin-bottom: 20px; }\n          .content p { color: #666; margin-bottom: 15px; }\n          .warning-box { background-color: #fef3c7; border-left: 4px solid #f59e0b; padding: 15px; margin: 20px 0; border-radius: 5px; }\n          .cta-button { background-color: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block; margin-top: 20px; }\n          .footer { background-color: #f8f9fa; padding: 20px; text-align: center; margin: 20px -20px -20px -20px; border-radius: 0 0 10px 10px; }\n          .details { background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 15px 0; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>⚠ Conduct Warning</h1>\n            <p>Your Neaborly account has received a flag</p>\n          </div>\n          \n          <div class=\"content\">\n            <p>Hi ${dmFirstName},</p>\n            \n            <p>We're reaching out to inform you that your Neaborly account has received a conduct warning.</p>\n            \n            <div class=\"details\">\n              <h3>🔺 What Happened:</h3>\n              <p><strong>Flag Reason:</strong> ${flagReason}</p>\n              <p><strong>Call Date:</strong> ${callDate}</p>\n              <p><strong>Reported By:</strong> ${repFullName} (${repCompany})</p>\n            </div>\n            \n            <div class=\"warning-box\">\n              <p><strong>You now have ${dmFlagCount} flag(s) on your record.</strong> At 3 flags, your account will be suspended for 90 days and you will no longer be eligible to support or unlock access for other Reps.</p>\n              \n              <p>Additionally, Reps who referred you may also face temporary penalties if your behaviour impacts the platform.</p>\n            </div>\n            \n            <h3>🚨 Why This Matters:</h3>\n            <p>Neaborly operates on a code of trust and professionalism. If you're unable to attend a scheduled call or participate respectfully, please use the platform tools to reschedule or cancel in advance.</p>\n            \n            <h3>🤝 Need Help?</h3>\n            <p>If you believe this warning was issued in error or have feedback for us, you may file an appeal here:</p>\n            \n            <a href=\"${process.env.REPLIT_DOMAIN || \"https://localhost:5000\"}/support\" class=\"cta-button\">Submit Appeal</a>\n            \n            <p style=\"margin-top: 30px;\">We appreciate your time and thank you for being part of a community that values real conversations.</p>\n            \n            <p>Warm regards,<br>\n            The Neaborly Team<br>\n            support@naeborly.com</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `,\n    text: `\n      Hi ${dmFirstName},\n\n      We're reaching out to inform you that your Neaborly account has received a conduct warning.\n\n      🔺 What Happened:\n      Flag Reason: ${flagReason}\n      Call Date: ${callDate}\n      Reported By: ${repFullName} (${repCompany})\n\n      You now have ${dmFlagCount} flag(s) on your record. At 3 flags, your account will be suspended for 90 days and you will no longer be eligible to support or unlock access for other Reps.\n\n      Additionally, Reps who referred you may also face temporary penalties if your behaviour impacts the platform.\n\n      🚨 Why This Matters:\n      Neaborly operates on a code of trust and professionalism. If you're unable to attend a scheduled call or participate respectfully, please use the platform tools to reschedule or cancel in advance.\n\n      🤝 Need Help?\n      If you believe this warning was issued in error or have feedback for us, you may file an appeal here:\n      ${process.env.REPLIT_DOMAIN || \"https://localhost:5000\"}/support\n\n      We appreciate your time and thank you for being part of a community that values real conversations.\n\n      Warm regards,\n      The Neaborly Team\n      support@naeborly.com\n    `,\n  };\n\n  try {\n    const info = await transporter.sendMail(mailOptions);\n    console.log(\n      \"Warning email sent to decision maker successfully:\",\n      info.messageId,\n    );\n    return { success: true, messageId: info.messageId };\n  } catch (error) {\n    console.error(\"Error sending warning email to decision maker:\", error);\n    throw error;\n  }\n};\n\n// Post-call feedback email for Decision Makers\nexport const sendPostCallFeedbackToDM = async (\n  dmEmail: string,\n  dmFirstName: string,\n  repFirstName: string,\n  callId: string,\n) => {\n  const feedbackUrl = `${process.env.REPLIT_DOMAIN || \"https://localhost:5000\"}/feedback/dm/${callId}`;\n\n  const mailOptions = {\n    from: '\"Naeberly Platform\" <noreply@naeberly.com>',\n    to: dmEmail,\n    subject: `Quick check-in on your recent call`,\n    html: `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Post-Call Feedback</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0; background-color: #f4f4f4; }\n          .container { max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }\n          .header { background: linear-gradient(135deg, #3b82f6 0%, #6366f1 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; margin: -20px -20px 20px -20px; }\n          .header h1 { margin: 0; font-size: 28px; }\n          .content { padding: 20px 0; }\n          .content h2 { color: #333; margin-bottom: 20px; }\n          .content p { color: #666; margin-bottom: 15px; }\n          .cta-button { display: inline-block; background: linear-gradient(135deg, #3b82f6 0%, #6366f1 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; margin: 20px 0; text-align: center; }\n          .cta-button:hover { opacity: 0.9; }\n          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #999; font-size: 14px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>📞 Naeberly Platform</h1>\n            <p style=\"margin: 10px 0 0 0; opacity: 0.9;\">Your feedback matters</p>\n          </div>\n\n          <div class=\"content\">\n            <h2>Hi ${dmFirstName},</h2>\n\n            <p>Thanks for taking a moment with <strong>${repFirstName}</strong> earlier.</p>\n            <p>We'd love your quick feedback to confirm how the call went.</p>\n\n            <p><strong>Did it take place? Were they polite and engaged?</strong></p>\n\n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${feedbackUrl}\" class=\"cta-button\" style=\"color: white; text-decoration: none;\">\n                👉 Click here to leave feedback\n              </a>\n            </div>\n\n            <p>Takes less than 30 seconds and helps us improve every connection.</p>\n\n            <p>Cheers,</p>\n          </div>\n\n          <div class=\"footer\">\n            <p>The Naeberly Team<br>support@naeborly.com</p>\n            <p>© 2025 Naeberly Platform. All rights reserved.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `,\n    text: `\n      Hi ${dmFirstName},\n\n      Thanks for taking a moment with ${repFirstName} earlier.\n      We'd love your quick feedback to confirm how the call went.\n\n      Did it take place? Were they polite and engaged?\n\n      Click here to leave feedback: ${feedbackUrl}\n\n      Takes less than 30 seconds and helps us improve every connection.\n\n      Cheers,\n      The Naeberly Team\n      support@naeborly.com\n    `,\n  };\n\n  try {\n    const info = await transporter.sendMail(mailOptions);\n    console.log(\n      \"Post-call feedback email sent to DM successfully:\",\n      info.messageId,\n    );\n    return { success: true, messageId: info.messageId };\n  } catch (error) {\n    console.error(\"Failed to send post-call feedback email to DM:\", error);\n    return { success: false, error: error.message };\n  }\n};\n\n// Post-call feedback email for Sales Reps\nexport const sendPostCallFeedbackToRep = async (\n  repEmail: string,\n  repFirstName: string,\n  dmFirstName: string,\n  callId: string,\n) => {\n  const feedbackUrl = `${process.env.REPLIT_DOMAIN || \"https://localhost:5000\"}/feedback/rep/${callId}`;\n\n  const mailOptions = {\n    from: '\"Naeberly Platform\" <noreply@naeberly.com>',\n    to: repEmail,\n    subject: `Quick feedback on your call with ${dmFirstName}`,\n    html: `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Post-Call Feedback</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0; background-color: #f4f4f4; }\n          .container { max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }\n          .header { background: linear-gradient(135deg, #10b981 0%, #059669 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; margin: -20px -20px 20px -20px; }\n          .header h1 { margin: 0; font-size: 28px; }\n          .content { padding: 20px 0; }\n          .content h2 { color: #333; margin-bottom: 20px; }\n          .content p { color: #666; margin-bottom: 15px; }\n          .cta-button { display: inline-block; background: linear-gradient(135deg, #10b981 0%, #059669 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; margin: 20px 0; text-align: center; }\n          .cta-button:hover { opacity: 0.9; }\n          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #999; font-size: 14px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>💼 Naeberly Platform</h1>\n            <p style=\"margin: 10px 0 0 0; opacity: 0.9;\">Quality matters</p>\n          </div>\n\n          <div class=\"content\">\n            <h2>Hi ${repFirstName},</h2>\n\n            <p>Just checking in on your call with <strong>${dmFirstName}</strong>.</p>\n\n            <p><strong>Did the call happen? Were they polite and engaged?</strong></p>\n\n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${feedbackUrl}\" class=\"cta-button\" style=\"color: white; text-decoration: none;\">\n                👉 Share quick feedback\n              </a>\n            </div>\n\n            <p>This helps us ensure quality and accountability across the platform.</p>\n\n            <p>Thanks for being part of it,</p>\n          </div>\n\n          <div class=\"footer\">\n            <p>The Naeberly Team<br>support@naeborly.com</p>\n            <p>© 2025 Naeberly Platform. All rights reserved.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `,\n    text: `\n      Hi ${repFirstName},\n\n      Just checking in on your call with ${dmFirstName}.\n\n      Did the call happen? Were they polite and engaged?\n\n      Share quick feedback: ${feedbackUrl}\n\n      This helps us ensure quality and accountability across the platform.\n\n      Thanks for being part of it,\n      The Naeberly Team\n      support@naeborly.com\n    `,\n  };\n\n  try {\n    const info = await transporter.sendMail(mailOptions);\n    console.log(\n      \"Post-call feedback email sent to Rep successfully:\",\n      info.messageId,\n    );\n    return { success: true, messageId: info.messageId };\n  } catch (error) {\n    console.error(\"Failed to send post-call feedback email to Rep:\", error);\n    return { success: false, error: error.message };\n  }\n};\n\n// Test email function\nexport const testEmailConnection = async () => {\n  try {\n    await transporter.verify();\n    console.log(\"Email service is ready to send emails\");\n    return { success: true, message: \"Email service connection verified\" };\n  } catch (error) {\n    console.error(\"Email service verification failed:\", error);\n    throw error;\n  }\n};\n","size_bytes":48408},"server/google-calendar.ts":{"content":"import { google } from \"googleapis\";\nimport { OAuth2Client } from \"google-auth-library\";\n\n// Google Calendar configuration\nconst GOOGLE_CLIENT_ID =\n  process.env.GOOGLE_CLIENT_ID ||\n  \"917137353724-ftng1fau0pm0hdl65l1i5et8fmssvedj.apps.googleusercontent.com\";\nconst GOOGLE_CLIENT_SECRET =\n  process.env.GOOGLE_CLIENT_SECRET || \"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\";\nconst GOOGLE_REDIRECT_URI =\n  process.env.GOOGLE_REDIRECT_URI ||\n  `https://decisionmaker.shrawantravels.com/api/auth/google/callback`;\n\nif (!GOOGLE_CLIENT_ID || !GOOGLE_CLIENT_SECRET) {\n  console.warn(\n    \"Google Calendar integration disabled: Missing GOOGLE_CLIENT_ID or GOOGLE_CLIENT_SECRET\",\n  );\n} else {\n  console.log(\"Google Calendar integration enabled\");\n  console.log(\"Redirect URI:\", GOOGLE_REDIRECT_URI);\n}\n\n// OAuth2 client setup\nexport const oauth2Client = new OAuth2Client(\n  GOOGLE_CLIENT_ID,\n  GOOGLE_CLIENT_SECRET,\n  GOOGLE_REDIRECT_URI,\n);\n\n// Calendar API setup\nexport const calendar = google.calendar({ version: \"v3\", auth: oauth2Client });\n\n// Generate authorization URL\nexport function getAuthUrl(userId: string): string {\n  const scopes = [\n    \"https://www.googleapis.com/auth/calendar.readonly\",\n    \"https://www.googleapis.com/auth/calendar.events\",\n  ];\n\n  return oauth2Client.generateAuthUrl({\n    access_type: \"offline\",\n    scope: scopes,\n    state: userId, // Pass user ID to identify the user after OAuth\n    prompt: \"consent\",\n  });\n}\n\n// Set credentials from stored tokens\nexport function setCredentials(tokens: any) {\n  oauth2Client.setCredentials(tokens);\n  console.log(\"Google Calendar credentials set with tokens:\", {\n    hasAccessToken: !!tokens.access_token,\n    hasRefreshToken: !!tokens.refresh_token,\n    expiryDate: tokens.expiry_date,\n    isExpired: tokens.expiry_date\n      ? new Date(tokens.expiry_date) < new Date()\n      : false,\n  });\n}\n\n// Refresh access token if expired\nexport async function refreshAccessToken(\n  userId: string,\n  storage: any,\n): Promise<any> {\n  try {\n    const user = await storage.getUser(userId);\n    if (!user?.googleCalendarTokens?.refresh_token) {\n      throw new Error(\"No refresh token available\");\n    }\n\n    // Set the refresh token\n    oauth2Client.setCredentials({\n      refresh_token: user.googleCalendarTokens.refresh_token,\n    });\n\n    // Get new access token\n    const { credentials } = await oauth2Client.refreshAccessToken();\n\n    // Update user's tokens in database\n    const updatedTokens = {\n      ...user.googleCalendarTokens,\n      access_token: credentials.access_token,\n      expiry_date: credentials.expiry_date,\n    };\n\n    await storage.updateUser(userId, {\n      googleCalendarTokens: updatedTokens,\n    });\n\n    // Set the new credentials\n    oauth2Client.setCredentials(updatedTokens);\n\n    console.log(\"Access token refreshed successfully for user:\", userId);\n    return updatedTokens;\n  } catch (error) {\n    console.error(\"Error refreshing access token:\", error);\n    throw error;\n  }\n}\n\n// Get user's calendar events (overloaded function for backward compatibility)\nexport async function getCalendarEvents(\n  userIdOrCalendarId: string,\n  storageOrTimeMin?: any,\n  timeMaxOrTimeMin?: string,\n  userId?: string,\n  storage?: any,\n) {\n  // Handle both old and new signatures\n  let actualUserId: string;\n  let actualStorage: any;\n  let calendarId: string = \"primary\";\n\n  if (typeof storageOrTimeMin === \"object\" && storageOrTimeMin.getUser) {\n    // New signature: getCalendarEvents(userId, storage)\n    actualUserId = userIdOrCalendarId;\n    actualStorage = storageOrTimeMin;\n  } else if (typeof userIdOrCalendarId === \"string\" && !storageOrTimeMin) {\n    // Single parameter call - treat as calendarId for simple event listing\n    calendarId = userIdOrCalendarId;\n    // This will fail without proper context, but maintains backward compatibility\n    throw new Error(\"Insufficient parameters for calendar event retrieval\");\n  } else {\n    // Old signature: getCalendarEvents(calendarId, timeMin, timeMax, userId, storage)\n    calendarId = userIdOrCalendarId;\n    actualUserId = userId!;\n    actualStorage = storage!;\n  }\n\n  return await getCalendarEventsInternal(\n    actualUserId,\n    actualStorage,\n    calendarId,\n  );\n}\n\n// Internal function that does the actual work\nasync function getCalendarEventsInternal(\n  userId: string,\n  storage: any,\n  calendarId: string = \"primary\",\n) {\n  try {\n    // Get user's tokens from storage\n    const user = await storage.getUser(userId);\n    if (!user?.googleCalendarTokens) {\n      throw new Error(\"No Google Calendar tokens found for user\");\n    }\n\n    // Check if token is expired and refresh if needed\n    const isTokenExpired = user.googleCalendarTokens.expiry_date\n      ? new Date(user.googleCalendarTokens.expiry_date) < new Date()\n      : false;\n\n    let tokens = user.googleCalendarTokens;\n\n    if (isTokenExpired) {\n      console.log(\"Token expired, refreshing...\");\n      tokens = await refreshAccessToken(userId, storage);\n    }\n\n    // Set credentials for this request\n    oauth2Client.setCredentials(tokens);\n\n    // Debug: Log token information\n    console.log(\"Setting credentials with tokens:\", {\n      hasAccessToken: !!tokens.access_token,\n      hasRefreshToken: !!tokens.refresh_token,\n      expiryDate: tokens.expiry_date,\n      tokenType: tokens.token_type,\n    });\n\n    // Get upcoming events (next 30 days)\n    const timeMin = new Date().toISOString();\n    const timeMax = new Date(\n      Date.now() + 30 * 24 * 60 * 60 * 1000,\n    ).toISOString();\n\n    console.log(\"Fetching calendar events for user:\", userId);\n    console.log(\"Time range:\", timeMin, \"to\", timeMax);\n\n    const response = await calendar.events.list({\n      calendarId,\n      timeMin,\n      timeMax,\n      singleEvents: true,\n      orderBy: \"startTime\",\n      maxResults: 100,\n    });\n\n    console.log(\n      \"Calendar events fetched successfully, count:\",\n      response.data.items?.length || 0,\n    );\n    return response.data.items || [];\n  } catch (error) {\n    console.error(\"Error fetching calendar events:\", error);\n    throw error;\n  }\n}\n\n// Create calendar event\nexport async function createCalendarEvent(eventData: {\n  summary: string;\n  description?: string;\n  start: { dateTime: string; timeZone: string };\n  end: { dateTime: string; timeZone: string };\n  attendees: { email: string; displayName?: string }[];\n  calendarId?: string;\n}) {\n  try {\n    const response = await calendar.events.insert({\n      calendarId: eventData.calendarId || \"primary\",\n      sendUpdates: \"all\",\n      requestBody: {\n        summary: eventData.summary,\n        description: eventData.description,\n        start: eventData.start,\n        end: eventData.end,\n        attendees: eventData.attendees,\n        conferenceData: {\n          createRequest: {\n            requestId: `meet-${Date.now()}`,\n            conferenceSolutionKey: { type: \"hangoutsMeet\" },\n          },\n        },\n      },\n      conferenceDataVersion: 1,\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error(\"Error creating calendar event:\", error);\n    throw error;\n  }\n}\n\n// Enhanced availability checking with all three conditions\nexport async function getAvailableSlots(\n  userId: string,\n  storage: any,\n  startDate: string,\n  endDate: string,\n  duration: number = 30, // Duration in minutes\n  salesRepId?: string, // Add sales rep ID for conflict checking\n) {\n  try {\n    console.log('\\n=== COMPREHENSIVE AVAILABILITY CHECK ===');\n    console.log(`Checking availability for DM: ${userId}, Sales Rep: ${salesRepId || 'N/A'}`);\n    console.log(`Date range: ${startDate} to ${endDate}, Duration: ${duration}min`);\n\n    // CONDITION 1: Check DM database conflicts\n    const dmDatabaseCalls = await storage.getCallsByDateRange(\n      userId,\n      startDate,\n      endDate\n    );\n\n    // CONDITION 2: Check DM Google Calendar conflicts\n    let dmCalendarBusyTimes = [];\n    try {\n      const events = await getCalendarEventsInternal(userId, storage, \"primary\");\n      dmCalendarBusyTimes = events\n        .filter((event) => event.start?.dateTime && event.end?.dateTime)\n        .map((event) => ({\n          start: new Date(event.start!.dateTime!),\n          end: new Date(event.end!.dateTime!),\n          source: 'dm_calendar',\n          summary: event.summary || 'Calendar Event'\n        }));\n      console.log(`✓ DM Calendar: Found ${dmCalendarBusyTimes.length} events`);\n    } catch (calendarError) {\n      console.warn(`⚠ DM Calendar access failed:`, calendarError.message);\n    }\n\n    // CONDITION 3: Check Sales Rep database conflicts (if salesRepId provided)\n    let salesRepDatabaseCalls = [];\n    if (salesRepId) {\n      try {\n        salesRepDatabaseCalls = await storage.getCallsBySalesRepDateRange(\n          salesRepId,\n          startDate,\n          endDate\n        );\n        console.log(`✓ Sales Rep Database: Found ${salesRepDatabaseCalls.length} calls`);\n      } catch (error) {\n        console.warn(`⚠ Sales Rep database check failed:`, error.message);\n      }\n    } else {\n      console.log('! Sales Rep ID not provided - skipping rep conflict check');\n    }\n\n    // Convert all conflicts to busy times\n    const dmDatabaseBusyTimes = dmDatabaseCalls\n      .filter((call) => call.scheduledAt && call.endTime && call.status !== 'cancelled')\n      .map((call) => ({\n        start: new Date(call.scheduledAt),\n        end: new Date(call.endTime),\n        source: 'dm_database',\n        callId: call._id,\n        status: call.status\n      }));\n\n    const salesRepBusyTimes = salesRepDatabaseCalls\n      .filter((call) => call.scheduledAt && call.endTime && call.status !== 'cancelled')\n      .map((call) => ({\n        start: new Date(call.scheduledAt),\n        end: new Date(call.endTime),\n        source: 'salesrep_database',\n        callId: call._id,\n        dmId: call.decisionMakerId\n      }));\n\n    // Combine ALL busy times from all three sources\n    const allBusyTimes = [...dmCalendarBusyTimes, ...dmDatabaseBusyTimes, ...salesRepBusyTimes]\n      .sort((a, b) => a.start.getTime() - b.start.getTime());\n\n    console.log('Conflict Summary:');\n    console.log(`- DM Database: ${dmDatabaseBusyTimes.length} conflicts`);\n    console.log(`- DM Calendar: ${dmCalendarBusyTimes.length} conflicts`);\n    console.log(`- Sales Rep Database: ${salesRepBusyTimes.length} conflicts`);\n    console.log(`- Total Conflicts: ${allBusyTimes.length}`);\n\n    if (allBusyTimes.length > 0) {\n      console.log('Conflict Details:');\n      allBusyTimes.forEach(bt => {\n        console.log(`  - ${bt.source}: ${bt.start.toISOString()} to ${bt.end.toISOString()}`);\n      });\n    }\n\n\n\n    // Generate available slots\n    const availableSlots = [];\n    const workingHours = { start: 8, end: 18 }; // 8 AM to 6 PM (extended to catch all conflicts)\n    const slotDuration = duration * 60 * 1000; // Convert to milliseconds\n\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n\n    for (\n      let day = new Date(start);\n      day <= end;\n      day.setDate(day.getDate() + 1)\n    ) {\n      // Skip weekends\n      if (day.getDay() === 0 || day.getDay() === 6) continue;\n\n      // Generate slots for the day\n      const dayStart = new Date(day);\n      dayStart.setHours(workingHours.start, 0, 0, 0);\n\n      const dayEnd = new Date(day);\n      dayEnd.setHours(workingHours.end, 0, 0, 0);\n\n      for (\n        let slotStart = new Date(dayStart);\n        slotStart < dayEnd;\n        slotStart.setTime(slotStart.getTime() + slotDuration)\n      ) {\n        const slotEnd = new Date(slotStart.getTime() + slotDuration);\n\n        // Check if this slot conflicts with ANY busy time from ALL three sources\n        const conflictingEvents = allBusyTimes.filter((busyTime: any) => {\n          const hasOverlap = (\n            (slotStart >= busyTime.start && slotStart < busyTime.end) ||\n            (slotEnd > busyTime.start && slotEnd <= busyTime.end) ||\n            (slotStart <= busyTime.start && slotEnd >= busyTime.end)\n          );\n          \n          if (hasOverlap) {\n            console.log(`🔍 OVERLAP DETECTED: Slot ${slotStart.toISOString()} conflicts with ${busyTime.source} ${busyTime.start.toISOString()}`);\n          }\n          \n          return hasOverlap;\n        });\n\n        const isAvailable = conflictingEvents.length === 0;\n        \n        // Additional debugging for the specific problematic slot\n        if (slotStart.getUTCHours() === 8 && slotStart.getUTCMinutes() === 15) {\n          console.log(`\\n🚨 DEBUGGING 8:15 AM UTC SLOT:`);\n          console.log(`  Slot Start: ${slotStart.toISOString()}`);\n          console.log(`  Slot End: ${slotEnd.toISOString()}`);\n          console.log(`  All Busy Times: ${allBusyTimes.length}`);\n          allBusyTimes.forEach((bt, i) => {\n            console.log(`    ${i+1}. ${bt.source}: ${bt.start.toISOString()} to ${bt.end.toISOString()}`);\n            const overlap = (\n              (slotStart >= bt.start && slotStart < bt.end) ||\n              (slotEnd > bt.start && slotEnd <= bt.end) ||\n              (slotStart <= bt.start && slotEnd >= bt.end)\n            );\n            console.log(`       Overlap: ${overlap}`);\n          });\n          console.log(`  Conflicts Found: ${conflictingEvents.length}`);\n          console.log(`  Is Available: ${isAvailable}`);\n        }\n\n        if (slotEnd <= dayEnd) {\n          const slot = {\n            start: new Date(slotStart),\n            end: new Date(slotEnd),\n            duration,\n            isAvailable,\n            conflicts: conflictingEvents.map((conflict: any) => ({\n              source: conflict.source,\n              start: conflict.start,\n              end: conflict.end,\n              callId: conflict.callId || null,\n              summary: conflict.summary || null,\n              dmId: conflict.dmId || null\n            }))\n          };\n          \n          availableSlots.push(slot);\n          \n          // Log conflicts for debugging\n          if (!isAvailable) {\n            console.log(`❌ CONFLICT at ${slotStart.toISOString()}:`);\n            conflictingEvents.forEach((conflict: any) => {\n              console.log(`   - ${conflict.source}: ${conflict.start.toISOString()} to ${conflict.end.toISOString()}`);\n            });\n          }\n        }\n      }\n    }\n\n    console.log(`✅ Generated ${availableSlots.length} slots total, ${availableSlots.filter(s => !s.isAvailable).length} blocked by conflicts`);\n    console.log('=== END AVAILABILITY CHECK ===\\n');\n    \n    return availableSlots;\n  } catch (error) {\n    console.error(\"Error getting available slots:\", error);\n    throw error;\n  }\n}\n\n// Update calendar event\nexport async function updateCalendarEvent(\n  eventId: string,\n  eventData: any,\n  calendarId: string = \"primary\",\n) {\n  try {\n    const response = await calendar.events.update({\n      calendarId,\n      eventId,\n      sendUpdates: \"all\",\n      requestBody: eventData,\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error(\"Error updating calendar event:\", error);\n    throw error;\n  }\n}\n\n// Delete calendar event\nexport async function deleteCalendarEvent(\n  eventId: string,\n  calendarId: string = \"primary\",\n) {\n  try {\n    await calendar.events.delete({\n      calendarId,\n      eventId,\n      sendUpdates: \"all\",\n    });\n\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting calendar event:\", error);\n    throw error;\n  }\n}\n","size_bytes":15373},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport MongoStore from \"connect-mongo\";\nimport cors from \"cors\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { connectToMongoDB } from \"./mongodb\";\n\n\nconst app = express();\n\n// Trust proxy for secure cookies in production\napp.set('trust proxy', 1);\n\n// CORS configuration for production deployment\napp.use(cors({\n  origin: function (origin, callback) {\n    // Allow requests with no origin (mobile apps, curl, etc.)\n    if (!origin) return callback(null, true);\n    \n    // In development, allow all origins\n    if (process.env.NODE_ENV === 'development') {\n      return callback(null, true);\n    }\n    \n    // In production, allow Replit domains and custom domains\n    const allowedOrigins = [\n      /^https:\\/\\/.*\\.replit\\.dev$/,\n      /^https:\\/\\/.*\\.repl\\.co$/,\n      /^https:\\/\\/.*\\.replit\\.app$/,\n      /^https:\\/\\/localhost:\\d+$/,\n      /^http:\\/\\/localhost:\\d+$/\n    ];\n    \n    const isAllowed = allowedOrigins.some(pattern => pattern.test(origin));\n    callback(null, isAllowed);\n  },\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\n}));\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration with MongoDB store for production persistence\nconst isProduction = process.env.NODE_ENV === 'production';\nconst mongoUrl = process.env.MONGODB_URI || 'mongodb+srv://yash6491:YASHVANT@cluster0.f3pmu6p.mongodb.net/biobridge?retryWrites=true&w=majority';\n\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'naeborly-session-secret-key-2024',\n  resave: false,\n  saveUninitialized: false,\n  store: MongoStore.create({\n    mongoUrl: mongoUrl,\n    touchAfter: 24 * 3600 // lazy session update\n  }),\n  cookie: {\n    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    httpOnly: true,\n    secure: isProduction,\n    sameSite: isProduction ? 'none' : 'lax', // 'none' for cross-origin in production\n    domain: isProduction ? undefined : undefined // Let browser handle domain\n  },\n  name: 'naeborly.sid' // Custom session name\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Connect to MongoDB\n  await connectToMongoDB();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3965},"server/jwt-middleware.ts":{"content":"import jwt from 'jsonwebtoken';\nimport { Request, Response, NextFunction } from 'express';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';\nconst JWT_EXPIRES_IN = '1h';\n\nexport interface JWTPayload {\n  userId: string;\n  email: string;\n  role: string;\n  iat?: number;\n  exp?: number;\n}\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: JWTPayload;\n    }\n  }\n}\n\nexport function generateToken(payload: Omit<JWTPayload, 'iat' | 'exp'>): string {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n}\n\nexport function verifyToken(token: string): JWTPayload | null {\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as JWTPayload;\n    console.log('Token verified successfully for user:', decoded.userId);\n    return decoded;\n  } catch (error) {\n    console.log('Token verification failed:', error instanceof Error ? error.message : 'Unknown error');\n    return null;\n  }\n}\n\nexport function authenticateToken(req: Request, res: Response, next: NextFunction) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n  if (!token) {\n    console.log('No token provided for:', req.url);\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  const decoded = verifyToken(token);\n  if (!decoded) {\n    console.log('Invalid token for:', req.url);\n    return res.status(403).json({ message: 'Invalid or expired token' });\n  }\n\n  req.user = decoded;\n  next();\n}\n\nexport function optionalAuth(req: Request, res: Response, next: NextFunction) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (token) {\n    const decoded = verifyToken(token);\n    if (decoded) {\n      req.user = decoded;\n    }\n  }\n\n  next();\n}","size_bytes":1851},"server/mongodb.ts":{"content":"import mongoose from \"mongoose\";\n\nexport async function connectToMongoDB() {\n  try {\n    const mongoUrl =\n      process.env.MONGODB_URI ||\n      \"mongodb+srv://yash6491:YASHVANT@cluster0.f3pmu6p.mongodb.net/biobridge?retryWrites=true&w=majority\";\n    await mongoose.connect(mongoUrl);\n    console.log(\"Connected to MongoDB Atlas successfully\");\n  } catch (error) {\n    console.error(\"MongoDB connection error:\", error);\n    throw error;\n  }\n}\n\n// User Schema\nconst userSchema = new mongoose.Schema(\n  {\n    email: { type: String, required: true, unique: true },\n    password: { type: String, required: true },\n    role: {\n      type: String,\n      required: true,\n      enum: [\"sales_rep\", \"decision_maker\", \"super_admin\", \"enterprise_admin\"],\n    },\n    firstName: { type: String, required: true },\n    lastName: { type: String, required: true },\n    linkedinUrl: { type: String },\n    linkedinVerified: { type: Boolean, default: false },\n    jobTitle: { type: String },\n    company: { type: String },\n    industry: { type: String },\n    companySize: { type: String },\n    yearsInRole: { type: String },\n    packageType: { type: String, default: \"free\" },\n    phone: { type: String },\n    timezone: { type: String, default: \"UTC\" },\n    bio: { type: String },\n    location: { type: String },\n    website: { type: String },\n    specialties: { type: String },\n    notificationSettings: {\n      emailNotifications: { type: Boolean, default: true },\n      smsNotifications: { type: Boolean, default: false },\n      meetingReminders: { type: Boolean, default: true },\n      weeklyDigest: { type: Boolean, default: true },\n      promotionalEmails: { type: Boolean, default: false }\n    },\n    privacySettings: {\n      profileVisibility: { type: String, default: \"public\" },\n      showCompanyInfo: { type: Boolean, default: true },\n      allowDirectContact: { type: Boolean, default: true },\n      shareCallHistory: { type: Boolean, default: false }\n    },\n    isActive: { type: Boolean, default: true },\n    standing: { type: String, default: \"good\" },\n    flagsReceived: { type: Number, default: 0 },\n    // Enterprise admin fields\n    companyDomain: { type: String },\n    domainVerified: { type: Boolean, default: false },\n    domainVerifiedAt: { type: Date },\n    department: { type: String },\n    requirePasswordChange: { type: Boolean, default: false },\n    permissions: [{ type: String }], // Array of decision maker IDs\n    invitationStatus: { type: String, enum: [\"invited\", \"accepted\", \"declined\"], default: \"accepted\" },\n    invitedBy: { type: mongoose.Schema.Types.ObjectId, ref: \"User\" },\n    invitedAt: { type: Date },\n    lastLogin: { type: Date },\n    // Google Calendar integration\n    googleCalendarTokens: {\n      access_token: { type: String },\n      refresh_token: { type: String },\n      scope: { type: String },\n      token_type: { type: String },\n      expiry_date: { type: Number }\n    },\n    googleCalendarId: { type: String },\n    calendarIntegrationEnabled: { type: Boolean, default: false },\n    // Email addon for basic/pro users\n    hasEmailAddon: { type: Boolean, default: false },\n    emailAddonPurchaseDate: { type: Date },\n    // Suspension system for flagged users\n    suspension: {\n      isActive: { type: Boolean, default: false },\n      startDate: { type: Date },\n      endDate: { type: Date },\n      reason: { type: String },\n      type: { type: String, enum: ['30-day', '90-day-flags', 'manual'], default: '90-day-flags' }\n    },\n  },\n  {\n    timestamps: true,\n  },\n);\n\n// Invitation Schema\nconst invitationSchema = new mongoose.Schema(\n  {\n    salesRepId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"User\",\n      required: true,\n    },\n    decisionMakerEmail: { type: String, required: true },\n    decisionMakerName: { type: String, required: true },\n    status: {\n      type: String,\n      default: \"pending\",\n      enum: [\"pending\", \"accepted\", \"declined\"],\n    },\n  },\n  {\n    timestamps: true,\n  },\n);\n\n// Call Schema\nconst callSchema = new mongoose.Schema(\n  {\n    salesRepId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"User\",\n      required: true,\n    },\n    decisionMakerId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"User\",\n      required: true,\n    },\n    scheduledAt: { type: Date, required: true },\n    endTime: { type: Date },\n    status: {\n      type: String,\n      default: \"scheduled\",\n      enum: [\"scheduled\", \"completed\", \"cancelled\"],\n    },\n    rating: { type: Number, min: 1, max: 5 }, // DM rating\n    feedback: { type: String }, // DM feedback\n    salesRepRating: { type: Number, min: 1, max: 5 }, // Sales rep rating\n    salesRepFeedback: { type: String }, // Sales rep feedback\n    company: { type: String },\n    pitch: { type: String },\n    // Google Calendar integration\n    googleCalendarEventId: { type: String },\n    googleMeetLink: { type: String },\n    salesRepCalendarId: { type: String },\n    decisionMakerCalendarId: { type: String },\n    meetingLink: { type: String }, // Keep for backward compatibility\n    timeZone: { type: String, default: \"UTC\" },\n    agenda: { type: String },\n    notes: { type: String },\n    platform: { type: String },\n    decisionMakerName: { type: String },\n  },\n  {\n    timestamps: true,\n  },\n);\n\n// Subscription Plan Schema\nconst subscriptionPlanSchema = new mongoose.Schema(\n  {\n    name: { type: String, required: true },\n    description: { type: String },\n    price: { type: String, required: true },\n    billingInterval: {\n      type: String,\n      required: true,\n      enum: [\"monthly\", \"yearly\"],\n      default: \"monthly\"\n    },\n    features: [{ type: String }],\n    maxCallCredits: { type: Number, required: true },\n    maxInvitations: { type: Number, required: true },\n    prioritySupport: { type: Boolean, default: false },\n    bestSeller: { type: Boolean, default: false },\n    isActive: { type: Boolean, default: true },\n  },\n  {\n    timestamps: true,\n  },\n);\n\nexport const User = mongoose.model(\"User\", userSchema);\nexport const Invitation = mongoose.model(\"Invitation\", invitationSchema);\nexport const Call = mongoose.model(\"Call\", callSchema);\nexport const SubscriptionPlan = mongoose.model(\"SubscriptionPlan\", subscriptionPlanSchema);\n\n// Company Credits Schema\nconst companyCreditsSchema = new mongoose.Schema({\n  companyDomain: { type: String, required: true, unique: true },\n  planType: { type: String, required: true },\n  monthlyCredits: { type: Number, required: true, default: 500 },\n  usedCredits: { type: Number, default: 0 },\n  remainingCredits: { type: Number, default: 500 },\n  currentPeriodStart: { type: Date, default: Date.now },\n  currentPeriodEnd: { type: Date, required: true },\n  perRepLimits: {\n    maxCallsPerMonth: { type: Number, default: null }, // null = unlimited\n    maxDMsPerMonth: { type: Number, default: null }\n  },\n  repUsage: [{\n    repId: { type: mongoose.Schema.Types.ObjectId, ref: \"User\" },\n    repEmail: { type: String },\n    callsBooked: { type: Number, default: 0 },\n    dmsUnlocked: { type: Number, default: 0 },\n    creditsUsed: { type: Number, default: 0 },\n    feedbacksReceived: { type: Number, default: 0 },\n    flagsReceived: { type: Number, default: 0 },\n    lastUpdated: { type: Date, default: Date.now }\n  }]\n}, {\n  timestamps: true\n});\n\n// Call Logs Schema\nconst callLogSchema = new mongoose.Schema({\n  salesRepId: { type: mongoose.Schema.Types.ObjectId, ref: \"User\", required: true },\n  decisionMakerId: { type: mongoose.Schema.Types.ObjectId, ref: \"User\", required: true },\n  companyDomain: { type: String, required: true },\n  callType: { type: String, enum: [\"intro\", \"follow_up\", \"demo\"], default: \"intro\" },\n  status: { type: String, enum: [\"scheduled\", \"completed\", \"cancelled\", \"no_show\"], required: true },\n  scheduledAt: { type: Date, required: true },\n  duration: { type: Number }, // in minutes\n  creditsUsed: { type: Number, default: 1 },\n  feedback: {\n    rating: { type: Number, min: 1, max: 5 },\n    comments: { type: String },\n    flags: [{ type: String }] // \"inappropriate\", \"unprepared\", \"technical_issues\"\n  },\n  meetingUrl: { type: String },\n  recordingUrl: { type: String }\n}, {\n  timestamps: true\n});\n\n// Feedback Schema\nconst feedbackSchema = new mongoose.Schema({\n  callLogId: { type: mongoose.Schema.Types.ObjectId, ref: \"CallLog\", required: true },\n  salesRepId: { type: mongoose.Schema.Types.ObjectId, ref: \"User\", required: true },\n  decisionMakerId: { type: mongoose.Schema.Types.ObjectId, ref: \"User\", required: true },\n  companyDomain: { type: String, required: true },\n  rating: { type: Number, required: true, min: 1, max: 5 },\n  comments: { type: String },\n  flags: [{ type: String }], // \"inappropriate\", \"unprepared\", \"technical_issues\", \"excellent\"\n  submittedBy: { type: String, enum: [\"decision_maker\", \"sales_rep\"], required: true },\n  visibility: { type: String, enum: [\"private\", \"team\", \"public\"], default: \"team\" }\n}, {\n  timestamps: true\n});\n\nexport const CompanyCredits = mongoose.model(\"CompanyCredits\", companyCreditsSchema);\nexport const CallLog = mongoose.model(\"CallLog\", callLogSchema);\nexport const Feedback = mongoose.model(\"Feedback\", feedbackSchema);\n\n// Company DMs Schema - Tracks DMs referred by company sales reps\nconst companyDMsSchema = new mongoose.Schema({\n  companyDomain: { type: String, required: true },\n  dmId: { type: mongoose.Schema.Types.ObjectId, ref: \"User\", required: true },\n  linkedRepId: { type: mongoose.Schema.Types.ObjectId, ref: \"User\", required: true },\n  verificationStatus: { type: String, enum: [\"pending\", \"verified\", \"rejected\", \"suspended\"], default: \"pending\" },\n  engagementScore: { type: Number, default: 0, min: 0, max: 100 },\n  flagCount: { type: Number, default: 0 },\n  totalInteractions: { type: Number, default: 0 },\n  lastInteraction: { type: Date },\n  referralDate: { type: Date, default: Date.now },\n  removalRequested: { type: Boolean, default: false },\n  removalReason: { type: String },\n  replacementDMId: { type: mongoose.Schema.Types.ObjectId, ref: \"User\" },\n  status: { type: String, enum: [\"active\", \"inactive\", \"removed\"], default: \"active\" }\n}, {\n  timestamps: true\n});\n\n// DM Flags Schema - Tracks quality and behavior flags\nconst dmFlagsSchema = new mongoose.Schema({\n  dmId: { type: mongoose.Schema.Types.ObjectId, ref: \"User\", required: true },\n  flaggedBy: { type: mongoose.Schema.Types.ObjectId, ref: \"User\", required: true },\n  companyDomain: { type: String, required: true },\n  flagType: { \n    type: String, \n    enum: [\"inappropriate_behavior\", \"unresponsive\", \"fake_profile\", \"low_engagement\", \"scheduling_issues\", \"quality_concern\"],\n    required: true \n  },\n  description: { type: String, required: true },\n  severity: { type: String, enum: [\"low\", \"medium\", \"high\", \"critical\"], default: \"medium\" },\n  status: { type: String, enum: [\"open\", \"investigating\", \"resolved\", \"dismissed\"], default: \"open\" },\n  resolution: { type: String },\n  resolvedBy: { type: mongoose.Schema.Types.ObjectId, ref: \"User\" },\n  resolvedAt: { type: Date }\n}, {\n  timestamps: true\n});\n\nexport const CompanyDMs = mongoose.model(\"CompanyDMs\", companyDMsSchema);\nexport const DMFlags = mongoose.model(\"DMFlags\", dmFlagsSchema);\n\n// Initial Feedback Schema (for post-call emails)\nconst initialFeedbackSchema = new mongoose.Schema(\n  {\n    callId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Call\",\n      required: true,\n    },\n    userId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"User\",\n      required: true,\n    },\n    userType: { \n      type: String, \n      enum: [\"decision_maker\", \"sales_rep\"], \n      required: true \n    },\n    callTookPlace: { type: Boolean, required: true },\n    wasPoliteEngaged: { \n      type: String, \n      enum: [\"yes\", \"no\", \"other\"], \n      required: true \n    },\n    comments: { type: String, default: \"\" },\n    submittedAt: { type: Date, default: Date.now }\n  },\n  {\n    timestamps: true,\n  }\n);\n\nexport const InitialFeedback = mongoose.model(\"InitialFeedback\", initialFeedbackSchema);\n\n// Rep Suspension Schema\nconst repSuspensionSchema = new mongoose.Schema({\n  repId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  type: { type: String, enum: ['30-day', '90-day'], required: true },\n  startDate: { type: Date, required: true },\n  endDate: { type: Date, required: true },\n  isActive: { type: Boolean, default: true },\n  suspensionReason: { type: String, required: true },\n  triggeringFlags: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Feedback' }],\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now }\n});\n\nexport const RepSuspension = mongoose.model(\"RepSuspension\", repSuspensionSchema);\n\n// Call Credits Schema - Tracks credits earned by sales reps\nconst callCreditsSchema = new mongoose.Schema({\n  repId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  dmId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  earnedAt: { type: Date, default: Date.now },\n  source: { type: String, required: true, enum: ['dm_onboarding', 'manual', 'bonus'] },\n  creditAmount: { type: Number, required: true, default: 1 },\n  month: { type: String, required: true }, // Format: YYYY-MM\n  isActive: { type: Boolean, default: true }\n}, { timestamps: true });\n\n// DM-Rep Credit Usage Schema - Tracks monthly credit usage per DM-Rep pair\nconst dmRepCreditUsageSchema = new mongoose.Schema({\n  repId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  dmId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  month: { type: String, required: true }, // Format: YYYY-MM\n  creditsUsed: { type: Number, default: 0, max: 3 }\n}, { timestamps: true });\n\n// Create compound indexes for performance\ncallCreditsSchema.index({ repId: 1, dmId: 1, month: 1 });\ndmRepCreditUsageSchema.index({ repId: 1, dmId: 1, month: 1 }, { unique: true });\n\nexport const CallCredits = mongoose.model(\"CallCredits\", callCreditsSchema);\nexport const DMRepCreditUsage = mongoose.model(\"DMRepCreditUsage\", dmRepCreditUsageSchema);\n\nexport type UserDocument = mongoose.Document & {\n  _id: mongoose.Types.ObjectId;\n  email: string;\n  password: string;\n  role: \"sales_rep\" | \"decision_maker\";\n  firstName: string;\n  lastName: string;\n  linkedinUrl?: string;\n  linkedinVerified: boolean;\n  jobTitle?: string;\n  company?: string;\n  industry?: string;\n  companySize?: string;\n  yearsInRole?: string;\n  packageType: string;\n  isActive: boolean;\n  standing: string;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\nexport type InvitationDocument = mongoose.Document & {\n  _id: mongoose.Types.ObjectId;\n  salesRepId: mongoose.Types.ObjectId;\n  decisionMakerEmail: string;\n  decisionMakerName: string;\n  status: \"pending\" | \"accepted\" | \"declined\";\n  createdAt: Date;\n  updatedAt: Date;\n};\n\nexport type CallDocument = mongoose.Document & {\n  _id: mongoose.Types.ObjectId;\n  salesRepId: mongoose.Types.ObjectId;\n  decisionMakerId: mongoose.Types.ObjectId;\n  scheduledAt: Date;\n  status: \"scheduled\" | \"completed\" | \"cancelled\";\n  rating?: number;\n  feedback?: string;\n  company?: string;\n  pitch?: string;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\nexport type SubscriptionPlanDocument = mongoose.Document & {\n  _id: mongoose.Types.ObjectId;\n  name: string;\n  description?: string;\n  price: string;\n  billingInterval: \"monthly\" | \"yearly\";\n  features: string[];\n  maxCallCredits: number;\n  maxInvitations: number;\n  prioritySupport: boolean;\n  bestSeller: boolean;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\n// Platform Settings Schema\nconst platformSettingsSchema = new mongoose.Schema(\n  {\n    // User Limits\n    maxDmsPerMonth: { type: Number, default: 50 },\n    freeCallLimit: { type: Number, default: 3 },\n\n    // Credit System\n    creditRefundNoShows: { type: Boolean, default: true },\n    creditValue: { type: Number, default: 5.00 },\n    refundWindow: { type: Number, default: 24 },\n\n    // Enterprise Features\n    nameVisibilityToggle: { type: Boolean, default: true },\n    emailUnlockFeature: { type: Boolean, default: true },\n    advancedAnalytics: { type: Boolean, default: true },\n    apiAccess: { type: Boolean, default: false },\n\n    // Security & Compliance\n    twoFactorAuth: { type: Boolean, default: false },\n    activityLogging: { type: Boolean, default: true },\n    sessionTimeout: { type: Number, default: 60 },\n    passwordPolicy: { type: String, enum: [\"low\", \"medium\", \"high\"], default: \"medium\" },\n\n    // System metadata\n    lastUpdatedBy: { type: mongoose.Schema.Types.ObjectId, ref: \"User\" },\n    lastUpdatedAt: { type: Date, default: Date.now }\n  },\n  {\n    timestamps: true,\n  }\n);\n\nexport const PlatformSettings = mongoose.model(\"PlatformSettings\", platformSettingsSchema);\n\nexport type PlatformSettingsDocument = mongoose.Document & {\n  _id: mongoose.Types.ObjectId;\n  maxDmsPerMonth: number;\n  freeCallLimit: number;\n  creditRefundNoShows: boolean;\n  creditValue: number;\n  refundWindow: number;\n  nameVisibilityToggle: boolean;\n  emailUnlockFeature: boolean;\n  advancedAnalytics: boolean;\n  apiAccess: boolean;\n  twoFactorAuth: boolean;\n  activityLogging: boolean;\n  sessionTimeout: number;\n  passwordPolicy: \"low\" | \"medium\" | \"high\";\n  lastUpdatedBy?: mongoose.Types.ObjectId;\n  lastUpdatedAt: Date;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\n// Activity Log Schema\nconst activityLogSchema = new mongoose.Schema(\n  {\n    userId: { type: mongoose.Schema.Types.ObjectId, ref: \"User\", required: true },\n    action: { type: String, required: true },\n    entityType: { type: String, required: true },\n    entityId: { type: String, required: true },\n    details: { type: String, required: true },\n    timestamp: { type: Date, default: Date.now },\n    ipAddress: { type: String },\n    userAgent: { type: String }\n  },\n  {\n    timestamps: true,\n  }\n);\n\nexport const ActivityLog = mongoose.model(\"ActivityLog\", activityLogSchema);\n\nexport type ActivityLogDocument = mongoose.Document & {\n  _id: mongoose.Types.ObjectId;\n  userId: mongoose.Types.ObjectId;\n  action: string;\n  entityType: string;\n  entityId: string;\n  details: string;\n  timestamp: Date;\n  ipAddress?: string;\n  userAgent?: string;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\n// Monthly Call Limits Schema - Track monthly call limits for both DMs and Sales Reps\nconst monthlyCallLimitSchema = new mongoose.Schema(\n  {\n    userId: { type: mongoose.Schema.Types.ObjectId, ref: \"User\", required: true },\n    userRole: { type: String, enum: [\"sales_rep\", \"decision_maker\"], required: true },\n    month: { type: String, required: true }, // Format: YYYY-MM\n    totalCalls: { type: Number, default: 0 }, // Total calls completed this month\n    maxCalls: { type: Number, default: 3 }, // Maximum calls allowed per month\n    remainingCalls: { type: Number, default: 3 }, // Calls remaining this month\n    lastUpdated: { type: Date, default: Date.now }\n  },\n  {\n    timestamps: true,\n  }\n);\n\n// Compound index to ensure one record per user per month\nmonthlyCallLimitSchema.index({ userId: 1, month: 1 }, { unique: true });\n\nexport const MonthlyCallLimit = mongoose.model(\"MonthlyCallLimit\", monthlyCallLimitSchema);\n\nexport type MonthlyCallLimitDocument = mongoose.Document & {\n  _id: mongoose.Types.ObjectId;\n  userId: mongoose.Types.ObjectId;\n  userRole: \"sales_rep\" | \"decision_maker\";\n  month: string;\n  totalCalls: number;\n  maxCalls: number;\n  remainingCalls: number;\n  lastUpdated: Date;\n  createdAt: Date;\n  updatedAt: Date;\n};","size_bytes":19400},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcrypt\";\nimport Stripe from \"stripe\";\nimport { storage } from \"./storage\";\nimport {\n  authenticateToken,\n  optionalAuth,\n  generateToken,\n  JWTPayload,\n} from \"./jwt-middleware\";\nimport {\n  getAuthUrl,\n  setCredentials,\n  oauth2Client,\n  getCalendarEvents,\n  createCalendarEvent,\n  getAvailableSlots,\n  updateCalendarEvent,\n  deleteCalendarEvent,\n} from \"./google-calendar\";\nimport {\n  sendDecisionMakerInvitation,\n  sendWelcomeEmail,\n  sendBookingConfirmationToRep,\n  sendBookingConfirmationToDM,\n  sendPostCallFeedbackToDM,\n  sendPostCallFeedbackToRep,\n} from \"./email-service\";\nimport {\n  insertInvitationSchema,\n  insertCallSchema,\n  salesRepPersonalInfoSchema,\n  salesRepProfessionalSchema,\n  salesRepInvitesSchema,\n  salesRepPackageSchema,\n  decisionMakerPersonalInfoSchema,\n  decisionMakerProfessionalSchema,\n  decisionMakerAvailabilitySchema,\n  decisionMakerNominationSchema,\n  decisionMakerPackageSchema,\n} from \"@shared/schema\";\n\n// Initialize Stripe\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error(\"Missing required Stripe secret: STRIPE_SECRET_KEY\");\n}\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-06-30.basil\",\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Public endpoint for subscription plans (for landing page)\n  app.get(\"/api/subscription-plans\", async (req, res) => {\n    try {\n      const plans = await storage.getAllSubscriptionPlans();\n      res.json(plans);\n    } catch (error) {\n      console.error(\"Error getting subscription plans:\", error);\n      res.status(500).json({ message: \"Failed to get subscription plans\" });\n    }\n  });\n\n  // Get current user's package limits during signup\n  app.get(\"/api/user-package-limits\", async (req, res) => {\n    try {\n      // Get user ID from session during signup\n      const userId = (req.session as any)?.signupUserId;\n      if (!userId) {\n        return res.status(400).json({ message: \"No active signup session\" });\n      }\n\n      // Get user information\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Get user's subscription plan based on packageType\n      const plans = await storage.getAllSubscriptionPlans();\n      console.log(\n        `Looking for user plan: ${user.packageType} among plans:`,\n        plans.map((p) => p.name),\n      );\n\n      const userPlan = plans.find(\n        (plan) => plan.name.toLowerCase() === user.packageType?.toLowerCase(),\n      );\n\n      if (!userPlan) {\n        console.warn(\n          `No plan found for packageType: ${user.packageType}, defaulting to free`,\n        );\n        // Default to free plan if no plan found\n        const freePlan = plans.find(\n          (plan) => plan.name.toLowerCase() === \"free\",\n        );\n        return res.json({\n          packageType: \"free\",\n          maxInvitations: freePlan?.maxInvitations || 3,\n          maxCallCredits: freePlan?.maxCallCredits || 1,\n          planName: \"Free\",\n        });\n      }\n\n      console.log(`Found user plan: ${userPlan.name} with limits:`, {\n        maxInvitations: userPlan.maxInvitations,\n        maxCallCredits: userPlan.maxCallCredits,\n      });\n\n      res.json({\n        packageType: user.packageType,\n        maxInvitations: userPlan.maxInvitations,\n        maxCallCredits: userPlan.maxCallCredits,\n        planName: userPlan.name,\n      });\n    } catch (error) {\n      console.error(\"Error getting user package limits:\", error);\n      res.status(500).json({ message: \"Failed to get package limits\" });\n    }\n  });\n\n  // Test email service endpoint\n  app.post(\"/api/test-email\", async (req, res) => {\n    try {\n      const { testEmailConnection } = await import(\"./email-service\");\n      const result = await testEmailConnection();\n      res.json(result);\n    } catch (error) {\n      console.error(\"Email service test failed:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Email service test failed\",\n        error: error.message,\n      });\n    }\n  });\n\n  // Stripe payment endpoints\n  app.post(\"/api/create-payment-intent\", async (req, res) => {\n    try {\n      const { amount, currency = \"usd\", packageType, userEmail } = req.body;\n\n      if (!amount || amount <= 0) {\n        return res.status(400).json({ message: \"Valid amount is required\" });\n      }\n\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert to cents\n        currency,\n        metadata: {\n          packageType: packageType || \"unknown\",\n          userEmail: userEmail || \"unknown\",\n        },\n      });\n\n      res.json({\n        clientSecret: paymentIntent.client_secret,\n        paymentIntentId: paymentIntent.id,\n      });\n    } catch (error: any) {\n      console.error(\"Error creating payment intent:\", error);\n      res.status(500).json({\n        message: \"Error creating payment intent: \" + error.message,\n      });\n    }\n  });\n\n  // Create subscription for recurring payments\n  app.post(\"/api/create-subscription\", async (req, res) => {\n    try {\n      const { customerEmail, customerName, priceId, packageType, userId } =\n        req.body;\n\n      if (!customerEmail || !priceId) {\n        return res.status(400).json({\n          message: \"Customer email and price ID are required\",\n        });\n      }\n\n      // Create or retrieve customer\n      let customer;\n      const existingCustomers = await stripe.customers.list({\n        email: customerEmail,\n        limit: 1,\n      });\n\n      if (existingCustomers.data.length > 0) {\n        customer = existingCustomers.data[0];\n      } else {\n        customer = await stripe.customers.create({\n          email: customerEmail,\n          name: customerName,\n          metadata: {\n            userId: userId || \"unknown\",\n            packageType: packageType || \"unknown\",\n          },\n        });\n      }\n\n      // Create subscription\n      const subscription = await stripe.subscriptions.create({\n        customer: customer.id,\n        items: [\n          {\n            price: priceId,\n          },\n        ],\n        payment_behavior: \"default_incomplete\",\n        expand: [\"latest_invoice.payment_intent\"],\n      });\n\n      res.json({\n        subscriptionId: subscription.id,\n        clientSecret:\n          subscription.latest_invoice?.payment_intent?.client_secret,\n        customerId: customer.id,\n      });\n    } catch (error: any) {\n      console.error(\"Error creating subscription:\", error);\n      res.status(500).json({\n        message: \"Error creating subscription: \" + error.message,\n      });\n    }\n  });\n\n  // Verify payment status\n  app.post(\"/api/verify-payment\", async (req, res) => {\n    try {\n      const { paymentIntentId } = req.body;\n\n      if (!paymentIntentId) {\n        return res\n          .status(400)\n          .json({ message: \"Payment intent ID is required\" });\n      }\n\n      const paymentIntent =\n        await stripe.paymentIntents.retrieve(paymentIntentId);\n\n      res.json({\n        status: paymentIntent.status,\n        succeeded: paymentIntent.status === \"succeeded\",\n        amount: paymentIntent.amount / 100, // Convert back to dollars\n        currency: paymentIntent.currency,\n        metadata: paymentIntent.metadata,\n      });\n    } catch (error: any) {\n      console.error(\"Error verifying payment:\", error);\n      res.status(500).json({\n        message: \"Error verifying payment: \" + error.message,\n      });\n    }\n  });\n\n  // Test warning email endpoint\n  app.post(\"/api/test-warning-email\", authenticateToken, async (req, res) => {\n    try {\n      const { targetEmail, reason } = req.body;\n\n      if (!targetEmail) {\n        return res.status(400).json({ message: \"Target email is required\" });\n      }\n\n      const { sendSalesRepWarningEmail } = await import(\"./email-service\");\n\n      const result = await sendSalesRepWarningEmail(\n        targetEmail,\n        \"Test\",\n        \"Admin\",\n        \"Admin User\",\n        \"System Administrator\",\n        \"Naeberly Platform\",\n        reason || \"Test warning email\",\n        new Date().toLocaleDateString(),\n        1,\n      );\n\n      res.json({\n        success: true,\n        message: \"Test warning email sent successfully\",\n        result,\n      });\n    } catch (error) {\n      console.error(\"Test warning email failed:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Test warning email failed\",\n        error: error.message,\n      });\n    }\n  });\n\n  // Validate invitation token endpoint\n  app.get(\"/api/validate-invitation/:token\", async (req, res) => {\n    try {\n      const { token } = req.params;\n\n      // Get invitation by ID (using token as invitation ID)\n      const invitation = await storage.getInvitationById(token);\n\n      if (!invitation) {\n        return res.status(404).json({\n          valid: false,\n          message: \"Invitation not found or expired\",\n        });\n      }\n\n      if (invitation.status !== \"pending\") {\n        return res.status(400).json({\n          valid: false,\n          message: \"Invitation has already been processed\",\n        });\n      }\n\n      // Get sales rep information\n      const salesRep = await storage.getUser(invitation.salesRepId);\n\n      res.json({\n        valid: true,\n        invitation: {\n          id: invitation.id,\n          decisionMakerName: invitation.decisionMakerName,\n          decisionMakerEmail: invitation.decisionMakerEmail,\n          salesRepName: salesRep\n            ? `${salesRep.firstName} ${salesRep.lastName}`\n            : \"Unknown\",\n          salesRepCompany: salesRep ? salesRep.company : \"Unknown\",\n          createdAt: invitation.createdAt,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error validating invitation:\", error);\n      res.status(500).json({\n        valid: false,\n        message: \"Failed to validate invitation\",\n      });\n    }\n  });\n\n  // Accept invitation endpoint\n  app.post(\"/api/accept-invitation/:token\", async (req, res) => {\n    try {\n      const { token } = req.params;\n\n      // Get invitation by ID\n      const invitation = await storage.getInvitationById(token);\n\n      if (!invitation || invitation.status !== \"pending\") {\n        return res.status(400).json({\n          success: false,\n          message: \"Invalid or expired invitation\",\n        });\n      }\n\n      // Update invitation status to accepted\n      const updatedInvitation = await storage.updateInvitationStatus(\n        token,\n        \"accepted\",\n      );\n\n      if (!updatedInvitation) {\n        return res.status(500).json({\n          success: false,\n          message: \"Failed to accept invitation\",\n        });\n      }\n\n      res.json({\n        success: true,\n        message: \"Invitation accepted successfully\",\n        invitation: updatedInvitation,\n      });\n    } catch (error) {\n      console.error(\"Error accepting invitation:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Failed to accept invitation\",\n      });\n    }\n  });\n\n  // Get current authenticated user\n  app.get(\"/api/current-user\", authenticateToken, async (req, res) => {\n    try {\n      console.log(\n        \"Current user check - User ID:\",\n        req.user?.userId,\n        \"Email:\",\n        req.user?.email,\n      );\n\n      const user = await storage.getUser(req.user!.userId);\n      if (!user) {\n        console.log(\"User not found in database:\", req.user?.userId);\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      // Return user data without password\n      const { password: _, ...userWithoutPassword } = user;\n      console.log(\n        \"Current user found:\",\n        userWithoutPassword.email,\n        userWithoutPassword.role,\n      );\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Current user error:\", error);\n      res.status(500).json({ message: \"Failed to get current user\" });\n    }\n  });\n\n  // Update current user profile\n  app.put(\"/api/current-user\", authenticateToken, async (req, res) => {\n    try {\n      const userId = req.user!.userId;\n      const updates = req.body;\n\n      console.log(\n        \"Profile update request for user:\",\n        userId,\n        \"Updates:\",\n        updates,\n      );\n\n      // Get current user state before update to check for calendar disconnection\n      const currentUser = await storage.getUserById(userId);\n      if (!currentUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Check if this is a calendar disconnection\n      const wasConnected = currentUser.calendarIntegrationEnabled;\n      const willBeConnected = !!updates.calendarIntegrationEnabled;\n      const isDisconnecting = wasConnected && !willBeConnected;\n\n      console.log(`Calendar status change for user ${userId}:`, {\n        wasConnected,\n        willBeConnected,\n        isDisconnecting,\n        userRole: currentUser.role,\n        invitedBy: currentUser.invitedBy,\n      });\n\n      // Remove sensitive fields that shouldn't be updated via this endpoint\n      delete updates.password;\n      delete updates.role;\n      delete updates._id;\n      delete updates.id;\n      delete updates.createdAt;\n      delete updates.__v;\n\n      // Handle calendar disconnection flagging for DMs with inviting reps\n      if (currentUser.role === \"decision_maker\" && currentUser.invitedBy && isDisconnecting) {\n        console.log(\n          `DM ${currentUser.email} disconnecting calendar via profile update, flagging referring sales rep ${currentUser.invitedBy}`,\n        );\n\n        try {\n          await handleCalendarDisconnectionFlag(\n            currentUser.invitedBy,\n            userId,\n            currentUser,\n          );\n          console.log(\n            `✅ Sales rep ${currentUser.invitedBy} flagged for DM calendar disconnection via profile update`,\n          );\n        } catch (flagError) {\n          console.error(\n            \"Error handling calendar disconnection flag via profile update:\",\n            flagError,\n          );\n          // Continue with the update even if flagging fails\n        }\n      }\n\n      const updatedUser = await storage.updateUser(userId, {\n        ...updates,\n        updatedAt: new Date(),\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Return user data without password\n      const { password: _, ...userWithoutPassword } = updatedUser;\n      console.log(\"Profile updated successfully for user:\", userId);\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error updating user profile:\", error);\n      res\n        .status(500)\n        .json({ message: \"Failed to update profile\", error: error.message });\n    }\n  });\n\n  // Get invitations for current user\n  app.get(\"/api/invitations\", authenticateToken, async (req, res) => {\n    try {\n      const invitations = await storage.getInvitationsByUserId(\n        req.user!.userId,\n      );\n      res.json(invitations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch invitations\" });\n    }\n  });\n\n  // Create new invitation\n  app.post(\"/api/invitations\", authenticateToken, async (req, res) => {\n    try {\n      const validatedData = insertInvitationSchema.parse({\n        ...req.body,\n        salesRepId: req.user!.userId,\n      });\n\n      const invitation = await storage.createInvitation(validatedData);\n      res.status(201).json(invitation);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid invitation data\" });\n    }\n  });\n\n  // Validate invite token and get invitation details\n  app.get(\"/api/invitations/validate/:token\", async (req, res) => {\n    try {\n      const { token } = req.params;\n\n      // For this demo, the token is the invitation ID\n      // In production, you'd use a secure token with expiration\n      const invitation = await storage.getInvitationById(token);\n      if (!invitation) {\n        return res.status(404).json({\n          valid: false,\n          message: \"Invalid or expired invitation link\",\n        });\n      }\n\n      if (invitation.status !== \"pending\") {\n        return res.status(400).json({\n          valid: false,\n          message:\n            invitation.status === \"accepted\"\n              ? \"This invitation has already been accepted\"\n              : \"This invitation has been declined\",\n        });\n      }\n\n      // Get sales rep details\n      const salesRep = await storage.getUserById(invitation.salesRepId);\n\n      res.json({\n        valid: true,\n        invitation: {\n          id: invitation._id,\n          salesRepId: invitation.salesRepId,\n          decisionMakerName: invitation.decisionMakerName,\n          decisionMakerEmail: invitation.decisionMakerEmail,\n          salesRepName: salesRep\n            ? `${salesRep.firstName} ${salesRep.lastName}`\n            : \"Sales Representative\",\n          salesRepEmail: salesRep?.email || \"\",\n          salesRepCompany: salesRep?.company || \"Company\",\n          createdAt: invitation.createdAt,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error validating invitation token:\", error);\n      res.status(500).json({\n        valid: false,\n        message: \"Failed to validate invitation\",\n      });\n    }\n  });\n\n  // Update invitation status\n  app.patch(\"/api/invitations/:id/status\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n\n      const invitation = await storage.updateInvitationStatus(id, status);\n      if (!invitation) {\n        return res.status(404).json({ message: \"Invitation not found\" });\n      }\n\n      res.json(invitation);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update invitation\" });\n    }\n  });\n\n  // Get calls for current user\n  app.get(\"/api/calls\", async (req, res) => {\n    try {\n      // For demo purposes, get calls for user ID 1 or 2\n      const userId = req.query.userId ? (req.query.userId as string) : \"1\";\n      const calls = await storage.getCallsByUserId(userId);\n      res.json(calls);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch calls\" });\n    }\n  });\n\n  // Create new call\n  app.post(\"/api/calls\", async (req, res) => {\n    try {\n      const validatedData = insertCallSchema.parse(req.body);\n\n      // Check monthly call limits for both sales rep and decision maker\n      const salesRepId = validatedData.salesRepId;\n      const decisionMakerId = validatedData.decisionMakerId;\n\n      // Validate sales rep can book calls\n      const repCanBook = await storage.canUserBookCall(salesRepId, \"sales_rep\");\n      if (!repCanBook.canBook) {\n        return res.status(429).json({\n          message: `Sales rep has reached monthly call limit: ${repCanBook.message}`,\n          limitType: \"sales_rep\",\n        });\n      }\n\n      // Validate decision maker can book calls\n      const dmCanBook = await storage.canUserBookCall(\n        decisionMakerId,\n        \"decision_maker\",\n      );\n      if (!dmCanBook.canBook) {\n        return res.status(429).json({\n          message: `Decision maker has reached monthly call limit: ${dmCanBook.message}`,\n          limitType: \"decision_maker\",\n        });\n      }\n\n      // Create the call if both users have remaining call slots\n      const call = await storage.createCall(validatedData);\n      res.status(201).json(call);\n    } catch (error) {\n      console.error(\"Create call error:\", error);\n      res.status(400).json({ message: \"Invalid call data\" });\n    }\n  });\n\n  // Update call\n  app.patch(\"/api/calls/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n\n      const call = await storage.updateCall(id, updates);\n      if (!call) {\n        return res.status(404).json({ message: \"Call not found\" });\n      }\n\n      res.json(call);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update call\" });\n    }\n  });\n\n  // Sales Rep Signup API Routes\n\n  // LinkedIn verification endpoint\n  app.post(\"/api/verify-linkedin\", async (req, res) => {\n    try {\n      const { linkedinUrl } = req.body;\n\n      console.log(\"LinkedIn verification request:\", { linkedinUrl });\n\n      if (!linkedinUrl) {\n        return res.status(400).json({\n          verified: false,\n          message: \"LinkedIn URL is required\",\n        });\n      }\n\n      if (!linkedinUrl.includes(\"linkedin.com\")) {\n        return res.status(400).json({\n          verified: false,\n          message: \"Invalid LinkedIn URL - must be a LinkedIn profile\",\n        });\n      }\n\n      // Enhanced LinkedIn URL validation\n      const urlPattern =\n        /^https?:\\/\\/(www\\.)?linkedin\\.com\\/in\\/[a-zA-Z0-9-._]+\\/?(\\?.*)?$/;\n      if (!urlPattern.test(linkedinUrl)) {\n        return res.status(400).json({\n          verified: false,\n          message:\n            \"Please provide a valid LinkedIn profile URL (e.g., https://linkedin.com/in/your-profile)\",\n        });\n      }\n\n      // Additional checks for common LinkedIn URL formats\n      const cleanUrl = linkedinUrl.toLowerCase().trim();\n\n      // Check for valid LinkedIn profile path\n      if (!cleanUrl.includes(\"/in/\")) {\n        return res.status(400).json({\n          verified: false,\n          message: \"LinkedIn URL must be a profile link (containing '/in/')\",\n        });\n      }\n\n      // Extract profile identifier\n      const profileMatch = cleanUrl.match(/\\/in\\/([a-zA-Z0-9-._]+)/);\n      if (!profileMatch || profileMatch[1].length < 3) {\n        return res.status(400).json({\n          verified: false,\n          message: \"LinkedIn profile identifier is too short or invalid\",\n        });\n      }\n\n      console.log(\"LinkedIn verification successful for:\", profileMatch[1]);\n\n      // Verification successful\n      res.json({\n        verified: true,\n        message: \"LinkedIn profile verified successfully\",\n        profileId: profileMatch[1],\n      });\n    } catch (error) {\n      console.error(\"LinkedIn verification error:\", error);\n      res.status(500).json({\n        verified: false,\n        message: \"LinkedIn verification failed due to server error\",\n      });\n    }\n  });\n\n  // Save personal information\n  app.post(\"/api/sales-rep/personal-info\", async (req, res) => {\n    try {\n      console.log(\"Received signup request:\", req.body);\n      const validatedData = salesRepPersonalInfoSchema.parse(req.body);\n      console.log(\"Validated data:\", validatedData);\n\n      // Check if email already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        console.log(\"Email already exists:\", validatedData.email);\n        return res\n          .status(400)\n          .json({ message: \"Email address is already registered\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(validatedData.password, 10);\n\n      // Save user data temporarily in session or create incomplete user record\n      const userData = {\n        email: validatedData.email,\n        password: hashedPassword,\n        role: \"sales_rep\",\n        firstName: validatedData.firstName,\n        lastName: validatedData.lastName,\n        linkedinUrl: validatedData.linkedinUrl,\n        linkedinVerified: req.body.linkedinVerified || false,\n        companyDomain: validatedData.companyDomain,\n        calendarIntegrationEnabled: false, // Default: calendar disconnected for new DMs\n        isActive: false, // Mark as inactive until signup is complete\n      };\n\n      console.log(\"Creating user with data:\", userData);\n      const user = await storage.createUser(userData);\n      console.log(\"User created successfully:\", user.id);\n\n      // Store user ID in session for multi-step process\n      (req.session as any).signupUserId = user.id;\n\n      res.json({\n        success: true,\n        message: \"Personal information saved\",\n        userId: user.id,\n      });\n    } catch (error: any) {\n      console.error(\"Signup error:\", error);\n      if (error.name === \"ZodError\") {\n        return res\n          .status(400)\n          .json({ message: \"Validation failed\", errors: error.errors });\n      }\n      res.status(500).json({\n        message: \"Failed to save personal information\",\n        error: error.message,\n      });\n    }\n  });\n\n  // Save professional background\n  app.post(\"/api/sales-rep/professional-info\", async (req, res) => {\n    try {\n      const validatedData = salesRepProfessionalSchema.parse(req.body);\n\n      // Get user ID from session\n      const userId = (req.session as any)?.signupUserId;\n      if (!userId) {\n        return res\n          .status(400)\n          .json({ message: \"Please complete personal information first\" });\n      }\n\n      // Update user with professional information\n      const updatedUser = await storage.updateUser(userId, {\n        jobTitle: validatedData.jobTitle,\n        company: validatedData.company,\n        industry: validatedData.industry,\n        companySize: validatedData.companySize,\n        yearsInRole: validatedData.yearsInRole,\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Don't clear session yet - user still needs to complete invites step\n      // Session will be cleared after invites are completed\n\n      res.json({\n        success: true,\n        message: \"Professional information saved successfully!\",\n      });\n    } catch (error: any) {\n      if (error.name === \"ZodError\") {\n        return res\n          .status(400)\n          .json({ message: \"Validation failed\", errors: error.errors });\n      }\n      res\n        .status(500)\n        .json({ message: \"Failed to save professional information\" });\n    }\n  });\n\n  // Save decision maker invitations\n  app.post(\"/api/sales-rep/invites\", async (req, res) => {\n    try {\n      const validatedData = salesRepInvitesSchema.parse(req.body);\n\n      // Get user ID from session\n      console.log(\"Sales rep invites - Session data:\", req.session);\n      console.log(\"Sales rep invites - Session ID:\", req.sessionID);\n      let userId = (req.session as any)?.signupUserId;\n      console.log(\"Sales rep invites - UserId from session:\", userId);\n\n      // If no session, try to find recently created sales rep as fallback\n      if (!userId) {\n        console.log(\"No session found, looking for recently created sales rep\");\n        const recentUsers = await storage.getRecentInactiveSalesReps(5); // Get last 5 inactive sales reps\n        console.log(\"Found recent inactive users:\", recentUsers?.length || 0);\n        if (recentUsers && recentUsers.length > 0) {\n          console.log(\n            \"Recent inactive users:\",\n            recentUsers.map((u) => ({\n              id: u.id,\n              email: u.email,\n              jobTitle: u.jobTitle,\n            })),\n          );\n        }\n\n        if (recentUsers && recentUsers.length > 0) {\n          // Use the most recent one that has professional info but no invitations sent yet\n          for (const user of recentUsers) {\n            // Check if user has professional info but no invitations\n            const invitations = await storage.getInvitationsByRep(user.id);\n            console.log(\n              `User ${user.id} has ${invitations.length} invitations`,\n            );\n\n            if (user.jobTitle && invitations.length === 0) {\n              userId = user.id;\n              console.log(\"Found recent sales rep needing invites:\", userId);\n              // Restore session for this user\n              (req.session as any).signupUserId = userId;\n              break;\n            }\n          }\n        }\n\n        // If still no user found, also check active users in case they were activated\n        if (!userId) {\n          console.log(\"Checking recently active sales reps too\");\n          const activeSalesReps = await storage.getUsersByRole(\"sales_rep\");\n          const recentActiveSalesReps = activeSalesReps.slice(0, 5);\n          console.log(\n            \"Found active sales reps:\",\n            recentActiveSalesReps?.length || 0,\n          );\n          if (recentActiveSalesReps && recentActiveSalesReps.length > 0) {\n            console.log(\n              \"Recent active users:\",\n              recentActiveSalesReps.map((u) => ({\n                id: u.id,\n                email: u.email,\n                jobTitle: u.jobTitle,\n                isActive: u.isActive,\n              })),\n            );\n          }\n\n          for (const user of recentActiveSalesReps) {\n            const invitations = await storage.getInvitationsByRep(user.id);\n            console.log(\n              `Active user ${user.id} has ${invitations.length} invitations`,\n            );\n\n            if (user.jobTitle && invitations.length === 0) {\n              userId = user.id;\n              console.log(\n                \"Found recent active sales rep needing invites:\",\n                userId,\n              );\n              (req.session as any).signupUserId = userId;\n              break;\n            }\n          }\n        }\n      }\n\n      if (!userId) {\n        return res.status(400).json({\n          message: \"Session expired. Please refresh the page and try again.\",\n          code: \"SESSION_EXPIRED\",\n          suggestion:\n            \"Your registration is almost complete. Please refresh the page to continue.\",\n        });\n      }\n\n      // Get sales rep information for email\n      const salesRep = await storage.getUser(userId);\n      if (!salesRep) {\n        return res.status(404).json({ message: \"Sales rep not found\" });\n      }\n\n      // Get user's plan limits and validate\n      const plans = await storage.getAllSubscriptionPlans();\n      const userPlan = plans.find(\n        (plan) =>\n          plan.name.toLowerCase() === salesRep.packageType?.toLowerCase(),\n      );\n\n      const maxInvitations = userPlan?.maxInvitations || 3; // Default to free plan\n\n      // Validate number of decision makers against plan limits\n      const validDecisionMakers =\n        validatedData.decisionMakers?.filter((dm) => dm.name && dm.email) || [];\n      if (validDecisionMakers.length > maxInvitations) {\n        return res.status(400).json({\n          message: `Your ${userPlan?.name || \"Free\"} plan allows up to ${maxInvitations} invitations only.`,\n          limit: maxInvitations,\n          planName: userPlan?.name || \"Free\",\n        });\n      }\n\n      // Check existing invitations to prevent exceeding monthly limits\n      const existingInvitations = await storage.getInvitationsByRep(userId);\n      if (\n        existingInvitations.length + validDecisionMakers.length >\n        maxInvitations\n      ) {\n        return res.status(400).json({\n          message: `Adding ${validDecisionMakers.length} more invitations would exceed your plan limit of ${maxInvitations}.`,\n          existing: existingInvitations.length,\n          limit: maxInvitations,\n          planName: userPlan?.name || \"Free\",\n        });\n      }\n\n      // Create invitations for each decision maker\n      const invitations = [];\n      const emailResults = [];\n\n      if (validatedData.decisionMakers) {\n        for (const dm of validatedData.decisionMakers) {\n          if (dm.name && dm.email) {\n            const invitation = await storage.createInvitation({\n              salesRepId: userId,\n              decisionMakerEmail: dm.email,\n              decisionMakerName: dm.name,\n              status: \"pending\",\n            });\n            invitations.push(invitation);\n\n            // Send invitation email\n            try {\n              const emailResult = await sendDecisionMakerInvitation(\n                dm.email,\n                dm.name,\n                `${salesRep.firstName} ${salesRep.lastName}`,\n                invitation.id.toString(), // Using invitation ID as token\n              );\n              emailResults.push({\n                email: dm.email,\n                sent: true,\n                messageId: emailResult.messageId,\n              });\n              console.log(`Invitation email sent to ${dm.email}`);\n            } catch (emailError) {\n              console.error(\n                `Failed to send invitation email to ${dm.email}:`,\n                emailError,\n              );\n              emailResults.push({\n                email: dm.email,\n                sent: false,\n                error: emailError.message,\n              });\n            }\n          }\n        }\n      }\n\n      // Clear signup session now that signup is fully completed\n      delete (req.session as any).signupUserId;\n\n      res.json({\n        success: true,\n        message: \"Registration completed successfully! Invitations sent.\",\n        invitations,\n        emailResults,\n      });\n    } catch (error: any) {\n      if (error.name === \"ZodError\") {\n        return res\n          .status(400)\n          .json({ message: \"Validation failed\", errors: error.errors });\n      }\n      console.error(\"Error saving invitations:\", error);\n      res.status(500).json({ message: \"Failed to save invitations\" });\n    }\n  });\n\n  // Complete signup with package selection\n  app.post(\"/api/sales-rep/package\", async (req, res) => {\n    try {\n      const validatedData = salesRepPackageSchema.parse(req.body);\n\n      // Get user ID from session\n      const userId = (req.session as any)?.signupUserId;\n      if (!userId) {\n        return res\n          .status(400)\n          .json({ message: \"Please complete previous steps first\" });\n      }\n\n      // Fetch the subscription plan to get the enum value\n      const subscriptionPlan = await storage.getSubscriptionPlan(\n        validatedData.packageType,\n      );\n      if (!subscriptionPlan) {\n        return res.status(400).json({ message: \"Invalid package selection\" });\n      }\n\n      // Map plan name to enum value - use the actual plan name as enum value\n      let enumValue = subscriptionPlan.name.toLowerCase(); // Use the actual plan name\n\n      // Validate against known enum values and provide fallback\n      const validEnumValues = [\n        \"free\",\n        \"basic\",\n        \"pro\",\n        \"premium\",\n        \"enterprise\",\n        \"pro-team\",\n      ];\n      if (!validEnumValues.includes(enumValue)) {\n        console.warn(\n          `Unknown plan name: ${subscriptionPlan.name}, defaulting to free`,\n        );\n        enumValue = \"free\";\n      }\n\n      console.log(\n        `Mapping plan \"${subscriptionPlan.name}\" to enum value \"${enumValue}\"`,\n      );\n\n      // Update user with package selection and activate account\n      const updatedUser = await storage.updateUser(userId, {\n        packageType: enumValue, // Use enum value for database\n        isActive: true,\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Send welcome email\n      try {\n        await sendWelcomeEmail(\n          updatedUser.email,\n          `${updatedUser.firstName} ${updatedUser.lastName}`,\n          updatedUser.role,\n        );\n        console.log(`Welcome email sent to ${updatedUser.email}`);\n      } catch (emailError) {\n        console.error(\n          `Failed to send welcome email to ${updatedUser.email}:`,\n          emailError,\n        );\n        // Don't fail the signup if email fails\n      }\n\n      // Don't clear signup session yet - user still needs to complete professional info\n      // Session will be cleared after professional info is completed\n\n      res.json({\n        success: true,\n        message: \"Package selection saved successfully\",\n        user: updatedUser,\n      });\n    } catch (error: any) {\n      if (error.name === \"ZodError\") {\n        return res\n          .status(400)\n          .json({ message: \"Validation failed\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to complete signup\" });\n    }\n  });\n\n  // ===== SUPER ADMIN ROUTES =====\n\n  // Create Super Admin (development only)\n  app.post(\"/api/create-super-admin\", async (req, res) => {\n    try {\n      const email = \"superadmin@naeborly.com\";\n      const password = \"SuperAdmin123!\";\n\n      // Check if super admin already exists\n      const existingAdmin = await storage.getUserByEmail(email);\n      if (existingAdmin) {\n        return res.json({ message: \"Super admin already exists\", email });\n      }\n\n      // Create super admin user\n      const superAdmin = await storage.createUser({\n        email,\n        password, // Will be hashed in storage\n        role: \"super_admin\",\n        firstName: \"Super\",\n        lastName: \"Admin\",\n        isActive: true,\n        packageType: \"premium\",\n        standing: \"excellent\",\n      });\n\n      res.json({\n        success: true,\n        message: \"Super admin created successfully\",\n        email,\n        temporaryPassword: password,\n      });\n    } catch (error) {\n      console.error(\"Error creating super admin:\", error);\n      res.status(500).json({ message: \"Failed to create super admin\" });\n    }\n  });\n\n  // Super Admin Authentication\n  app.post(\"/api/super-admin/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      console.log(\"Super admin login attempt:\", { email, password: \"***\" });\n\n      const user = await storage.getUserByEmail(email);\n      if (!user || user.role !== \"super_admin\") {\n        console.log(\"Super admin not found or wrong role:\", user?.role);\n        return res\n          .status(401)\n          .json({ message: \"Invalid super admin credentials\" });\n      }\n\n      // Verify password\n      const isValidPassword = await bcrypt.compare(password, user.password);\n\n      if (!isValidPassword) {\n        console.log(\"Invalid super admin password\");\n        return res\n          .status(401)\n          .json({ message: \"Invalid super admin credentials\" });\n      }\n\n      // Set session with proper save\n      req.session.userId = user.id;\n      req.session.userRole = user.role;\n      req.session.isAuthenticated = true;\n\n      req.session.save((err) => {\n        if (err) {\n          console.error(\"Super admin session save error:\", err);\n          return res.status(500).json({ message: \"Session creation failed\" });\n        }\n\n        console.log(\n          \"Super admin login successful:\",\n          email,\n          \"Session ID:\",\n          req.sessionID,\n        );\n        res.json({\n          success: true,\n          message: \"Super admin login successful\",\n          user: {\n            id: user.id,\n            email: user.email,\n            role: user.role,\n            firstName: user.firstName,\n            lastName: user.lastName,\n          },\n          sessionId: req.sessionID,\n        });\n      });\n    } catch (error) {\n      console.error(\"Super admin login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // JWT Authentication middleware (already defined above)\n  // const requireAuthentication = authenticateToken;\n\n  // Super Admin middleware\n  const requireSuperAdmin = (req: any, res: any, next: any) => {\n    // First authenticate the token\n    authenticateToken(req, res, (err) => {\n      if (err) return;\n\n      const userRole = req.user?.role;\n\n      if (userRole !== \"super_admin\") {\n        return res.status(403).json({ message: \"Super admin access required\" });\n      }\n\n      next();\n    });\n  };\n\n  // Enterprise Admin middleware\n  const requireEnterpriseAdmin = async (req: any, res: any, next: any) => {\n    // First authenticate the token\n    authenticateToken(req, res, async (err) => {\n      if (err) return;\n\n      const userId = req.user?.userId;\n      const userRole = req.user?.role;\n\n      if (!userId || userRole !== \"enterprise_admin\") {\n        return res\n          .status(403)\n          .json({ message: \"Enterprise admin access required\" });\n      }\n\n      // Verify domain access\n      try {\n        const user = await storage.getUser(userId);\n        if (!user?.companyDomain || !user?.domainVerified) {\n          return res.status(403).json({\n            message: \"Domain verification required for enterprise access\",\n          });\n        }\n\n        // Add user info to request for use in handlers\n        req.enterpriseUser = user;\n        next();\n      } catch (error) {\n        return res\n          .status(500)\n          .json({ message: \"Failed to verify enterprise access\" });\n      }\n    });\n  };\n\n  // User Management Routes\n  app.get(\"/api/super-admin/users\", requireSuperAdmin, async (req, res) => {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 100; // Show more users by default for super admin\n      const role = req.query.role as string;\n      const search = req.query.search as string;\n\n      let filters: any = {};\n      if (role) filters.role = role;\n      if (search) {\n        filters.$or = [\n          { firstName: { $regex: search, $options: \"i\" } },\n          { lastName: { $regex: search, $options: \"i\" } },\n          { email: { $regex: search, $options: \"i\" } },\n        ];\n      }\n\n      const result = await storage.getUsersWithPagination(page, limit, filters);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error getting users:\", error);\n      res.status(500).json({ message: \"Failed to get users\" });\n    }\n  });\n\n  app.put(\"/api/super-admin/users/:id\", requireSuperAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n\n      // Log activity\n      await storage.createActivityLog({\n        userId: req.user!.userId,\n        action: \"UPDATE_USER\",\n        entityType: \"user\",\n        entityId: id,\n        details: `Updated user: ${JSON.stringify(updates)}`,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      const updatedUser = await storage.updateUser(id, updates);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ success: true, user: updatedUser });\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.delete(\n    \"/api/super-admin/users/:id\",\n    requireSuperAdmin,\n    async (req, res) => {\n      try {\n        const { id } = req.params;\n\n        // Log activity\n        await storage.createActivityLog({\n          userId: req.user!.userId,\n          action: \"DELETE_USER\",\n          entityType: \"user\",\n          entityId: id,\n          details: `Deleted user with ID: ${id}`,\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n        });\n\n        const deleted = await storage.deleteUser(id);\n        if (!deleted) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        res.json({ success: true, message: \"User deleted successfully\" });\n      } catch (error) {\n        console.error(\"Error deleting user:\", error);\n        res.status(500).json({ message: \"Failed to delete user\" });\n      }\n    },\n  );\n\n  // Suspend user endpoint\n  app.post(\n    \"/api/super-admin/users/:id/suspend\",\n    requireSuperAdmin,\n    async (req, res) => {\n      try {\n        const { id } = req.params;\n        const { reason, suspendedBy } = req.body;\n\n        // Update user status to suspended\n        const updatedUser = await storage.updateUser(id, {\n          standing: \"suspended\",\n          isActive: false,\n          suspensionReason: reason,\n          suspendedAt: new Date(),\n          suspendedBy,\n        });\n\n        if (!updatedUser) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        // Create suspension record with proper schema fields\n        const suspensionStartDate = new Date();\n        const suspensionEndDate = new Date();\n        suspensionEndDate.setDate(suspensionEndDate.getDate() + 30); // Default 30-day suspension\n\n        await storage.createRepSuspension({\n          repId: id,\n          type: \"30-day\",\n          startDate: suspensionStartDate,\n          endDate: suspensionEndDate,\n          isActive: true,\n          suspensionReason: reason,\n          triggeringFlags: [],\n        });\n\n        // Log activity\n        await storage.createActivityLog({\n          userId: req.user!.userId,\n          action: \"SUSPEND_USER\",\n          entityType: \"user\",\n          entityId: id,\n          details: `Suspended user: ${reason}`,\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n        });\n\n        res.json({ success: true, message: \"User suspended successfully\" });\n      } catch (error) {\n        console.error(\"Error suspending user:\", error);\n        res.status(500).json({ message: \"Failed to suspend user\" });\n      }\n    },\n  );\n\n  // Reinstate user endpoint\n  app.post(\n    \"/api/super-admin/users/:id/reinstate\",\n    requireSuperAdmin,\n    async (req, res) => {\n      try {\n        const { id } = req.params;\n\n        // Update user status to active\n        const updatedUser = await storage.updateUser(id, {\n          standing: \"good\",\n          isActive: true,\n          suspensionReason: undefined,\n          suspendedAt: undefined,\n          suspendedBy: undefined,\n          reinstatedAt: new Date(),\n          reinstatedBy: req.user!.userId,\n        });\n\n        if (!updatedUser) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        // Deactivate any active suspension records\n        try {\n          await storage.liftRepSuspension(\n            id,\n            req.user!.userId,\n            \"Admin reinstatement\",\n          );\n        } catch (suspensionError) {\n          console.log(\n            \"No suspension record found to lift, continuing with reinstatement\",\n          );\n        }\n\n        // Log activity\n        await storage.createActivityLog({\n          userId: req.user!.userId,\n          action: \"REINSTATE_USER\",\n          entityType: \"user\",\n          entityId: id,\n          details: `Reinstated user account`,\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n        });\n\n        res.json({ success: true, message: \"User reinstated successfully\" });\n      } catch (error) {\n        console.error(\"Error reinstating user:\", error);\n        res.status(500).json({ message: \"Failed to reinstate user\" });\n      }\n    },\n  );\n\n  // Manage user credits endpoint\n  app.post(\n    \"/api/super-admin/users/:id/credits\",\n    requireSuperAdmin,\n    async (req, res) => {\n      try {\n        const { id } = req.params;\n        const { amount, notes } = req.body;\n\n        const user = await storage.getUser(id);\n        if (!user) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        // Update user credits (this would depend on your credit system implementation)\n        // For now, we'll just log the activity\n        await storage.createActivityLog({\n          userId: req.user!.userId,\n          action: \"MANAGE_CREDITS\",\n          entityType: \"user\",\n          entityId: id,\n          details: `Credit adjustment: ${amount} credits. Notes: ${notes || \"No notes\"}`,\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n        });\n\n        res.json({ success: true, message: \"Credits updated successfully\" });\n      } catch (error) {\n        console.error(\"Error managing credits:\", error);\n        res.status(500).json({ message: \"Failed to manage credits\" });\n      }\n    },\n  );\n\n  // Send message to user endpoint\n  app.post(\n    \"/api/super-admin/users/:id/message\",\n    requireSuperAdmin,\n    async (req, res) => {\n      try {\n        const { id } = req.params;\n        const { subject, message } = req.body;\n\n        const user = await storage.getUser(id);\n        if (!user) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        // Log the message activity\n        await storage.createActivityLog({\n          userId: req.user!.userId,\n          action: \"SEND_MESSAGE\",\n          entityType: \"user\",\n          entityId: id,\n          details: `Message sent - Subject: ${subject}. Message: ${message}`,\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n        });\n\n        res.json({ success: true, message: \"Message sent successfully\" });\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n        res.status(500).json({ message: \"Failed to send message\" });\n      }\n    },\n  );\n\n  // Subscription Plan Management Routes\n  app.get(\n    \"/api/super-admin/subscription-plans\",\n    requireSuperAdmin,\n    async (req, res) => {\n      try {\n        const plans = await storage.getAllSubscriptionPlans();\n        res.json(plans);\n      } catch (error) {\n        console.error(\"Error getting subscription plans:\", error);\n        res.status(500).json({ message: \"Failed to get subscription plans\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/super-admin/subscription-plans\",\n    requireSuperAdmin,\n    async (req, res) => {\n      try {\n        const planData = req.body;\n\n        // Log activity\n        await storage.createActivityLog({\n          userId: req.user!.userId,\n          action: \"CREATE_SUBSCRIPTION_PLAN\",\n          entityType: \"subscription_plan\",\n          details: `Created plan: ${planData.name}`,\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n        });\n\n        const plan = await storage.createSubscriptionPlan(planData);\n        res.json({ success: true, plan });\n      } catch (error) {\n        console.error(\"Error creating subscription plan:\", error);\n        res.status(500).json({ message: \"Failed to create subscription plan\" });\n      }\n    },\n  );\n\n  app.put(\n    \"/api/super-admin/subscription-plans/:id\",\n    requireSuperAdmin,\n    async (req, res) => {\n      try {\n        const { id } = req.params;\n        const updates = req.body;\n\n        // Log activity\n        await storage.createActivityLog({\n          userId: req.user!.userId,\n          action: \"UPDATE_SUBSCRIPTION_PLAN\",\n          entityType: \"subscription_plan\",\n          entityId: id,\n          details: `Updated plan: ${JSON.stringify(updates)}`,\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n        });\n\n        const plan = await storage.updateSubscriptionPlan(id, updates);\n        if (!plan) {\n          return res\n            .status(404)\n            .json({ message: \"Subscription plan not found\" });\n        }\n\n        res.json({ success: true, plan });\n      } catch (error) {\n        console.error(\"Error updating subscription plan:\", error);\n        res.status(500).json({ message: \"Failed to update subscription plan\" });\n      }\n    },\n  );\n\n  app.delete(\n    \"/api/super-admin/subscription-plans/:id\",\n    requireSuperAdmin,\n    async (req, res) => {\n      try {\n        const { id } = req.params;\n\n        // Log activity\n        await storage.createActivityLog({\n          userId: req.user!.userId,\n          action: \"DELETE_SUBSCRIPTION_PLAN\",\n          entityType: \"subscription_plan\",\n          entityId: id,\n          details: `Deleted plan with ID: ${id}`,\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n        });\n\n        const deleted = await storage.deleteSubscriptionPlan(id);\n        if (!deleted) {\n          return res\n            .status(404)\n            .json({ message: \"Subscription plan not found\" });\n        }\n\n        res.json({\n          success: true,\n          message: \"Subscription plan deleted successfully\",\n        });\n      } catch (error) {\n        console.error(\"Error deleting subscription plan:\", error);\n        res.status(500).json({ message: \"Failed to delete subscription plan\" });\n      }\n    },\n  );\n\n  // Analytics Routes\n  app.get(\n    \"/api/super-admin/analytics/users\",\n    requireSuperAdmin,\n    async (req, res) => {\n      try {\n        const analytics = await storage.getUserAnalytics();\n        res.json(analytics);\n      } catch (error) {\n        console.error(\"Error getting user analytics:\", error);\n        res.status(500).json({ message: \"Failed to get user analytics\" });\n      }\n    },\n  );\n\n  app.get(\n    \"/api/super-admin/analytics/calls\",\n    requireSuperAdmin,\n    async (req, res) => {\n      try {\n        const analytics = await storage.getCallAnalytics();\n        res.json(analytics);\n      } catch (error) {\n        console.error(\"Error getting call analytics:\", error);\n        res.status(500).json({ message: \"Failed to get call analytics\" });\n      }\n    },\n  );\n\n  app.get(\n    \"/api/super-admin/analytics/subscriptions\",\n    requireSuperAdmin,\n    async (req, res) => {\n      try {\n        const analytics = await storage.getSubscriptionAnalytics();\n        res.json(analytics);\n      } catch (error) {\n        console.error(\"Error getting subscription analytics:\", error);\n        res\n          .status(500)\n          .json({ message: \"Failed to get subscription analytics\" });\n      }\n    },\n  );\n\n  app.get(\n    \"/api/super-admin/activity-logs\",\n    requireSuperAdmin,\n    async (req, res) => {\n      try {\n        const page = parseInt(req.query.page as string) || 1;\n        const limit = parseInt(req.query.limit as string) || 50;\n        const filters = {\n          search: req.query.search as string,\n          action: req.query.action as string,\n          entityType: req.query.entityType as string,\n        };\n\n        const result = await storage.getActivityLogs(page, limit, filters);\n        res.json(result);\n      } catch (error) {\n        console.error(\"Error getting activity logs:\", error);\n        res.status(500).json({ message: \"Failed to get activity logs\" });\n      }\n    },\n  );\n\n  // Platform Settings Routes\n  app.get(\n    \"/api/super-admin/platform-settings\",\n    requireSuperAdmin,\n    async (req, res) => {\n      try {\n        const settings = await storage.getPlatformSettings();\n        res.json(settings);\n      } catch (error) {\n        console.error(\"Error getting platform settings:\", error);\n        res.status(500).json({ message: \"Failed to get platform settings\" });\n      }\n    },\n  );\n\n  app.put(\n    \"/api/super-admin/platform-settings\",\n    requireSuperAdmin,\n    async (req, res) => {\n      try {\n        const updates = req.body;\n        const userId = req.user!.userId;\n\n        const updatedSettings = await storage.updatePlatformSettings(\n          updates,\n          userId,\n        );\n\n        // Log activity\n        await storage.createActivityLog({\n          userId: userId,\n          action: \"UPDATE_PLATFORM_SETTINGS\",\n          entityType: \"platform_settings\",\n          details: `Updated platform settings: ${Object.keys(updates).join(\", \")}`,\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n        });\n\n        res.json(updatedSettings);\n      } catch (error) {\n        console.error(\"Error updating platform settings:\", error);\n        res.status(500).json({ message: \"Failed to update platform settings\" });\n      }\n    },\n  );\n\n  // ===== GOOGLE CALENDAR INTEGRATION ROUTES =====\n\n  // Initiate Google Calendar OAuth (direct redirect) - accepts userId as query param\n  app.get(\"/api/auth/google\", async (req, res) => {\n    const { userId } = req.query;\n\n    // Check if userId is provided\n    if (!userId) {\n      return res.status(400).json({ message: \"User ID required\" });\n    }\n\n    // Check if Google credentials are available\n    if (!process.env.GOOGLE_CLIENT_ID || !process.env.GOOGLE_CLIENT_SECRET) {\n      return res.status(500).json({\n        message:\n          \"Google Calendar integration not configured. Please contact administrator.\",\n      });\n    }\n\n    try {\n      const authUrl = getAuthUrl(userId as string);\n      console.log(\"Redirecting to Google OAuth for user:\", userId);\n      res.redirect(authUrl);\n    } catch (error) {\n      console.error(\"Error generating auth URL:\", error);\n      res.status(500).json({ message: \"Failed to generate auth URL\" });\n    }\n  });\n\n  // Initiate Google Calendar OAuth (API endpoint)\n  app.get(\"/api/auth/google/connect\", authenticateToken, async (req, res) => {\n    try {\n      const authUrl = getAuthUrl(req.user!.userId);\n      res.json({ authUrl });\n    } catch (error) {\n      console.error(\"Error generating Google auth URL:\", error);\n      res.status(500).json({ message: \"Failed to generate authorization URL\" });\n    }\n  });\n\n  // Google Calendar OAuth callback\n  app.get(\"/api/auth/google/callback\", async (req, res) => {\n    try {\n      const { code, state: userId, error } = req.query;\n\n      console.log(\"Google Calendar callback received:\", {\n        hasCode: !!code,\n        hasUserId: !!userId,\n        hasError: !!error,\n        fullUrl: req.url,\n        clientId: process.env.GOOGLE_CLIENT_ID\n          ? process.env.GOOGLE_CLIENT_ID.substring(0, 12) + \"...\"\n          : \"Missing\",\n        redirectUri: `${req.protocol}://${req.get(\"host\")}/api/auth/google/callback`,\n      });\n\n      // Check if Google returned an error\n      if (error) {\n        console.error(\"Google OAuth error:\", error);\n        return res.redirect(\n          `/?calendar=error&reason=google_oauth_error&details=${error}`,\n        );\n      }\n\n      if (!code || !userId) {\n        console.error(\"Missing authorization code or user ID:\", {\n          code: !!code,\n          userId: !!userId,\n        });\n        return res.redirect(\"/?calendar=error&reason=missing_params\");\n      }\n\n      console.log(\"Processing Google Calendar callback for user:\", userId);\n\n      // Check if we have valid credentials\n      if (!process.env.GOOGLE_CLIENT_ID || !process.env.GOOGLE_CLIENT_SECRET) {\n        console.error(\"Missing Google credentials\");\n        return res.redirect(\"/?calendar=error&reason=missing_credentials\");\n      }\n\n      // Exchange code for tokens\n      console.log(\"Attempting to exchange code for tokens...\");\n      console.log(\"OAuth2 Client config:\", {\n        clientId: oauth2Client._clientId,\n        redirectUri: oauth2Client.redirectUri,\n        hasClientSecret: !!oauth2Client._clientSecret,\n      });\n\n      const { tokens } = await oauth2Client.getToken(code as string);\n      console.log(\"Received Google Calendar tokens:\", {\n        hasAccessToken: !!tokens.access_token,\n        hasRefreshToken: !!tokens.refresh_token,\n        expiryDate: tokens.expiry_date,\n      });\n\n      // Store tokens in user record\n      await storage.updateUser(userId as string, {\n        googleCalendarTokens: tokens,\n        calendarIntegrationEnabled: true,\n      });\n\n      console.log(\n        \"Google Calendar tokens stored successfully for user:\",\n        userId,\n      );\n\n      // Check if this is a DM connecting calendar for first time and trigger credit allocation\n      const user = await storage.getUserById(userId as string);\n      if (user && user.role === \"decision_maker\" && user.invitedBy) {\n        console.log(\n          `DM ${userId} connected calendar - checking credit allocation for sales rep ${user.invitedBy}`,\n        );\n\n        try {\n          // Force refresh the inviting sales rep's call limits since DM now has calendar connected\n          const currentMonth = new Date().toISOString().slice(0, 7);\n          const repCallLimit = await storage.getMonthlyCallLimit(\n            user.invitedBy,\n            \"sales_rep\",\n            currentMonth,\n          );\n\n          console.log(\n            `✅ Sales rep ${user.invitedBy} call limits refreshed after DM calendar connection`,\n          );\n        } catch (error) {\n          console.error(\"❌ Failed to refresh sales rep call limits:\", error);\n        }\n      }\n\n      res.redirect(\"/?calendar=connected\");\n    } catch (error) {\n      console.error(\"Error in Google Calendar callback:\", error);\n      console.error(\"Error details:\", {\n        message: error.message,\n        code: error.code,\n        status: error.status,\n        response: error.response?.data,\n      });\n      res.redirect(\"/?calendar=error&reason=token_exchange_failed\");\n    }\n  });\n\n  // Disconnect calendar integration\n  app.post(\"/api/calendar/disconnect\", authenticateToken, async (req, res) => {\n    try {\n      const userId = req.user!.userId;\n      const user = await storage.getUserById(userId);\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (!user.calendarIntegrationEnabled) {\n        return res.json({\n          success: true,\n          message: \"Calendar is already disconnected\",\n          connected: false,\n        });\n      }\n\n      console.log(`User ${user.email} disconnecting calendar`);\n\n      // Handle calendar disconnection flagging for DMs with inviting reps\n      if (user.role === \"decision_maker\" && user.invitedBy) {\n        console.log(\n          `DM ${user.email} disconnecting calendar, flagging referring sales rep ${user.invitedBy}`,\n        );\n\n        try {\n          await handleCalendarDisconnectionFlag(user.invitedBy, userId, user);\n          console.log(\n            `✅ Sales rep ${user.invitedBy} flagged for DM calendar disconnection`,\n          );\n        } catch (flagError) {\n          console.error(\n            \"Error handling calendar disconnection flag:\",\n            flagError,\n          );\n          // Continue with disconnection even if flagging fails\n        }\n      }\n\n      // Disconnect calendar\n      const updatedUser = await storage.updateUser(userId, {\n        calendarIntegrationEnabled: false,\n        googleCalendarTokens: null,\n      });\n\n      console.log(`Calendar disconnected successfully for user: ${user.email}`);\n\n      res.json({\n        success: true,\n        message: \"Calendar disconnected successfully\",\n        connected: false,\n      });\n    } catch (error) {\n      console.error(\"Error disconnecting calendar:\", error);\n      res.status(500).json({ message: \"Failed to disconnect calendar\" });\n    }\n  });\n\n  // Get calendar integration status\n  app.get(\"/api/calendar/status\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUserById(req.user!.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      console.log(\"Calendar status check for user:\", user.email);\n      console.log(\n        \"Calendar integration enabled:\",\n        user.calendarIntegrationEnabled,\n      );\n      console.log(\"Has Google Calendar tokens:\", !!user.googleCalendarTokens);\n\n      res.json({\n        connected: !!user.calendarIntegrationEnabled,\n        email: user.email,\n        hasTokens: !!user.googleCalendarTokens,\n        tokenInfo: user.googleCalendarTokens\n          ? {\n              hasAccessToken: !!user.googleCalendarTokens.access_token,\n              hasRefreshToken: !!user.googleCalendarTokens.refresh_token,\n              expiryDate: user.googleCalendarTokens.expiry_date,\n            }\n          : null,\n      });\n    } catch (error) {\n      console.error(\"Error checking calendar status:\", error);\n      res.status(500).json({ message: \"Failed to check calendar status\" });\n    }\n  });\n\n  // Upcoming meetings endpoint for decision makers\n  app.get(\n    \"/api/calendar/upcoming-meetings\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const user = await storage.getUserById(req.user!.userId);\n        if (!user) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        if (!user.calendarIntegrationEnabled) {\n          return res.json([]);\n        }\n\n        // Fetch real Google Calendar events\n        if (!user.googleCalendarTokens) {\n          return res.json([]);\n        }\n\n        try {\n          // Get calendar events using the Google Calendar API\n          const events = await getCalendarEvents(req.user!.userId, storage);\n\n          // Filter events to show only meetings with sales reps\n          const salesRepMeetings = events.filter((event) => {\n            // Skip events without attendees\n            if (!event.attendees || event.attendees.length < 2) {\n              return false;\n            }\n\n            // Skip events organized by the current user\n            if (event.organizer?.email === user.email) {\n              return false;\n            }\n\n            // Check if any attendees are sales reps or from sales companies\n            const hasSalesRepAttendee = event.attendees?.some((attendee) => {\n              const email = attendee.email?.toLowerCase() || \"\";\n              const displayName = attendee.displayName?.toLowerCase() || \"\";\n\n              // Skip the current user\n              if (email === user.email.toLowerCase()) {\n                return false;\n              }\n\n              // Enhanced sales rep detection criteria\n              return (\n                email.includes(\"sales\") ||\n                email.includes(\"rep\") ||\n                displayName.includes(\"sales\") ||\n                displayName.includes(\"rep\") ||\n                email.includes(\"techize.com\") || // Your sales domain\n                email.includes(\"business\") ||\n                email.includes(\"account\") ||\n                displayName.includes(\"business\") ||\n                displayName.includes(\"account\")\n              );\n            });\n\n            // Check if the event title/summary indicates a sales meeting\n            const isSalesEvent =\n              event.summary?.toLowerCase().includes(\"sales\") ||\n              event.summary?.toLowerCase().includes(\"demo\") ||\n              event.summary?.toLowerCase().includes(\"presentation\") ||\n              event.summary?.toLowerCase().includes(\"pitch\") ||\n              event.summary?.toLowerCase().includes(\"meeting\") ||\n              event.summary?.toLowerCase().includes(\"call\") ||\n              event.summary?.toLowerCase().includes(\"discussion\");\n\n            // Include events that have sales rep attendees or are sales-related events\n            return hasSalesRepAttendee || isSalesEvent;\n          });\n\n          res.json(salesRepMeetings);\n        } catch (error) {\n          console.error(\"Error fetching calendar events:\", error);\n          // Return empty array if calendar fetch fails\n          res.json([]);\n        }\n      } catch (error) {\n        console.error(\"Error fetching upcoming meetings:\", error);\n        res.status(500).json({ message: \"Failed to fetch upcoming meetings\" });\n      }\n    },\n  );\n\n  // Submit post-call evaluation\n  app.post(\"/api/decision-maker/call-evaluation\", async (req, res) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"User not logged in\" });\n    }\n\n    try {\n      const evaluationData = {\n        ...req.body,\n        decisionMakerId: req.session.userId,\n        submittedAt: new Date(),\n      };\n\n      // Create feedback record\n      const feedback = await storage.createFeedback(evaluationData);\n\n      // Update call record if it exists\n      if (evaluationData.callId) {\n        await storage.updateCall(evaluationData.callId, {\n          rating: evaluationData.rating,\n          feedback: evaluationData.comments,\n          status: \"completed\",\n          completedAt: new Date(),\n        });\n      }\n\n      // Check for red flags and handle rep suspension\n      const isRedFlag = [\"poor\", \"rude\"].includes(evaluationData.experience);\n      if (isRedFlag && evaluationData.salesRepId) {\n        await handleRedFlagSuspension(evaluationData.salesRepId, feedback._id);\n      }\n\n      // Increment flag count and send warning email for rating of 1\n      if (evaluationData.rating === 1 && evaluationData.salesRepId) {\n        try {\n          console.log(\n            `Rating is 1, incrementing flag for sales rep: ${evaluationData.salesRepId}`,\n          );\n          await storage.incrementUserFlag(\n            evaluationData.salesRepId,\n            `Poor call rating (${evaluationData.rating}/5) - ${evaluationData.experience}`,\n            req.session.userId,\n          );\n          console.log(\n            `Flag incremented and warning email sent for sales rep: ${evaluationData.salesRepId}`,\n          );\n        } catch (flagError) {\n          console.error(\"Error incrementing flag count:\", flagError);\n          // Don't fail the evaluation submission if flagging fails\n        }\n      }\n\n      // If positive feedback and rep was suspended, check for suspension removal\n      if (!isRedFlag && evaluationData.salesRepId) {\n        await handleSuspensionRemoval(evaluationData.salesRepId);\n      }\n\n      // Log activity\n      await storage.createActivityLog({\n        action: \"SUBMIT_CALL_EVALUATION\",\n        performedBy: req.session.userId,\n        details: `Submitted evaluation for call with ${evaluationData.salesRepName}`,\n        metadata: {\n          callId: evaluationData.callId,\n          rating: evaluationData.rating,\n          experience: evaluationData.experience,\n          isRedFlag,\n        },\n      });\n\n      res.json({\n        success: true,\n        message: \"Evaluation submitted successfully\",\n        feedbackId: feedback.id,\n      });\n    } catch (error) {\n      console.error(\"Error submitting call evaluation:\", error);\n      res.status(500).json({ message: \"Failed to submit evaluation\" });\n    }\n  });\n\n  // Check for suspicious sales rep activity (for DM dashboard)\n  app.get(\n    \"/api/decision-maker/suspicious-activity\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        // Get current user to find their company domain\n        const currentUser = await storage.getUserById(req.user!.userId);\n        if (!currentUser || !currentUser.companyDomain) {\n          return res.json({\n            hasSuspiciousActivity: false,\n            suspendedRepsCount: 0,\n          });\n        }\n\n        // Find all sales reps that have interacted with this DM's company\n        const companyFeedback = await storage.getFeedbackByCompany(\n          currentUser.companyDomain,\n        );\n        const repIds = [\n          ...new Set(\n            companyFeedback\n              .map((f) => f.salesRepId?.toString())\n              .filter(Boolean),\n          ),\n        ];\n\n        // Check for suspended reps\n        let suspendedRepsCount = 0;\n        const suspendedReps = [];\n\n        for (const repId of repIds) {\n          const suspensionStatus =\n            await storage.checkRepSuspensionStatus(repId);\n          if (suspensionStatus.isSuspended) {\n            suspendedRepsCount++;\n            const rep = await storage.getUserById(repId);\n            if (rep) {\n              suspendedReps.push({\n                repId,\n                repName: `${rep.firstName} ${rep.lastName}`,\n                repEmail: rep.email,\n                suspension: suspensionStatus.suspension,\n              });\n            }\n          }\n        }\n\n        res.json({\n          hasSuspiciousActivity: suspendedRepsCount > 0,\n          suspendedRepsCount,\n          suspendedReps,\n          companyDomain: currentUser.companyDomain,\n        });\n      } catch (error) {\n        console.error(\"Error checking suspicious activity:\", error);\n        res\n          .status(500)\n          .json({ message: \"Failed to check suspicious activity\" });\n      }\n    },\n  );\n\n  // Helper function to handle calendar connection credit award\n  async function handleCalendarConnectionCredit(\n    salesRepId: string,\n    dmId: string,\n    dmUser: any,\n  ) {\n    try {\n      console.log(\n        `Handling referral credit award for sales rep ${salesRepId} due to DM ${dmId} connecting calendar`,\n      );\n\n      // Award credit to the referring sales rep for successful DM onboarding with calendar integration\n      const creditResult = await storage.awardCreditToDMCompletion(\n        salesRepId,\n        dmId,\n      );\n\n      console.log(`Calendar connection credit result:`, creditResult);\n\n      if (creditResult.success) {\n        // Log successful credit award activity\n        await storage.createActivityLog({\n          action: \"REFERRAL_CREDIT_AWARDED\",\n          performedBy: dmId,\n          userId: salesRepId,\n          entityType: \"user\",\n          entityId: salesRepId,\n          details: `Referral credit awarded to sales rep ${await storage.getUser(salesRepId).then((u) => u?.email)} for DM ${dmUser.email} completing onboarding with calendar integration`,\n          metadata: {\n            salesRepId: salesRepId,\n            dmId: dmId,\n            dmEmail: dmUser.email,\n            creditAmount: 1,\n            source: \"dm_onboarding_with_calendar\",\n          },\n        });\n\n        console.log(\n          `Referral credit successfully awarded to sales rep ${salesRepId}`,\n        );\n      } else {\n        console.log(`Referral credit not awarded: ${creditResult.message}`);\n      }\n    } catch (error) {\n      console.error(\"Error handling calendar connection credit:\", error);\n      throw error;\n    }\n  }\n\n  // Helper function to handle calendar disconnection flagging\n  async function handleCalendarDisconnectionFlag(\n    salesRepId: string,\n    dmId: string,\n    dmUser: any,\n  ) {\n    try {\n      console.log(\n        `Handling calendar disconnection flag for sales rep ${salesRepId} due to DM ${dmId} disconnecting`,\n      );\n\n      // Check if this sales rep has already been flagged for this DM's calendar disconnection\n      const existingFlags = await storage.getUserFlags(salesRepId);\n      const alreadyFlagged = existingFlags.some((flag) =>\n        flag.description?.includes(\n          `Calendar disconnected by DM ${dmUser.email}`,\n        ),\n      );\n\n      if (alreadyFlagged) {\n        console.log(\n          \"Sales rep already flagged for this DM calendar disconnection, skipping\",\n        );\n        return;\n      }\n\n      // Create flag entry\n      const flagReason = `Calendar disconnected by DM ${dmUser.email} (${dmUser.firstName} ${dmUser.lastName}) from ${dmUser.company || \"Unknown Company\"}`;\n\n      console.log(`Creating calendar disconnection flag: ${flagReason}`);\n      await storage.incrementUserFlag(salesRepId, flagReason, dmId);\n\n      // Get updated sales rep info\n      const salesRep = await storage.getUser(salesRepId);\n      if (!salesRep) {\n        console.error(`Sales rep ${salesRepId} not found after flagging`);\n        return;\n      }\n\n      console.log(\n        `Sales rep ${salesRep.email} now has ${salesRep.flagsReceived || 0} flags`,\n      );\n\n      // Send warning email if not already suspended\n      if (!salesRep.suspension?.isActive) {\n        try {\n          const { sendSalesRepWarningEmail } = await import(\"./email-service\");\n          await sendSalesRepWarningEmail(\n            salesRep.email,\n            salesRep.firstName,\n            dmUser.firstName,\n            `${dmUser.firstName} ${dmUser.lastName}`,\n            dmUser.jobTitle || \"Decision Maker\",\n            dmUser.company || \"Unknown Company\",\n            \"Calendar Integration Disconnected\",\n            new Date().toLocaleDateString(),\n            salesRep.flagsReceived || 1,\n          );\n\n          console.log(\n            `Warning email sent to sales rep ${salesRep.email} for calendar disconnection flag`,\n          );\n        } catch (emailError) {\n          console.error(\n            \"Failed to send calendar disconnection warning email:\",\n            emailError,\n          );\n        }\n      }\n\n      // Log activity with required fields\n      await storage.createActivityLog({\n        action: \"CALENDAR_DISCONNECTION_FLAG\",\n        performedBy: dmId,\n        userId: salesRepId, // Required field\n        entityType: \"user\", // Required field\n        entityId: salesRepId, // Required field\n        details: `DM ${dmUser.email} disconnected calendar, flagging referring sales rep ${salesRep.email}`,\n        metadata: {\n          salesRepId: salesRepId,\n          dmId: dmId,\n          dmEmail: dmUser.email,\n          repFlagCount: salesRep.flagsReceived || 1,\n          flagReason: flagReason,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error handling calendar disconnection flag:\", error);\n      throw error;\n    }\n  }\n\n  // Helper function to handle red flag suspension logic\n  async function handleRedFlagSuspension(\n    salesRepId: string,\n    feedbackId: string,\n  ) {\n    try {\n      // Get recent feedback for this rep\n      const recentFeedback = await storage.getRecentFeedbackForRep(\n        salesRepId,\n        10,\n      );\n\n      // Count red flags\n      const redFlags = recentFeedback.filter((f) =>\n        [\"poor\", \"rude\"].includes(f.experience),\n      );\n\n      // Check for 90-day suspension (3 consecutive red flags)\n      let consecutiveRedFlags = 0;\n      for (const feedback of recentFeedback) {\n        if ([\"poor\", \"rude\"].includes(feedback.experience)) {\n          consecutiveRedFlags++;\n        } else {\n          break; // Break streak on non-red flag\n        }\n      }\n\n      // Check current suspension status\n      const suspensionStatus =\n        await storage.checkRepSuspensionStatus(salesRepId);\n      if (suspensionStatus.isSuspended) {\n        return; // Already suspended\n      }\n\n      let suspensionType = null;\n      let suspensionReason = \"\";\n\n      if (consecutiveRedFlags >= 3) {\n        // 90-day suspension for consecutive red flags\n        suspensionType = \"90-day\";\n        suspensionReason = `3 consecutive red flags received`;\n      } else if (redFlags.length >= 3) {\n        // Check if red flags are from different DMs\n        const uniqueDMs = new Set(\n          redFlags.map((f) => f.decisionMakerId?.toString()),\n        );\n        if (uniqueDMs.size >= 3) {\n          suspensionType = \"30-day\";\n          suspensionReason = `3 red flags from different decision makers`;\n        }\n      }\n\n      if (suspensionType) {\n        const startDate = new Date();\n        const endDate = new Date();\n        endDate.setDate(\n          startDate.getDate() + (suspensionType === \"90-day\" ? 90 : 30),\n        );\n\n        const suspensionData = {\n          repId: salesRepId,\n          type: suspensionType,\n          startDate,\n          endDate,\n          isActive: true,\n          suspensionReason,\n          triggeringFlags: redFlags.slice(0, 3).map((f) => f._id),\n        };\n\n        await storage.createRepSuspension(suspensionData);\n\n        // Log suspension activity\n        await storage.createActivityLog({\n          action: \"REP_SUSPENDED\",\n          performedBy: \"system\",\n          details: `Sales rep suspended for ${suspensionType}: ${suspensionReason}`,\n          metadata: {\n            repId: salesRepId,\n            suspensionType,\n            redFlagCount: redFlags.length,\n            consecutiveCount: consecutiveRedFlags,\n          },\n        });\n      }\n    } catch (error) {\n      console.error(\"Error handling red flag suspension:\", error);\n    }\n  }\n\n  // Helper function to handle suspension removal\n  async function handleSuspensionRemoval(salesRepId: string) {\n    try {\n      const suspensionStatus =\n        await storage.checkRepSuspensionStatus(salesRepId);\n      if (suspensionStatus.isSuspended && suspensionStatus.suspension) {\n        // Lift the suspension\n        await storage.updateRepSuspension(suspensionStatus.suspension._id, {\n          isActive: false,\n        });\n\n        // Log suspension removal\n        await storage.createActivityLog({\n          action: \"REP_SUSPENSION_LIFTED\",\n          performedBy: \"system\",\n          details: `Sales rep suspension lifted due to successful call completion without red flag`,\n          metadata: {\n            repId: salesRepId,\n            originalSuspensionType: suspensionStatus.suspension.type,\n          },\n        });\n      }\n    } catch (error) {\n      console.error(\"Error handling suspension removal:\", error);\n    }\n  }\n\n  // Get rep suspension status\n  app.get(\n    \"/api/sales-rep/suspension-status\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const suspensionStatus = await storage.checkRepSuspensionStatus(\n          req.user!.userId,\n        );\n        res.json(suspensionStatus);\n      } catch (error) {\n        console.error(\"Error checking suspension status:\", error);\n        res.status(500).json({ message: \"Failed to check suspension status\" });\n      }\n    },\n  );\n\n  // Demo calendar connection endpoint\n  app.patch(\"/api/users/:userId\", async (req, res) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"User not logged in\" });\n    }\n\n    const { userId } = req.params;\n    const { calendarIntegrationEnabled } = req.body;\n\n    // Verify user can only update their own record\n    if (req.session.userId !== userId) {\n      return res.status(403).json({ message: \"Unauthorized\" });\n    }\n\n    try {\n      // Get current user state before update\n      const currentUser = await storage.getUser(userId);\n      if (!currentUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Check if this is a calendar disconnection\n      const wasConnected = currentUser.calendarIntegrationEnabled;\n      const willBeConnected = !!calendarIntegrationEnabled;\n      const isDisconnecting = wasConnected && !willBeConnected;\n\n      console.log(`Calendar status change for user ${userId}:`, {\n        wasConnected,\n        willBeConnected,\n        isDisconnecting,\n        userRole: currentUser.role,\n        invitedBy: currentUser.invitedBy,\n      });\n\n      // Handle calendar integration logic\n      if (currentUser.role === \"decision_maker\" && currentUser.invitedBy) {\n        if (isDisconnecting) {\n          // DM disconnecting calendar - flag the referring sales rep\n          console.log(\n            `DM ${currentUser.email} disconnecting calendar, flagging referring sales rep ${currentUser.invitedBy}`,\n          );\n\n          try {\n            await handleCalendarDisconnectionFlag(\n              currentUser.invitedBy,\n              userId,\n              currentUser,\n            );\n          } catch (flagError) {\n            console.error(\n              \"Error handling calendar disconnection flag:\",\n              flagError,\n            );\n            // Continue with the update even if flagging fails\n          }\n        } else if (!wasConnected && willBeConnected) {\n          // DM connecting calendar for the first time - award referral credit\n          console.log(\n            `DM ${currentUser.email} connecting calendar for first time, awarding credit to referring sales rep ${currentUser.invitedBy}`,\n          );\n\n          try {\n            await handleCalendarConnectionCredit(\n              currentUser.invitedBy,\n              userId,\n              currentUser,\n            );\n          } catch (creditError) {\n            console.error(\n              \"Error handling calendar connection credit:\",\n              creditError,\n            );\n            // Continue with the update even if credit awarding fails\n          }\n        }\n      }\n\n      const updatedUser = await storage.updateUser(userId, {\n        calendarIntegrationEnabled: willBeConnected,\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        id: updatedUser.id,\n        calendarIntegrationEnabled: updatedUser.calendarIntegrationEnabled,\n      });\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Get available time slots for a decision maker\n  app.get(\n    \"/api/calendar/availability/:decisionMakerId\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const { decisionMakerId } = req.params;\n        const { startDate, endDate, duration = 15 } = req.query;\n        const salesRepId = req.user!.userId;\n\n        console.log(`Checking availability for DM ${decisionMakerId} by sales rep ${salesRepId}`);\n\n        // Get decision maker's calendar tokens\n        const decisionMaker = await storage.getUser(decisionMakerId);\n        \n        // Set credentials for the decision maker if available\n        if (decisionMaker?.googleCalendarTokens?.access_token) {\n          setCredentials(decisionMaker.googleCalendarTokens);\n        } else {\n          console.log(`DM ${decisionMakerId} calendar not connected, checking database calls only`);\n        }\n\n        // Get current sales rep ID for comprehensive conflict checking\n        const currentSalesRepId = salesRepId;\n        \n        console.log(`\\n🔍 COMPREHENSIVE AVAILABILITY CHECK REQUEST:`);\n        console.log(`- DM ID: ${decisionMakerId}`);\n        console.log(`- Sales Rep ID: ${currentSalesRepId}`);\n        console.log(`- Date Range: ${startDate} to ${endDate}`);\n        console.log(`- Duration: ${duration} minutes`);\n        \n        // Get available slots for the decision maker with comprehensive checking\n        let availableSlots = [];\n        try {\n          availableSlots = await getAvailableSlots(\n            decisionMakerId,\n            storage,\n            startDate as string,\n            endDate as string,\n            parseInt(duration as string),\n            currentSalesRepId, // Pass sales rep ID for conflict checking\n          );\n        } catch (error) {\n          console.error(`⚠ Comprehensive availability check failed for DM ${decisionMakerId}:`, error);\n          \n          // Enhanced fallback: Check all three conditions manually\n          console.log('🔄 Falling back to manual comprehensive checking...');\n          \n          // Get DM database calls\n          const dmCalls = await storage.getCallsByDateRange(\n            decisionMakerId,\n            startDate as string,\n            endDate as string\n          );\n          \n          // Get sales rep database calls if available\n          let salesRepCalls = [];\n          if (currentSalesRepId) {\n            try {\n              salesRepCalls = await storage.getCallsBySalesRepDateRange(\n                currentSalesRepId,\n                startDate as string,\n                endDate as string\n              );\n            } catch (repError) {\n              console.warn('Sales rep calls check failed:', repError);\n            }\n          }\n          \n          console.log(`Fallback conflict check: DM has ${dmCalls.length} calls, Sales Rep has ${salesRepCalls.length} calls`);\n          \n          // Generate all possible time slots and mark conflicts from all sources\n          const slotDuration = parseInt(duration as string) * 60 * 1000;\n          const start = new Date(startDate as string);\n          const end = new Date(endDate as string);\n          \n          for (let day = new Date(start); day <= end; day.setDate(day.getDate() + 1)) {\n            if (day.getDay() === 0 || day.getDay() === 6) continue;\n            \n            const dayStart = new Date(day);\n            dayStart.setHours(9, 0, 0, 0);\n            \n            const dayEnd = new Date(day);\n            dayEnd.setHours(17, 0, 0, 0);\n            \n            for (let slotStart = new Date(dayStart); slotStart < dayEnd; slotStart.setTime(slotStart.getTime() + slotDuration)) {\n              const slotEnd = new Date(slotStart.getTime() + slotDuration);\n              \n              // Check conflicts with DM calls\n              const dmConflicts = dmCalls.filter(call => {\n                const callStart = new Date(call.scheduledAt);\n                const callEnd = new Date(call.endTime);\n                return (slotStart >= callStart && slotStart < callEnd) ||\n                       (slotEnd > callStart && slotEnd <= callEnd) ||\n                       (slotStart <= callStart && slotEnd >= callEnd);\n              });\n              \n              // Check conflicts with Sales Rep calls\n              const repConflicts = salesRepCalls.filter(call => {\n                const callStart = new Date(call.scheduledAt);\n                const callEnd = new Date(call.endTime);\n                return (slotStart >= callStart && slotStart < callEnd) ||\n                       (slotEnd > callStart && slotEnd <= callEnd) ||\n                       (slotStart <= callStart && slotEnd >= callEnd);\n              });\n              \n              const allConflicts = [...dmConflicts, ...repConflicts];\n              const hasConflict = allConflicts.length > 0;\n              \n              if (slotEnd <= dayEnd) {\n                const slot = {\n                  start: new Date(slotStart),\n                  end: new Date(slotEnd),\n                  duration: parseInt(duration as string),\n                  isAvailable: !hasConflict,\n                  conflicts: allConflicts.map(call => ({\n                    source: dmConflicts.includes(call) ? 'dm_database' : 'salesrep_database',\n                    callId: call._id,\n                    start: new Date(call.scheduledAt),\n                    end: new Date(call.endTime),\n                    participantId: dmConflicts.includes(call) ? call.decisionMakerId : call.salesRepId\n                  }))\n                };\n                \n                availableSlots.push(slot);\n                \n                if (hasConflict) {\n                  console.log(`❌ Fallback conflict at ${slotStart.toISOString()}: ${dmConflicts.length} DM + ${repConflicts.length} Rep conflicts`);\n                }\n              }\n            }\n          }\n          \n          console.log(`✅ Fallback generated ${availableSlots.length} slots, ${availableSlots.filter(s => !s.isAvailable).length} unavailable due to conflicts`);\n        }\n\n        res.json({ availableSlots });\n      } catch (error) {\n        console.error(\"Error getting availability:\", error);\n        res.status(500).json({ message: \"Failed to get availability\" });\n      }\n    },\n  );\n\n  // Get comprehensive availability checking both sales rep and DM\n  app.get(\n    \"/api/calendar/check-availability\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const { decisionMakerId, startTime, endTime } = req.query;\n        const salesRepId = req.user!.userId;\n\n        if (!decisionMakerId || !startTime || !endTime) {\n          return res.status(400).json({ message: \"Missing required parameters\" });\n        }\n\n        const start = new Date(startTime as string);\n        const end = new Date(endTime as string);\n\n        // Check sales rep availability\n        const salesRep = await storage.getUser(salesRepId);\n        const salesRepCalls = await storage.getCallsByDateRange(\n          salesRepId,\n          start,\n          end\n        );\n\n        // Check decision maker availability\n        const decisionMaker = await storage.getUser(decisionMakerId as string);\n        const dmCalls = await storage.getCallsByDateRange(\n          decisionMakerId as string,\n          start,\n          end\n        );\n\n        const salesRepConflict = salesRepCalls.some(call => {\n          const callStart = new Date(call.scheduledAt);\n          const callEnd = new Date(call.endTime);\n          return (start >= callStart && start < callEnd) ||\n                 (end > callStart && end <= callEnd) ||\n                 (start <= callStart && end >= callEnd);\n        });\n\n        const dmConflict = dmCalls.some(call => {\n          const callStart = new Date(call.scheduledAt);\n          const callEnd = new Date(call.endTime);\n          return (start >= callStart && start < callEnd) ||\n                 (end > callStart && end <= callEnd) ||\n                 (start <= callStart && end >= callEnd);\n        });\n\n        res.json({\n          available: !salesRepConflict && !dmConflict,\n          salesRepConflict,\n          dmConflict,\n          salesRepCalls: salesRepCalls.length,\n          dmCalls: dmCalls.length,\n          conflicts: {\n            salesRep: salesRepConflict ? salesRepCalls.filter(call => {\n              const callStart = new Date(call.scheduledAt);\n              const callEnd = new Date(call.endTime);\n              return (start >= callStart && start < callEnd) ||\n                     (end > callStart && end <= callEnd) ||\n                     (start <= callStart && end >= callEnd);\n            }) : [],\n            dm: dmConflict ? dmCalls.filter(call => {\n              const callStart = new Date(call.scheduledAt);\n              const callEnd = new Date(call.endTime);\n              return (start >= callStart && start < callEnd) ||\n                     (end > callStart && end <= callEnd) ||\n                     (start <= callStart && end >= callEnd);\n            }) : []\n          }\n        });\n      } catch (error) {\n        console.error(\"Error checking availability:\", error);\n        res.status(500).json({ message: \"Failed to check availability\" });\n      }\n    },\n  );\n\n  // Schedule a meeting\n  app.post(\"/api/calendar/schedule\", authenticateToken, async (req, res) => {\n    try {\n      const salesRepId = req.user!.userId;\n      const {\n        decisionMakerId,\n        startTime,\n        endTime,\n        title,\n        description,\n        timeZone = \"UTC\",\n      } = req.body;\n\n      // Get both users\n      const salesRep = await storage.getUser(salesRepId);\n      const decisionMaker = await storage.getUser(decisionMakerId);\n\n      if (!salesRep || !decisionMaker) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (!decisionMaker.googleCalendarTokens?.access_token) {\n        return res\n          .status(400)\n          .json({ message: \"Decision maker calendar not connected\" });\n      }\n\n      // Set credentials for the decision maker (event will be created in their calendar)\n      setCredentials(decisionMaker.googleCalendarTokens);\n\n      // Create calendar event\n      const eventData = {\n        summary:\n          title || `Meeting with ${salesRep.firstName} ${salesRep.lastName}`,\n        description:\n          description || `Sales meeting scheduled through Naeberly platform.`,\n        start: { dateTime: startTime, timeZone },\n        end: { dateTime: endTime, timeZone },\n        attendees: [\n          {\n            email: salesRep.email,\n            displayName: `${salesRep.firstName} ${salesRep.lastName}`,\n          },\n          {\n            email: decisionMaker.email,\n            displayName: `${decisionMaker.firstName} ${decisionMaker.lastName}`,\n          },\n        ],\n      };\n\n      const calendarEvent = await createCalendarEvent(eventData);\n\n      // Store call in database\n      const callData = {\n        salesRepId,\n        decisionMakerId,\n        scheduledAt: new Date(startTime),\n        endTime: new Date(endTime),\n        googleEventId: calendarEvent.id,\n        meetingLink: calendarEvent.hangoutLink,\n        timeZone,\n        status: \"scheduled\",\n      };\n\n      const call = await storage.createCall(callData);\n\n      res.json({\n        success: true,\n        call,\n        calendarEvent: {\n          id: calendarEvent.id,\n          link: calendarEvent.htmlLink,\n          meetingLink: calendarEvent.hangoutLink,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error scheduling meeting:\", error);\n      res.status(500).json({ message: \"Failed to schedule meeting\" });\n    }\n  });\n\n  // ===== TEAM MANAGEMENT ROUTES =====\n\n  // Get company users (sales reps)\n  app.get(\"/api/company-users\", requireEnterpriseAdmin, async (req, res) => {\n    try {\n      const enterpriseUser = (req as any).enterpriseUser;\n      const companyDomain = enterpriseUser.companyDomain;\n\n      // Get sales reps from the company domain\n      const salesReps = await storage.getUsersByCompanyDomain(companyDomain);\n      const filteredReps = salesReps.filter(\n        (user) => user.role === \"sales_rep\",\n      );\n\n      // Format response with team-specific data\n      const teamMembers = filteredReps.map((user) => ({\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        jobTitle: user.jobTitle,\n        department: user.department,\n        status: user.isActive ? \"active\" : \"suspended\",\n        permissions: user.permissions || [],\n        createdAt: user.createdAt,\n        lastLogin: user.lastLogin,\n      }));\n\n      res.json(teamMembers);\n    } catch (error) {\n      console.error(\"Error getting company users:\", error);\n      res.status(500).json({ message: \"Failed to get company users\" });\n    }\n  });\n\n  // Invite new sales rep\n  app.post(\n    \"/api/company-users/invite\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n        const companyDomain = enterpriseUser.companyDomain;\n        const {\n          email,\n          firstName,\n          lastName,\n          jobTitle,\n          department,\n          permissions,\n        } = req.body;\n\n        // Verify email domain matches company domain\n        const emailDomain = email.split(\"@\")[1];\n        if (emailDomain !== companyDomain) {\n          return res.status(400).json({\n            message: `Email domain must match company domain: ${companyDomain}`,\n          });\n        }\n\n        // Check if user already exists\n        const existingUser = await storage.getUserByEmail(email);\n        if (existingUser) {\n          return res\n            .status(400)\n            .json({ message: \"User with this email already exists\" });\n        }\n\n        // Create invitation/user record\n        const userData = {\n          email,\n          firstName,\n          lastName,\n          role: \"sales_rep\",\n          jobTitle: jobTitle || \"\",\n          department: department || \"\",\n          companyDomain,\n          domainVerified: true,\n          isActive: false, // Will be activated when they accept invitation\n          packageType: \"enterprise\",\n          standing: \"good\",\n          permissions: permissions || [],\n          password: \"TempPass123!\", // Temporary password\n          requirePasswordChange: true,\n          invitationStatus: \"invited\",\n          invitedBy: enterpriseUser.id,\n          invitedAt: new Date(),\n        };\n\n        const newUser = await storage.createUser(userData);\n\n        // Log activity\n        await storage.createActivityLog({\n          action: \"INVITE_SALES_REP\",\n          performedBy: enterpriseUser.id,\n          targetUser: newUser.id,\n          details: `Invited sales rep: ${email}`,\n          companyDomain,\n        });\n\n        res.status(201).json({\n          id: newUser.id,\n          email: newUser.email,\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n          status: \"invited\",\n        });\n      } catch (error) {\n        console.error(\"Error inviting sales rep:\", error);\n        res.status(500).json({ message: \"Failed to invite sales rep\" });\n      }\n    },\n  );\n\n  // Update company user status or permissions\n  app.patch(\n    \"/api/company-users/:userId\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n        const { userId } = req.params;\n        const { status, permissions } = req.body;\n\n        // Verify user belongs to same company domain\n        const targetUser = await storage.getUser(userId);\n        if (\n          !targetUser ||\n          targetUser.companyDomain !== enterpriseUser.companyDomain\n        ) {\n          return res\n            .status(404)\n            .json({ message: \"User not found or access denied\" });\n        }\n\n        // Prepare updates\n        const updates: any = {};\n        if (status !== undefined) {\n          updates.isActive = status === \"active\";\n          if (status === \"active\") {\n            updates.invitationStatus = \"accepted\";\n          }\n        }\n        if (permissions !== undefined) {\n          updates.permissions = permissions;\n        }\n\n        // Update user\n        const updatedUser = await storage.updateUser(userId, updates);\n\n        // Log activity\n        const action = status\n          ? \"UPDATE_USER_STATUS\"\n          : \"UPDATE_USER_PERMISSIONS\";\n        const details = status\n          ? `${status === \"active\" ? \"Activated\" : \"Suspended\"} user: ${targetUser.email}`\n          : `Updated permissions for: ${targetUser.email}`;\n\n        await storage.createActivityLog({\n          action,\n          performedBy: enterpriseUser.id,\n          targetUser: userId,\n          details,\n          companyDomain: enterpriseUser.companyDomain,\n        });\n\n        res.json({ success: true, user: updatedUser });\n      } catch (error) {\n        console.error(\"Error updating company user:\", error);\n        res.status(500).json({ message: \"Failed to update user\" });\n      }\n    },\n  );\n\n  // Remove company user\n  app.delete(\n    \"/api/company-users/:userId\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n        const { userId } = req.params;\n\n        // Verify user belongs to same company domain\n        const targetUser = await storage.getUser(userId);\n        if (\n          !targetUser ||\n          targetUser.companyDomain !== enterpriseUser.companyDomain\n        ) {\n          return res\n            .status(404)\n            .json({ message: \"User not found or access denied\" });\n        }\n\n        // Remove user\n        const removed = await storage.deleteUser(userId);\n        if (!removed) {\n          return res.status(500).json({ message: \"Failed to remove user\" });\n        }\n\n        // Log activity\n        await storage.createActivityLog({\n          action: \"REMOVE_SALES_REP\",\n          performedBy: enterpriseUser.id,\n          targetUser: userId,\n          details: `Removed sales rep: ${targetUser.email}`,\n          companyDomain: enterpriseUser.companyDomain,\n        });\n\n        res.json({ success: true });\n      } catch (error) {\n        console.error(\"Error removing company user:\", error);\n        res.status(500).json({ message: \"Failed to remove user\" });\n      }\n    },\n  );\n\n  // Get decision makers for permissions assignment\n  app.get(\n    \"/api/enterprise-admin/decision-makers\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n        const companyDomain = enterpriseUser.companyDomain;\n\n        // Get decision makers from the company domain\n        const allUsers = await storage.getUsersByCompanyDomain(companyDomain);\n        const decisionMakers = allUsers.filter(\n          (user) => user.role === \"decision_maker\",\n        );\n\n        // Format response\n        const dms = decisionMakers.map((user) => ({\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          jobTitle: user.jobTitle,\n          company: user.company || companyDomain,\n        }));\n\n        res.json(dms);\n      } catch (error) {\n        console.error(\"Error getting decision makers:\", error);\n        res.status(500).json({ message: \"Failed to get decision makers\" });\n      }\n    },\n  );\n\n  // ===== CREDIT MANAGEMENT ROUTES =====\n\n  // Get company credits summary\n  app.get(\n    \"/api/company-credits/summary\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n        const companyDomain = enterpriseUser.companyDomain;\n\n        // Get or create company credits\n        let credits = await storage.getCompanyCredits(companyDomain);\n\n        if (!credits) {\n          // Create initial credits record for the company\n          const currentDate = new Date();\n          const periodEnd = new Date(currentDate);\n          periodEnd.setMonth(periodEnd.getMonth() + 1);\n\n          const creditsData = {\n            companyDomain,\n            planType: \"enterprise\",\n            monthlyCredits: 1000,\n            usedCredits: 0,\n            remainingCredits: 1000,\n            currentPeriodStart: currentDate,\n            currentPeriodEnd: periodEnd,\n            perRepLimits: {\n              maxCallsPerMonth: null,\n              maxDMsPerMonth: null,\n            },\n            repUsage: [],\n          };\n\n          credits = await storage.createCompanyCredits(creditsData);\n        }\n\n        // Get all sales reps and populate their usage\n        const salesReps = await storage.getUsersByCompanyDomain(companyDomain);\n        const activeSalesReps = salesReps.filter(\n          (user) => user.role === \"sales_rep\" && user.isActive,\n        );\n\n        // Get call logs and feedback for usage calculation\n        const callLogs = await storage.getCallLogsByCompany(companyDomain);\n        const feedbacks = await storage.getFeedbackByCompany(companyDomain);\n\n        // Calculate per-rep usage\n        const repUsageMap = new Map();\n\n        // Initialize all active reps\n        activeSalesReps.forEach((rep) => {\n          repUsageMap.set(rep.id, {\n            repId: rep.id,\n            repEmail: rep.email,\n            repName: `${rep.firstName} ${rep.lastName}`,\n            callsBooked: 0,\n            dmsUnlocked: 0,\n            creditsUsed: 0,\n            feedbacksReceived: 0,\n            flagsReceived: 0,\n            averageRating: 0,\n          });\n        });\n\n        // Calculate usage from call logs\n        callLogs.forEach((log) => {\n          const repId = log.salesRepId?._id || log.salesRepId;\n          if (repUsageMap.has(repId)) {\n            const usage = repUsageMap.get(repId);\n            usage.callsBooked += 1;\n            usage.creditsUsed += log.creditsUsed || 1;\n\n            if (log.status === \"completed\") {\n              usage.dmsUnlocked += 1;\n            }\n          }\n        });\n\n        // Calculate feedback statistics\n        const repFeedbackStats = new Map();\n        feedbacks.forEach((feedback) => {\n          const repId = feedback.salesRepId?._id || feedback.salesRepId;\n          if (!repFeedbackStats.has(repId)) {\n            repFeedbackStats.set(repId, { total: 0, sum: 0, flags: 0 });\n          }\n          const stats = repFeedbackStats.get(repId);\n          stats.total += 1;\n          stats.sum += feedback.rating;\n          if (feedback.flags && feedback.flags.length > 0) {\n            stats.flags += feedback.flags.length;\n          }\n        });\n\n        // Update rep usage with feedback stats\n        repFeedbackStats.forEach((stats, repId) => {\n          if (repUsageMap.has(repId)) {\n            const usage = repUsageMap.get(repId);\n            usage.feedbacksReceived = stats.total;\n            usage.flagsReceived = stats.flags;\n            usage.averageRating = stats.total > 0 ? stats.sum / stats.total : 0;\n          }\n        });\n\n        const repUsageArray = Array.from(repUsageMap.values());\n\n        // Calculate totals\n        const totalCreditsUsed = repUsageArray.reduce(\n          (sum, rep) => sum + rep.creditsUsed,\n          0,\n        );\n        const totalCallsBooked = repUsageArray.reduce(\n          (sum, rep) => sum + rep.callsBooked,\n          0,\n        );\n        const totalDMsUnlocked = repUsageArray.reduce(\n          (sum, rep) => sum + rep.dmsUnlocked,\n          0,\n        );\n\n        const summary = {\n          planType: credits.planType,\n          monthlyCredits: credits.monthlyCredits,\n          usedCredits: totalCreditsUsed,\n          remainingCredits: credits.monthlyCredits - totalCreditsUsed,\n          utilizationRate:\n            credits.monthlyCredits > 0\n              ? (totalCreditsUsed / credits.monthlyCredits) * 100\n              : 0,\n          currentPeriodStart: credits.currentPeriodStart,\n          currentPeriodEnd: credits.currentPeriodEnd,\n          perRepLimits: credits.perRepLimits,\n          totalCallsBooked,\n          totalDMsUnlocked,\n          activeReps: activeSalesReps.length,\n          repUsage: repUsageArray,\n        };\n\n        res.json(summary);\n      } catch (error) {\n        console.error(\"Error getting company credits summary:\", error);\n        res.status(500).json({ message: \"Failed to get credits summary\" });\n      }\n    },\n  );\n\n  // Update per-rep credit limits\n  app.patch(\n    \"/api/company-credits/rep-limit\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n        const companyDomain = enterpriseUser.companyDomain;\n        const { maxCallsPerMonth, maxDMsPerMonth } = req.body;\n\n        const updates = {\n          \"perRepLimits.maxCallsPerMonth\": maxCallsPerMonth || null,\n          \"perRepLimits.maxDMsPerMonth\": maxDMsPerMonth || null,\n        };\n\n        const updatedCredits = await storage.updateCompanyCredits(\n          companyDomain,\n          updates,\n        );\n\n        if (!updatedCredits) {\n          return res.status(404).json({ message: \"Company credits not found\" });\n        }\n\n        // Log activity\n        await storage.createActivityLog({\n          action: \"UPDATE_CREDIT_LIMITS\",\n          performedBy: enterpriseUser.id,\n          details: `Updated per-rep limits: ${maxCallsPerMonth} calls, ${maxDMsPerMonth} DMs`,\n          companyDomain,\n        });\n\n        res.json({\n          success: true,\n          perRepLimits: updatedCredits.perRepLimits,\n        });\n      } catch (error) {\n        console.error(\"Error updating rep credit limits:\", error);\n        res.status(500).json({ message: \"Failed to update credit limits\" });\n      }\n    },\n  );\n\n  // Reset monthly credits (for testing or manual reset)\n  app.post(\n    \"/api/company-credits/reset\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n        const companyDomain = enterpriseUser.companyDomain;\n\n        const currentDate = new Date();\n        const periodEnd = new Date(currentDate);\n        periodEnd.setMonth(periodEnd.getMonth() + 1);\n\n        const updates = {\n          usedCredits: 0,\n          remainingCredits: 1000,\n          currentPeriodStart: currentDate,\n          currentPeriodEnd: periodEnd,\n          repUsage: [],\n        };\n\n        const updatedCredits = await storage.updateCompanyCredits(\n          companyDomain,\n          updates,\n        );\n\n        // Log activity\n        await storage.createActivityLog({\n          action: \"RESET_CREDITS\",\n          performedBy: enterpriseUser.id,\n          details: \"Reset monthly credits and usage statistics\",\n          companyDomain,\n        });\n\n        res.json({ success: true, credits: updatedCredits });\n      } catch (error) {\n        console.error(\"Error resetting credits:\", error);\n        res.status(500).json({ message: \"Failed to reset credits\" });\n      }\n    },\n  );\n\n  // ===== DM TRACKING ROUTES =====\n\n  // Get company DMs\n  app.get(\"/api/company-dms\", requireEnterpriseAdmin, async (req, res) => {\n    try {\n      const enterpriseUser = (req as any).enterpriseUser;\n      const companyDomain = enterpriseUser.companyDomain;\n\n      const companyDMs = await storage.getCompanyDMs(companyDomain);\n\n      // Calculate engagement scores and additional metrics\n      const enrichedDMs = await Promise.all(\n        companyDMs.map(async (dm) => {\n          const flags = await storage.getDMFlags(dm.dmId.id || dm.dmId);\n          const callLogs = await storage.getCallLogsByCompany(companyDomain);\n          const dmCallLogs = callLogs.filter(\n            (log) =>\n              (log.decisionMakerId?.id || log.decisionMakerId) ===\n              (dm.dmId.id || dm.dmId),\n          );\n\n          // Calculate engagement score based on interactions\n          let engagementScore = 0;\n          if (dmCallLogs.length > 0) {\n            const completedCalls = dmCallLogs.filter(\n              (log) => log.status === \"completed\",\n            ).length;\n            const totalCalls = dmCallLogs.length;\n            const completionRate = completedCalls / totalCalls;\n            const avgRating =\n              dmCallLogs\n                .filter((log) => log.feedback?.rating)\n                .reduce((sum, log) => sum + log.feedback.rating, 0) /\n                dmCallLogs.length || 0;\n\n            engagementScore = Math.round(\n              completionRate * 40 +\n                avgRating * 12 +\n                Math.min(completedCalls, 5) * 10,\n            );\n          }\n\n          return {\n            id: dm.id,\n            dmId: dm.dmId.id || dm.dmId,\n            name: `${dm.dmId.firstName} ${dm.dmId.lastName}`,\n            email: dm.dmId.email,\n            title: dm.dmId.jobTitle || \"N/A\",\n            company: dm.dmId.company || companyDomain,\n            linkedinUrl: dm.dmId.linkedinUrl,\n            verificationStatus: dm.verificationStatus,\n            flagCount: flags.filter((f) => f.status === \"open\").length,\n            totalFlags: flags.length,\n            engagementScore,\n            totalInteractions: dmCallLogs.length,\n            lastInteraction: dm.lastInteraction,\n            linkedRep: {\n              id: dm.linkedRepId.id || dm.linkedRepId,\n              name: `${dm.linkedRepId.firstName} ${dm.linkedRepId.lastName}`,\n              email: dm.linkedRepId.email,\n            },\n            referralDate: dm.referralDate,\n            removalRequested: dm.removalRequested,\n            removalReason: dm.removalReason,\n            status: dm.status,\n            flags: flags.slice(0, 3), // Recent flags\n          };\n        }),\n      );\n\n      res.json(enrichedDMs);\n    } catch (error) {\n      console.error(\"Error getting company DMs:\", error);\n      res.status(500).json({ message: \"Failed to get company DMs\" });\n    }\n  });\n\n  // Request DM removal\n  app.post(\n    \"/api/company-dms/remove\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n        const { dmId, reason } = req.body;\n\n        if (!dmId || !reason) {\n          return res\n            .status(400)\n            .json({ message: \"DM ID and reason are required\" });\n        }\n\n        const result = await storage.requestDMRemoval(\n          dmId,\n          reason,\n          enterpriseUser.id,\n        );\n\n        if (!result) {\n          return res.status(404).json({ message: \"DM not found\" });\n        }\n\n        // Log activity\n        await storage.createActivityLog({\n          action: \"REQUEST_DM_REMOVAL\",\n          performedBy: enterpriseUser.id,\n          targetUser: dmId,\n          details: `Requested DM removal: ${reason}`,\n          companyDomain: enterpriseUser.companyDomain,\n        });\n\n        res.json({ success: true, dm: result });\n      } catch (error) {\n        console.error(\"Error requesting DM removal:\", error);\n        res.status(500).json({ message: \"Failed to request DM removal\" });\n      }\n    },\n  );\n\n  // Replace suspended DM\n  app.post(\n    \"/api/company-dms/replace\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n        const { originalDMId, replacementDMId } = req.body;\n\n        if (!originalDMId || !replacementDMId) {\n          return res\n            .status(400)\n            .json({ message: \"Original and replacement DM IDs are required\" });\n        }\n\n        // Verify replacement DM exists and is available\n        const replacementDM = await storage.getUser(replacementDMId);\n        if (!replacementDM || replacementDM.role !== \"decision_maker\") {\n          return res.status(400).json({ message: \"Invalid replacement DM\" });\n        }\n\n        const result = await storage.replaceDM(\n          originalDMId,\n          replacementDMId,\n          enterpriseUser.id,\n        );\n\n        if (!result) {\n          return res.status(404).json({ message: \"Original DM not found\" });\n        }\n\n        // Log activity\n        await storage.createActivityLog({\n          action: \"REPLACE_DM\",\n          performedBy: enterpriseUser.id,\n          targetUser: originalDMId,\n          details: `Replaced DM with ${replacementDM.email}`,\n          companyDomain: enterpriseUser.companyDomain,\n        });\n\n        res.json({ success: true, result });\n      } catch (error) {\n        console.error(\"Error replacing DM:\", error);\n        res.status(500).json({ message: \"Failed to replace DM\" });\n      }\n    },\n  );\n\n  // Flag a DM for quality issues\n  app.post(\n    \"/api/company-dms/flag\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n        const { dmId, flagType, description, severity } = req.body;\n\n        if (!dmId || !flagType || !description) {\n          return res.status(400).json({\n            message: \"DM ID, flag type, and description are required\",\n          });\n        }\n\n        const flagData = {\n          dmId,\n          flaggedBy: enterpriseUser.id,\n          companyDomain: enterpriseUser.companyDomain,\n          flagType,\n          description,\n          severity: severity || \"medium\",\n          status: \"open\",\n        };\n\n        const flag = await storage.createDMFlag(flagData);\n\n        // Log activity\n        await storage.createActivityLog({\n          action: \"FLAG_DM\",\n          performedBy: enterpriseUser.id,\n          targetUser: dmId,\n          details: `Flagged DM for: ${flagType} - ${description}`,\n          companyDomain: enterpriseUser.companyDomain,\n        });\n\n        res.status(201).json({ success: true, flag });\n      } catch (error) {\n        console.error(\"Error flagging DM:\", error);\n        res.status(500).json({ message: \"Failed to flag DM\" });\n      }\n    },\n  );\n\n  // Update DM verification status\n  app.patch(\n    \"/api/company-dms/:dmId/verification\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n        const { dmId } = req.params;\n        const { verificationStatus } = req.body;\n\n        const validStatuses = [\"pending\", \"verified\", \"rejected\", \"suspended\"];\n        if (!validStatuses.includes(verificationStatus)) {\n          return res\n            .status(400)\n            .json({ message: \"Invalid verification status\" });\n        }\n\n        const result = await storage.updateCompanyDM(dmId, {\n          verificationStatus,\n        });\n\n        if (!result) {\n          return res.status(404).json({ message: \"DM not found\" });\n        }\n\n        // Log activity\n        await storage.createActivityLog({\n          action: \"UPDATE_DM_VERIFICATION\",\n          performedBy: enterpriseUser.id,\n          targetUser: dmId,\n          details: `Updated DM verification status to: ${verificationStatus}`,\n          companyDomain: enterpriseUser.companyDomain,\n        });\n\n        res.json({ success: true, dm: result });\n      } catch (error) {\n        console.error(\"Error updating DM verification:\", error);\n        res.status(500).json({ message: \"Failed to update DM verification\" });\n      }\n    },\n  );\n\n  // Get DM flags\n  app.get(\n    \"/api/company-dms/:dmId/flags\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const { dmId } = req.params;\n        const flags = await storage.getDMFlags(dmId);\n        res.json(flags);\n      } catch (error) {\n        console.error(\"Error getting DM flags:\", error);\n        res.status(500).json({ message: \"Failed to get DM flags\" });\n      }\n    },\n  );\n\n  // ===== CALL ACTIVITY LOG ROUTES =====\n\n  // Get company call logs with filtering\n  app.get(\"/api/company-calls\", requireEnterpriseAdmin, async (req, res) => {\n    try {\n      const enterpriseUser = (req as any).enterpriseUser;\n      const companyDomain = enterpriseUser.companyDomain;\n      const { rep, dm, outcome, startDate, endDate, search } = req.query;\n\n      let callLogs = await storage.getCallLogsByCompany(companyDomain);\n\n      // Apply filters\n      if (rep) {\n        callLogs = callLogs.filter(\n          (log) =>\n            (log.salesRepId?.id || log.salesRepId?.toString()) === rep ||\n            (log.salesRepId?.email &&\n              log.salesRepId.email.includes(rep as string)),\n        );\n      }\n\n      if (dm) {\n        callLogs = callLogs.filter(\n          (log) =>\n            (log.decisionMakerId?.id || log.decisionMakerId?.toString()) ===\n              dm ||\n            (log.decisionMakerId?.email &&\n              log.decisionMakerId.email.includes(dm as string)),\n        );\n      }\n\n      if (outcome) {\n        callLogs = callLogs.filter((log) => log.status === outcome);\n      }\n\n      if (startDate) {\n        const start = new Date(startDate as string);\n        callLogs = callLogs.filter((log) => new Date(log.scheduledAt) >= start);\n      }\n\n      if (endDate) {\n        const end = new Date(endDate as string);\n        end.setHours(23, 59, 59, 999); // End of day\n        callLogs = callLogs.filter((log) => new Date(log.scheduledAt) <= end);\n      }\n\n      if (search) {\n        const searchTerm = (search as string).toLowerCase();\n        callLogs = callLogs.filter(\n          (log) =>\n            (log.salesRepId?.firstName &&\n              log.salesRepId.firstName.toLowerCase().includes(searchTerm)) ||\n            (log.salesRepId?.lastName &&\n              log.salesRepId.lastName.toLowerCase().includes(searchTerm)) ||\n            (log.salesRepId?.email &&\n              log.salesRepId.email.toLowerCase().includes(searchTerm)) ||\n            (log.decisionMakerId?.firstName &&\n              log.decisionMakerId.firstName\n                .toLowerCase()\n                .includes(searchTerm)) ||\n            (log.decisionMakerId?.lastName &&\n              log.decisionMakerId.lastName\n                .toLowerCase()\n                .includes(searchTerm)) ||\n            (log.decisionMakerId?.email &&\n              log.decisionMakerId.email.toLowerCase().includes(searchTerm)) ||\n            (log.feedback?.summary &&\n              log.feedback.summary.toLowerCase().includes(searchTerm)) ||\n            (log.notes && log.notes.toLowerCase().includes(searchTerm)),\n        );\n      }\n\n      // Enrich call logs with additional data\n      const enrichedCallLogs = callLogs.map((log) => {\n        const repName = log.salesRepId\n          ? `${log.salesRepId.firstName} ${log.salesRepId.lastName}`\n          : \"Unknown Rep\";\n        const dmName = log.decisionMakerId\n          ? `${log.decisionMakerId.firstName} ${log.decisionMakerId.lastName}`\n          : \"Unknown DM\";\n\n        return {\n          id: log.id,\n          repToDM: `${repName} ↔ ${dmName}`,\n          repDetails: {\n            id: log.salesRepId?.id || log.salesRepId,\n            name: repName,\n            email: log.salesRepId?.email || \"N/A\",\n            company: log.salesRepId?.company || companyDomain,\n          },\n          dmDetails: {\n            id: log.decisionMakerId?.id || log.decisionMakerId,\n            name: dmName,\n            email: log.decisionMakerId?.email || \"N/A\",\n            title: log.decisionMakerId?.jobTitle || \"N/A\",\n            company: log.decisionMakerId?.company || \"N/A\",\n          },\n          scheduledAt: log.scheduledAt,\n          completedAt: log.completedAt,\n          duration: log.duration,\n          status: log.status,\n          outcome: log.outcome || log.status,\n          feedback: {\n            rating: log.feedback?.rating,\n            summary:\n              log.feedback?.summary ||\n              log.feedback?.notes ||\n              \"No feedback provided\",\n            nextSteps: log.feedback?.nextSteps,\n            followUpRequired: log.feedback?.followUpRequired,\n          },\n          notes: log.notes,\n          flagged: log.flagged || false,\n          flagReason: log.flagReason,\n          meetingUrl: log.meetingUrl,\n          recordingUrl: log.recordingUrl,\n        };\n      });\n\n      // Sort by scheduled date (most recent first)\n      enrichedCallLogs.sort(\n        (a, b) =>\n          new Date(b.scheduledAt).getTime() - new Date(a.scheduledAt).getTime(),\n      );\n\n      res.json(enrichedCallLogs);\n    } catch (error) {\n      console.error(\"Error getting company call logs:\", error);\n      res.status(500).json({ message: \"Failed to get company call logs\" });\n    }\n  });\n\n  // Get call analytics for dashboard\n  app.get(\n    \"/api/company-calls/analytics\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n        const companyDomain = enterpriseUser.companyDomain;\n\n        const callLogs = await storage.getCallLogsByCompany(companyDomain);\n\n        const analytics = {\n          totalCalls: callLogs.length,\n          completedCalls: callLogs.filter((log) => log.status === \"completed\")\n            .length,\n          missedCalls: callLogs.filter(\n            (log) => log.status === \"missed\" || log.status === \"cancelled\",\n          ).length,\n          flaggedCalls: callLogs.filter((log) => log.flagged).length,\n          averageRating: 0,\n          callsByOutcome: {\n            completed: callLogs.filter((log) => log.status === \"completed\")\n              .length,\n            missed: callLogs.filter((log) => log.status === \"missed\").length,\n            cancelled: callLogs.filter((log) => log.status === \"cancelled\")\n              .length,\n            scheduled: callLogs.filter((log) => log.status === \"scheduled\")\n              .length,\n          },\n          recentActivity: callLogs\n            .sort(\n              (a, b) =>\n                new Date(b.scheduledAt).getTime() -\n                new Date(a.scheduledAt).getTime(),\n            )\n            .slice(0, 5)\n            .map((log) => ({\n              rep: log.salesRepId\n                ? `${log.salesRepId.firstName} ${log.salesRepId.lastName}`\n                : \"Unknown\",\n              dm: log.decisionMakerId\n                ? `${log.decisionMakerId.firstName} ${log.decisionMakerId.lastName}`\n                : \"Unknown\",\n              status: log.status,\n              scheduledAt: log.scheduledAt,\n            })),\n        };\n\n        // Calculate average rating\n        const ratedCalls = callLogs.filter((log) => log.feedback?.rating);\n        if (ratedCalls.length > 0) {\n          analytics.averageRating =\n            ratedCalls.reduce((sum, log) => sum + log.feedback.rating, 0) /\n            ratedCalls.length;\n        }\n\n        res.json(analytics);\n      } catch (error) {\n        console.error(\"Error getting call analytics:\", error);\n        res.status(500).json({ message: \"Failed to get call analytics\" });\n      }\n    },\n  );\n\n  // Flag a call for review\n  app.post(\n    \"/api/company-calls/:callId/flag\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n        const { callId } = req.params;\n        const { reason, severity } = req.body;\n\n        if (!reason) {\n          return res.status(400).json({ message: \"Flag reason is required\" });\n        }\n\n        const result = await storage.updateCallLog(callId, {\n          flagged: true,\n          flagReason: reason,\n          flagSeverity: severity || \"medium\",\n          flaggedBy: enterpriseUser.id,\n          flaggedAt: new Date(),\n        });\n\n        if (!result) {\n          return res.status(404).json({ message: \"Call not found\" });\n        }\n\n        // Log activity\n        await storage.createActivityLog({\n          action: \"FLAG_CALL\",\n          performedBy: enterpriseUser.id,\n          targetUser: result.salesRepId?.id || result.salesRepId,\n          details: `Flagged call for review: ${reason}`,\n          companyDomain: enterpriseUser.companyDomain,\n        });\n\n        res.json({ success: true, call: result });\n      } catch (error) {\n        console.error(\"Error flagging call:\", error);\n        res.status(500).json({ message: \"Failed to flag call\" });\n      }\n    },\n  );\n\n  // ===== PERFORMANCE ANALYTICS ROUTES =====\n\n  // Get comprehensive company analytics\n  app.get(\n    \"/api/company-analytics\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n        const companyDomain = enterpriseUser.companyDomain;\n\n        // Get all data sources\n        const [callLogs, feedback, companyUsers, companyDMs] =\n          await Promise.all([\n            storage.getCallLogsByCompany(companyDomain),\n            storage.getFeedbackByCompany(companyDomain),\n            storage.getUsersByCompanyDomain(companyDomain),\n            storage.getCompanyDMs(companyDomain),\n          ]);\n\n        const salesReps = companyUsers.filter(\n          (user) => user.role === \"sales_rep\",\n        );\n\n        // Calculate average rep feedback score\n        const repFeedbackScores = {};\n        feedback.forEach((fb) => {\n          const repId = fb.salesRepId?.id || fb.salesRepId;\n          if (!repFeedbackScores[repId]) {\n            repFeedbackScores[repId] = { total: 0, count: 0 };\n          }\n          if (fb.rating) {\n            repFeedbackScores[repId].total += fb.rating;\n            repFeedbackScores[repId].count += 1;\n          }\n        });\n\n        const avgRepFeedbackScore =\n          Object.values(repFeedbackScores).length > 0\n            ? Object.values(repFeedbackScores).reduce(\n                (sum, rep) => sum + (rep.count > 0 ? rep.total / rep.count : 0),\n                0,\n              ) / Object.values(repFeedbackScores).length\n            : 0;\n\n        // Calculate average DM engagement score\n        const avgDMEngagementScore =\n          companyDMs.length > 0\n            ? companyDMs.reduce(\n                (sum, dm) => sum + (dm.engagementScore || 0),\n                0,\n              ) / companyDMs.length\n            : 0;\n\n        // Calculate no-show rate\n        const totalScheduledCalls = callLogs.filter((log) =>\n          [\"scheduled\", \"completed\", \"missed\", \"cancelled\"].includes(\n            log.status,\n          ),\n        ).length;\n        const noShowCalls = callLogs.filter(\n          (log) => log.status === \"missed\" || log.outcome === \"no_show\",\n        ).length;\n        const noShowRate =\n          totalScheduledCalls > 0\n            ? (noShowCalls / totalScheduledCalls) * 100\n            : 0;\n\n        // Calculate top performers\n        const repPerformance = salesReps.map((rep) => {\n          const repId = rep.id;\n          const repCalls = callLogs.filter(\n            (log) => (log.salesRepId?.id || log.salesRepId) === repId,\n          );\n          const repFeedback = feedback.filter(\n            (fb) => (fb.salesRepId?.id || fb.salesRepId) === repId,\n          );\n          const repDMs = companyDMs.filter(\n            (dm) => (dm.linkedRepId?.id || dm.linkedRepId) === repId,\n          );\n\n          const completedCalls = repCalls.filter(\n            (call) => call.status === \"completed\",\n          ).length;\n          const avgFeedback =\n            repFeedback.length > 0\n              ? repFeedback\n                  .filter((fb) => fb.rating)\n                  .reduce((sum, fb) => sum + fb.rating, 0) /\n                repFeedback.filter((fb) => fb.rating).length\n              : 0;\n\n          return {\n            id: repId,\n            name: `${rep.firstName} ${rep.lastName}`,\n            email: rep.email,\n            totalCalls: repCalls.length,\n            completedCalls,\n            avgFeedback: avgFeedback || 0,\n            dmInvites: repDMs.length,\n            successRate:\n              repCalls.length > 0\n                ? (completedCalls / repCalls.length) * 100\n                : 0,\n          };\n        });\n\n        // Sort top performers by different metrics\n        const topPerformersByCalls = [...repPerformance]\n          .sort((a, b) => b.completedCalls - a.completedCalls)\n          .slice(0, 5);\n\n        const topPerformersByFeedback = [...repPerformance]\n          .sort((a, b) => b.avgFeedback - a.avgFeedback)\n          .slice(0, 5);\n\n        const topPerformersByDMInvites = [...repPerformance]\n          .sort((a, b) => b.dmInvites - a.dmInvites)\n          .slice(0, 5);\n\n        // Monthly performance trends (last 6 months)\n        const monthlyData = [];\n        for (let i = 5; i >= 0; i--) {\n          const monthStart = new Date();\n          monthStart.setMonth(monthStart.getMonth() - i);\n          monthStart.setDate(1);\n          monthStart.setHours(0, 0, 0, 0);\n\n          const monthEnd = new Date(monthStart);\n          monthEnd.setMonth(monthEnd.getMonth() + 1);\n          monthEnd.setDate(0);\n          monthEnd.setHours(23, 59, 59, 999);\n\n          const monthCalls = callLogs.filter((log) => {\n            const callDate = new Date(log.scheduledAt);\n            return callDate >= monthStart && callDate <= monthEnd;\n          });\n\n          const monthFeedback = feedback.filter((fb) => {\n            const fbDate = new Date(fb.createdAt);\n            return fbDate >= monthStart && fbDate <= monthEnd;\n          });\n\n          const avgRating =\n            monthFeedback.length > 0\n              ? monthFeedback\n                  .filter((fb) => fb.rating)\n                  .reduce((sum, fb) => sum + fb.rating, 0) /\n                monthFeedback.filter((fb) => fb.rating).length\n              : 0;\n\n          monthlyData.push({\n            month: monthStart.toLocaleDateString(\"en-US\", {\n              month: \"short\",\n              year: \"numeric\",\n            }),\n            totalCalls: monthCalls.length,\n            completedCalls: monthCalls.filter(\n              (call) => call.status === \"completed\",\n            ).length,\n            avgFeedback: avgRating || 0,\n            successRate:\n              monthCalls.length > 0\n                ? (monthCalls.filter((call) => call.status === \"completed\")\n                    .length /\n                    monthCalls.length) *\n                  100\n                : 0,\n          });\n        }\n\n        // Call outcome distribution\n        const outcomeDistribution = {\n          completed: callLogs.filter((log) => log.status === \"completed\")\n            .length,\n          missed: callLogs.filter((log) => log.status === \"missed\").length,\n          cancelled: callLogs.filter((log) => log.status === \"cancelled\")\n            .length,\n          scheduled: callLogs.filter((log) => log.status === \"scheduled\")\n            .length,\n        };\n\n        // DM verification status distribution\n        const dmVerificationDistribution = {\n          verified: companyDMs.filter(\n            (dm) => dm.verificationStatus === \"verified\",\n          ).length,\n          pending: companyDMs.filter(\n            (dm) => dm.verificationStatus === \"pending\",\n          ).length,\n          rejected: companyDMs.filter(\n            (dm) => dm.verificationStatus === \"rejected\",\n          ).length,\n          suspended: companyDMs.filter(\n            (dm) => dm.verificationStatus === \"suspended\",\n          ).length,\n        };\n\n        const analytics = {\n          overview: {\n            avgRepFeedbackScore: Number(avgRepFeedbackScore.toFixed(2)),\n            avgDMEngagementScore: Number(avgDMEngagementScore.toFixed(1)),\n            noShowRate: Number(noShowRate.toFixed(1)),\n            totalCalls: callLogs.length,\n            totalDMs: companyDMs.length,\n            totalReps: salesReps.length,\n            completionRate:\n              totalScheduledCalls > 0\n                ? Number(\n                    (\n                      (callLogs.filter((log) => log.status === \"completed\")\n                        .length /\n                        totalScheduledCalls) *\n                      100\n                    ).toFixed(1),\n                  )\n                : 0,\n          },\n          topPerformers: {\n            byCalls: topPerformersByCalls,\n            byFeedback: topPerformersByFeedback,\n            byDMInvites: topPerformersByDMInvites,\n          },\n          trends: {\n            monthly: monthlyData,\n          },\n          distributions: {\n            callOutcomes: outcomeDistribution,\n            dmVerification: dmVerificationDistribution,\n          },\n          repPerformance: repPerformance,\n        };\n\n        res.json(analytics);\n      } catch (error) {\n        console.error(\"Error getting company analytics:\", error);\n        res.status(500).json({ message: \"Failed to get company analytics\" });\n      }\n    },\n  );\n\n  // Export analytics data as CSV\n  app.get(\n    \"/api/company-analytics/export\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n        const companyDomain = enterpriseUser.companyDomain;\n        const { type = \"overview\" } = req.query;\n\n        // Get all data sources\n        const [callLogs, feedback, companyUsers, companyDMs] =\n          await Promise.all([\n            storage.getCallLogsByCompany(companyDomain),\n            storage.getFeedbackByCompany(companyDomain),\n            storage.getUsersByCompanyDomain(companyDomain),\n            storage.getCompanyDMs(companyDomain),\n          ]);\n\n        let csvData = \"\";\n        const timestamp = new Date().toISOString().split(\"T\")[0];\n\n        if (type === \"rep_performance\") {\n          // Export rep performance data\n          const salesReps = companyUsers.filter(\n            (user) => user.role === \"sales_rep\",\n          );\n\n          csvData =\n            \"Rep Name,Email,Total Calls,Completed Calls,Success Rate (%),Avg Feedback,DM Invites,Last Activity\\n\";\n\n          salesReps.forEach((rep) => {\n            const repId = rep.id;\n            const repCalls = callLogs.filter(\n              (log) => (log.salesRepId?.id || log.salesRepId) === repId,\n            );\n            const repFeedback = feedback.filter(\n              (fb) => (fb.salesRepId?.id || fb.salesRepId) === repId,\n            );\n            const repDMs = companyDMs.filter(\n              (dm) => (dm.linkedRepId?.id || dm.linkedRepId) === repId,\n            );\n\n            const completedCalls = repCalls.filter(\n              (call) => call.status === \"completed\",\n            ).length;\n            const successRate =\n              repCalls.length > 0\n                ? (completedCalls / repCalls.length) * 100\n                : 0;\n            const avgFeedback =\n              repFeedback.length > 0\n                ? repFeedback\n                    .filter((fb) => fb.rating)\n                    .reduce((sum, fb) => sum + fb.rating, 0) /\n                  repFeedback.filter((fb) => fb.rating).length\n                : 0;\n\n            const lastActivity =\n              repCalls.length > 0\n                ? new Date(\n                    Math.max(\n                      ...repCalls.map((call) => new Date(call.scheduledAt)),\n                    ),\n                  ).toLocaleDateString()\n                : \"N/A\";\n\n            csvData += `\"${rep.firstName} ${rep.lastName}\",\"${rep.email}\",${repCalls.length},${completedCalls},${successRate.toFixed(1)},${avgFeedback.toFixed(1)},${repDMs.length},\"${lastActivity}\"\\n`;\n          });\n\n          res.setHeader(\"Content-Type\", \"text/csv\");\n          res.setHeader(\n            \"Content-Disposition\",\n            `attachment; filename=\"rep_performance_${timestamp}.csv\"`,\n          );\n        } else if (type === \"call_logs\") {\n          // Export call logs data\n          csvData =\n            \"Date,Time,Sales Rep,Decision Maker,Duration (min),Status,Outcome,Rating,Feedback Summary\\n\";\n\n          callLogs.forEach((log) => {\n            const scheduledDate = new Date(log.scheduledAt);\n            const repName = log.salesRepId\n              ? `${log.salesRepId.firstName} ${log.salesRepId.lastName}`\n              : \"Unknown\";\n            const dmName = log.decisionMakerId\n              ? `${log.decisionMakerId.firstName} ${log.decisionMakerId.lastName}`\n              : \"Unknown\";\n            const rating = log.feedback?.rating || \"\";\n            const summary = (log.feedback?.summary || \"\").replace(/\"/g, '\"\"'); // Escape quotes in CSV\n\n            csvData += `\"${scheduledDate.toLocaleDateString()}\",\"${scheduledDate.toLocaleTimeString()}\",\"${repName}\",\"${dmName}\",${log.duration || 0},\"${log.status}\",\"${log.outcome || \"\"}\",\"${rating}\",\"${summary}\"\\n`;\n          });\n\n          res.setHeader(\"Content-Type\", \"text/csv\");\n          res.setHeader(\n            \"Content-Disposition\",\n            `attachment; filename=\"call_logs_${timestamp}.csv\"`,\n          );\n        } else {\n          // Export overview analytics\n          csvData = \"Metric,Value\\n\";\n          csvData += `Total Calls,${callLogs.length}\\n`;\n          csvData += `Completed Calls,${callLogs.filter((log) => log.status === \"completed\").length}\\n`;\n          csvData += `Missed Calls,${callLogs.filter((log) => log.status === \"missed\").length}\\n`;\n          csvData += `Total Decision Makers,${companyDMs.length}\\n`;\n          csvData += `Verified DMs,${companyDMs.filter((dm) => dm.verificationStatus === \"verified\").length}\\n`;\n          csvData += `Total Sales Reps,${companyUsers.filter((user) => user.role === \"sales_rep\").length}\\n`;\n\n          const totalScheduled = callLogs.filter((log) =>\n            [\"scheduled\", \"completed\", \"missed\", \"cancelled\"].includes(\n              log.status,\n            ),\n          ).length;\n          const noShows = callLogs.filter(\n            (log) => log.status === \"missed\",\n          ).length;\n          const noShowRate =\n            totalScheduled > 0 ? (noShows / totalScheduled) * 100 : 0;\n\n          csvData += `No-Show Rate (%),${noShowRate.toFixed(1)}\\n`;\n\n          res.setHeader(\"Content-Type\", \"text/csv\");\n          res.setHeader(\n            \"Content-Disposition\",\n            `attachment; filename=\"analytics_overview_${timestamp}.csv\"`,\n          );\n        }\n\n        res.send(csvData);\n      } catch (error) {\n        console.error(\"Error exporting analytics:\", error);\n        res.status(500).json({ message: \"Failed to export analytics\" });\n      }\n    },\n  );\n\n  // ===== ACCOUNT SETTINGS ROUTES =====\n\n  // Get company settings and plan information\n  app.get(\"/api/company-settings\", requireEnterpriseAdmin, async (req, res) => {\n    try {\n      const enterpriseUser = (req as any).enterpriseUser;\n      const companyDomain = enterpriseUser.companyDomain;\n\n      // Get company users to find admin contact\n      const companyUsers = await storage.getUsersByCompanyDomain(companyDomain);\n      const adminUser =\n        companyUsers.find((user) => user.role === \"enterprise_admin\") ||\n        enterpriseUser;\n\n      // Get company analytics for usage metrics\n      const [callLogs, companyDMs] = await Promise.all([\n        storage.getCallLogsByCompany(companyDomain),\n        storage.getCompanyDMs(companyDomain),\n      ]);\n\n      // Calculate usage metrics\n      const currentDate = new Date();\n      const currentMonthStart = new Date(\n        currentDate.getFullYear(),\n        currentDate.getMonth(),\n        1,\n      );\n      const currentMonthCalls = callLogs.filter(\n        (log) => new Date(log.scheduledAt) >= currentMonthStart,\n      ).length;\n\n      // Company information\n      const companySettings = {\n        company: {\n          name:\n            companyDomain.split(\".\")[0].replace(/^\\w/, (c) => c.toUpperCase()) +\n            \" Corp\",\n          domain: companyDomain,\n          verifiedDomain: companyDomain,\n          adminContact: {\n            name: `${adminUser.firstName} ${adminUser.lastName}`,\n            email: adminUser.email,\n            role: adminUser.role,\n            joinedDate: adminUser.createdAt || currentDate,\n          },\n          totalUsers: companyUsers.length,\n          salesReps: companyUsers.filter((user) => user.role === \"sales_rep\")\n            .length,\n          decisionMakers: companyDMs.length,\n        },\n        plan: {\n          type: \"Enterprise Pro\",\n          status: \"active\",\n          billingCycle: \"monthly\",\n          currentPeriodStart: new Date(\n            currentDate.getFullYear(),\n            currentDate.getMonth(),\n            1,\n          ),\n          currentPeriodEnd: new Date(\n            currentDate.getFullYear(),\n            currentDate.getMonth() + 1,\n            0,\n          ),\n          renewalDate: new Date(\n            currentDate.getFullYear(),\n            currentDate.getMonth() + 1,\n            1,\n          ),\n          features: [\n            \"Unlimited sales reps\",\n            \"Advanced analytics dashboard\",\n            \"DM tracking and verification\",\n            \"Call activity monitoring\",\n            \"Performance analytics\",\n            \"CSV data export\",\n            \"Priority customer support\",\n            \"Team management tools\",\n            \"Credit usage monitoring\",\n          ],\n          limits: {\n            monthlyCallCredits: 1000,\n            dmReferrals: 100,\n            analyticsRetention: \"12 months\",\n            supportLevel: \"Priority\",\n          },\n          pricing: {\n            basePrice: 199,\n            currency: \"USD\",\n            perUser: false,\n          },\n        },\n        usage: {\n          currentMonth: {\n            calls: currentMonthCalls,\n            dmsReferred: companyDMs.filter(\n              (dm) => new Date(dm.referralDate) >= currentMonthStart,\n            ).length,\n            creditUsage: currentMonthCalls,\n            remainingCredits: Math.max(0, 1000 - currentMonthCalls),\n          },\n          billingHistory: [\n            {\n              date: new Date(\n                currentDate.getFullYear(),\n                currentDate.getMonth(),\n                1,\n              ),\n              amount: 199,\n              status: \"paid\",\n              description: \"Enterprise Pro - Monthly\",\n            },\n            {\n              date: new Date(\n                currentDate.getFullYear(),\n                currentDate.getMonth() - 1,\n                1,\n              ),\n              amount: 199,\n              status: \"paid\",\n              description: \"Enterprise Pro - Monthly\",\n            },\n            {\n              date: new Date(\n                currentDate.getFullYear(),\n                currentDate.getMonth() - 2,\n                1,\n              ),\n              amount: 199,\n              status: \"paid\",\n              description: \"Enterprise Pro - Monthly\",\n            },\n          ],\n        },\n        support: {\n          contactEmail: \"support@naeborly.com\",\n          helpCenterUrl: \"https://help.naeborly.com\",\n          statusPageUrl: \"https://status.naeborly.com\",\n          prioritySupport: true,\n          accountManager: {\n            name: \"Sarah Johnson\",\n            email: \"sarah.johnson@naeborly.com\",\n            phone: \"+1 (555) 123-4567\",\n          },\n        },\n      };\n\n      res.json(companySettings);\n    } catch (error) {\n      console.error(\"Error getting company settings:\", error);\n      res.status(500).json({ message: \"Failed to get company settings\" });\n    }\n  });\n\n  // Get Stripe billing portal link\n  app.get(\n    \"/api/billing-portal-link\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n\n        // In a real implementation, you would:\n        // 1. Get the customer's Stripe customer ID from your database\n        // 2. Create a billing portal session using Stripe API\n        // 3. Return the portal URL\n\n        // For demo purposes, we'll return a mock portal link\n        const portalLink = {\n          url: \"https://billing.stripe.com/p/login/test_demo_portal\",\n          expires: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours\n          customerId: \"cus_demo_customer_id\",\n        };\n\n        // Log activity\n        await storage.createActivityLog({\n          action: \"ACCESS_BILLING_PORTAL\",\n          performedBy: enterpriseUser.id,\n          details: \"Accessed Stripe billing portal\",\n          companyDomain: enterpriseUser.companyDomain,\n        });\n\n        res.json(portalLink);\n      } catch (error) {\n        console.error(\"Error creating billing portal link:\", error);\n        res\n          .status(500)\n          .json({ message: \"Failed to create billing portal link\" });\n      }\n    },\n  );\n\n  // Update company settings\n  app.patch(\n    \"/api/company-settings\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = (req as any).enterpriseUser;\n        const { companyName, adminContact } = req.body;\n\n        // In a real implementation, you would update the company record\n        // For now, we'll just log the activity and return success\n\n        await storage.createActivityLog({\n          action: \"UPDATE_COMPANY_SETTINGS\",\n          performedBy: enterpriseUser.id,\n          details: `Updated company settings: ${companyName ? \"company name, \" : \"\"}${adminContact ? \"admin contact\" : \"\"}`,\n          companyDomain: enterpriseUser.companyDomain,\n        });\n\n        res.json({\n          success: true,\n          message: \"Company settings updated successfully\",\n        });\n      } catch (error) {\n        console.error(\"Error updating company settings:\", error);\n        res.status(500).json({ message: \"Failed to update company settings\" });\n      }\n    },\n  );\n\n  // Contact support\n  app.post(\"/api/contact-support\", requireEnterpriseAdmin, async (req, res) => {\n    try {\n      const enterpriseUser = (req as any).enterpriseUser;\n      const { subject, message, priority, category } = req.body;\n\n      if (!subject || !message) {\n        return res\n          .status(400)\n          .json({ message: \"Subject and message are required\" });\n      }\n\n      // In a real implementation, you would:\n      // 1. Create a support ticket in your helpdesk system\n      // 2. Send email notification to support team\n      // 3. Send confirmation email to user\n\n      const supportTicket = {\n        id: `TICKET-${Date.now()}`,\n        subject,\n        message,\n        priority: priority || \"medium\",\n        category: category || \"general\",\n        status: \"open\",\n        submittedBy: {\n          name: `${enterpriseUser.firstName} ${enterpriseUser.lastName}`,\n          email: enterpriseUser.email,\n          company: enterpriseUser.companyDomain,\n        },\n        submittedAt: new Date(),\n        estimatedResponse:\n          priority === \"high\"\n            ? \"2 hours\"\n            : priority === \"medium\"\n              ? \"8 hours\"\n              : \"24 hours\",\n      };\n\n      // Log activity\n      await storage.createActivityLog({\n        action: \"CONTACT_SUPPORT\",\n        performedBy: enterpriseUser.id,\n        details: `Submitted support ticket: ${subject}`,\n        companyDomain: enterpriseUser.companyDomain,\n      });\n\n      res.status(201).json({\n        success: true,\n        ticket: supportTicket,\n        message: \"Support ticket submitted successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error submitting support ticket:\", error);\n      res.status(500).json({ message: \"Failed to submit support ticket\" });\n    }\n  });\n\n  // ===== CALENDAR & BOOKING ROUTES =====\n\n  // Get DM availability for calendar view\n  app.get(\n    \"/api/calendar/dm-availability/:dmId\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const { dmId } = req.params;\n        const { startDate, endDate } = req.query;\n        const currentUser = await storage.getUserById(req.user!.userId);\n\n        // Get DM availability slots\n        const dm = await storage.getUserById(dmId);\n        if (!dm || dm.role !== \"decision_maker\") {\n          return res.status(404).json({ message: \"Decision maker not found\" });\n        }\n\n        // Generate availability slots for the date range\n        const start = new Date(startDate as string);\n        const end = new Date(endDate as string);\n        const availabilitySlots = [];\n        const bookedSlots = await storage.getCallsByDateRange(dmId, start, end);\n\n        // Get Google Calendar events if user has calendar integration\n        let googleCalendarEvents = [];\n        if (\n          currentUser.calendarIntegrationEnabled &&\n          currentUser.googleCalendarTokens\n        ) {\n          try {\n            const { setCredentials, getCalendarEvents } = await import(\n              \"./google-calendar\"\n            );\n            setCredentials(currentUser.googleCalendarTokens);\n\n            googleCalendarEvents = await getCalendarEvents(\n              \"primary\",\n              start.toISOString(),\n              end.toISOString(),\n            );\n          } catch (calendarError) {\n            console.error(\n              \"Error fetching Google Calendar events:\",\n              calendarError,\n            );\n          }\n        }\n\n        // Generate time slots for each day (9 AM to 5 PM, 30-minute intervals)\n        for (\n          let date = new Date(start);\n          date <= end;\n          date.setDate(date.getDate() + 1)\n        ) {\n          // Skip weekends for business meetings\n          if (date.getDay() === 0 || date.getDay() === 6) continue;\n\n          for (let hour = 9; hour < 17; hour++) {\n            for (let minute = 0; minute < 60; minute += 30) {\n              const slotStart = new Date(date);\n              slotStart.setHours(hour, minute, 0, 0);\n\n              const slotEnd = new Date(slotStart);\n              slotEnd.setMinutes(slotEnd.getMinutes() + 30);\n\n              // Check if slot is already booked in database\n              const isBookedInDb = bookedSlots.some((booking) => {\n                const bookingStart = new Date(booking.scheduledAt);\n                return (\n                  Math.abs(bookingStart.getTime() - slotStart.getTime()) <\n                  30 * 60 * 1000\n                );\n              });\n\n              // Check if slot conflicts with Google Calendar events\n              const hasCalendarConflict = googleCalendarEvents.some((event) => {\n                if (!event.start?.dateTime || !event.end?.dateTime)\n                  return false;\n                const eventStart = new Date(event.start.dateTime);\n                const eventEnd = new Date(event.end.dateTime);\n\n                // Check if times overlap\n                return slotStart < eventEnd && slotEnd > eventStart;\n              });\n\n              const isBooked = isBookedInDb || hasCalendarConflict;\n\n              availabilitySlots.push({\n                id: `${dmId}-${slotStart.getTime()}`,\n                dmId,\n                dmName: `${dm.firstName} ${dm.lastName}`,\n                startTime: slotStart.toISOString(),\n                endTime: slotEnd.toISOString(),\n                available: !isBooked,\n                booked: isBooked,\n                bookingId: isBookedInDb\n                  ? bookedSlots.find(\n                      (b) =>\n                        Math.abs(\n                          new Date(b.scheduledAt).getTime() -\n                            slotStart.getTime(),\n                        ) <\n                        30 * 60 * 1000,\n                    )?.id\n                  : null,\n                conflictType: hasCalendarConflict\n                  ? \"google_calendar\"\n                  : isBookedInDb\n                    ? \"platform_booking\"\n                    : null,\n              });\n            }\n          }\n        }\n\n        res.json({\n          dmId,\n          dmName: `${dm.firstName} ${dm.lastName}`,\n          dmTitle: dm.jobTitle,\n          dmCompany: dm.company,\n          availabilitySlots,\n          calendarIntegrated: !!(\n            currentUser.calendarIntegrationEnabled &&\n            currentUser.googleCalendarTokens\n          ),\n        });\n      } catch (error) {\n        console.error(\"Error getting DM availability:\", error);\n        res.status(500).json({ message: \"Failed to get DM availability\" });\n      }\n    },\n  );\n\n  // Get all available DMs for calendar selection\n  app.get(\n    \"/api/calendar/available-dms\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const currentUser = await storage.getUserById(req.user!.userId);\n        console.log(\"Current user role:\", currentUser.role);\n\n        let availableDMs;\n        if (currentUser.role === \"sales_rep\") {\n          // Sales reps can see all active decision makers for calendar booking\n          const allDMs = await storage.getUsersByRole(\"decision_maker\");\n          console.log(\"All DMs found:\", allDMs.length);\n          console.log(\n            \"Sample DM:\",\n            allDMs[0]\n              ? {\n                  id: allDMs[0].id,\n                  role: allDMs[0].role,\n                  isActive: allDMs[0].isActive,\n                  invitationStatus: allDMs[0].invitationStatus,\n                }\n              : \"None\",\n          );\n\n          availableDMs = allDMs.filter((dm) => dm.isActive);\n          console.log(\"Filtered available DMs:\", availableDMs.length);\n        } else {\n          // Enterprise admins can see all DMs in their company\n          availableDMs = await storage.getUsersByRole(\"decision_maker\");\n          if (currentUser.companyDomain) {\n            availableDMs = availableDMs.filter(\n              (dm) => dm.companyDomain === currentUser.companyDomain,\n            );\n          }\n        }\n\n        const dmsWithDetails = availableDMs\n          .filter((dm) => dm)\n          .map((dm) => ({\n            id: dm.id || dm._id,\n            name: `${dm.firstName} ${dm.lastName}`,\n            email: dm.email,\n            title: dm.jobTitle,\n            company: dm.company,\n            industry: dm.industry,\n            department: dm.department,\n            profileImage: dm.profileImageUrl || null,\n          }));\n\n        console.log(\"Final DMs with details:\", dmsWithDetails.length);\n        res.json(dmsWithDetails);\n      } catch (error) {\n        console.error(\"Error getting available DMs:\", error);\n        res.status(500).json({ message: \"Failed to get available DMs\" });\n      }\n    },\n  );\n\n  // Book a meeting slot\n  app.post(\"/api/calendar/book-slot\", authenticateToken, async (req, res) => {\n    try {\n      const currentUser = await storage.getUserById(req.user!.userId);\n      const { dmId, startTime, endTime, agenda, notes } = req.body;\n\n      // Validate DM exists and is available\n      const dm = await storage.getUserById(dmId);\n      if (!dm || dm.role !== \"decision_maker\") {\n        return res.status(404).json({ message: \"Decision maker not found\" });\n      }\n\n      // Check if slot is still available\n      const existingBooking = await storage.getCallByTime(\n        dmId,\n        new Date(startTime),\n      );\n      if (existingBooking) {\n        return res\n          .status(409)\n          .json({ message: \"This time slot is no longer available\" });\n      }\n\n      // Check Google Calendar integration and availability\n      let googleCalendarEventId = null;\n      let googleMeetLink = null;\n      if (\n        currentUser.calendarIntegrationEnabled &&\n        currentUser.googleCalendarTokens\n      ) {\n        try {\n          // Set up Google Calendar with user's tokens\n          const { setCredentials, createCalendarEvent, refreshAccessToken } =\n            await import(\"./google-calendar\");\n\n          // Check if token is expired and refresh if needed\n          if (\n            currentUser.googleCalendarTokens.expiry_date &&\n            new Date(currentUser.googleCalendarTokens.expiry_date) < new Date()\n          ) {\n            console.log(\"Google Calendar token expired, refreshing...\");\n            try {\n              await refreshAccessToken(currentUser.id, storage);\n              // Get updated user with new tokens\n              const updatedUser = await storage.getUser(currentUser.id);\n              currentUser.googleCalendarTokens =\n                updatedUser.googleCalendarTokens;\n            } catch (refreshError) {\n              console.error(\"Token refresh failed:\", refreshError);\n              // If refresh fails, create booking without Google Calendar integration\n              const booking = await storage.createCall({\n                salesRepId: currentUser.id,\n                decisionMakerId: dmId,\n                scheduledAt: new Date(startTime),\n                endTime: new Date(endTime),\n                status: \"scheduled\",\n                agenda: agenda || \"Business discussion\",\n                notes: notes || \"\",\n                company: dm.company,\n                platform: \"calendar_booking\",\n                decisionMakerName: `${dm.firstName} ${dm.lastName}`,\n              });\n\n              // Send booking confirmation emails (fallback case)\n              try {\n                const scheduledDate = new Date(startTime);\n                const callDate = scheduledDate.toLocaleDateString(\"en-US\", {\n                  weekday: \"long\",\n                  year: \"numeric\",\n                  month: \"long\",\n                  day: \"numeric\",\n                });\n                const callTime = scheduledDate.toLocaleTimeString(\"en-US\", {\n                  hour: \"2-digit\",\n                  minute: \"2-digit\",\n                });\n                const timezone = \"America/New_York\";\n\n                // Send confirmation email to sales rep\n                await sendBookingConfirmationToRep(\n                  currentUser.email,\n                  currentUser.firstName,\n                  `${dm.firstName} ${dm.lastName}`,\n                  dm.firstName,\n                  dm.jobTitle || \"Decision Maker\",\n                  dm.company || \"Company\",\n                  callDate,\n                  callTime,\n                  timezone,\n                  null, // No Google Meet link in fallback case\n                );\n\n                // Send confirmation email to decision maker\n                await sendBookingConfirmationToDM(\n                  dm.email,\n                  dm.firstName,\n                  `${currentUser.firstName} ${currentUser.lastName}`,\n                  currentUser.jobTitle || \"Sales Representative\",\n                  currentUser.company || \"Company\",\n                  callDate,\n                  callTime,\n                  timezone,\n                  null, // No Google Meet link in fallback case\n                );\n\n                console.log(\n                  \"Booking confirmation emails sent successfully (fallback case)\",\n                );\n              } catch (emailError) {\n                console.error(\n                  \"Error sending booking confirmation emails (fallback):\",\n                  emailError,\n                );\n                // Don't fail the booking if email fails\n              }\n\n              return res.status(201).json({\n                success: true,\n                booking: {\n                  id: booking.id,\n                  dmName: `${dm.firstName} ${dm.lastName}`,\n                  startTime,\n                  endTime,\n                  status: \"scheduled\",\n                  agenda,\n                  confirmationCode: `MTG-${booking.id.slice(-6).toUpperCase()}`,\n                  calendarIntegrated: false,\n                  warning:\n                    \"Google Calendar integration temporarily unavailable. Please reconnect your calendar.\",\n                },\n                message:\n                  \"Meeting booked successfully (calendar integration unavailable)\",\n              });\n            }\n          }\n\n          setCredentials(currentUser.googleCalendarTokens);\n\n          console.log(\"Creating Google Calendar event...\");\n\n          // Create Google Calendar event directly (skip conflict checking for now)\n          const calendarEvent = await createCalendarEvent({\n            summary: `Meeting with ${dm.firstName} ${dm.lastName}`,\n            description: `Business Meeting\\n\\nAgenda: ${agenda || \"Business discussion\"}\\nNotes: ${notes || \"\"}\\n\\nDM: ${dm.firstName} ${dm.lastName} (${dm.email})\\nCompany: ${dm.company}`,\n            start: {\n              dateTime: startTime,\n              timeZone: \"America/New_York\", // You can make this configurable\n            },\n            end: {\n              dateTime: endTime,\n              timeZone: \"America/New_York\",\n            },\n            attendees: [\n              {\n                email: dm.email,\n                displayName: `${dm.firstName} ${dm.lastName}`,\n              },\n            ],\n          });\n\n          googleCalendarEventId = calendarEvent.id;\n          console.log(\"Google Calendar event created:\", googleCalendarEventId);\n\n          // Extract Google Meet link from calendar event\n          googleMeetLink =\n            calendarEvent.hangoutLink ||\n            calendarEvent.conferenceData?.entryPoints?.find(\n              (ep) => ep.entryPointType === \"video\",\n            )?.uri;\n          console.log(\"Google Meet link:\", googleMeetLink);\n        } catch (calendarError) {\n          console.error(\"Google Calendar integration error:\", calendarError);\n          // Continue without Google Calendar integration but log the error\n        }\n      }\n\n      // Create the meeting booking\n      const booking = await storage.createCall({\n        salesRepId: currentUser.id,\n        decisionMakerId: dmId,\n        scheduledAt: new Date(startTime),\n        endTime: new Date(endTime),\n        status: \"scheduled\",\n        agenda: agenda || \"Business discussion\",\n        notes: notes || \"\",\n        company: dm.company,\n        platform: \"calendar_booking\",\n        googleCalendarEventId: googleCalendarEventId,\n        googleMeetLink: googleMeetLink,\n        decisionMakerName: `${dm.firstName} ${dm.lastName}`,\n      });\n\n      // Log the booking activity\n      await storage.createActivityLog({\n        userId: currentUser.id,\n        action: \"BOOK_MEETING\",\n        entityType: \"call\",\n        entityId: booking.id,\n        details: `Booked meeting with ${dm.firstName} ${dm.lastName} for ${startTime}${googleCalendarEventId ? \" (Google Calendar event created)\" : \"\"}`,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      // Send booking confirmation emails\n      try {\n        const scheduledDate = new Date(startTime);\n        const callDate = scheduledDate.toLocaleDateString(\"en-US\", {\n          weekday: \"long\",\n          year: \"numeric\",\n          month: \"long\",\n          day: \"numeric\",\n        });\n        const callTime = scheduledDate.toLocaleTimeString(\"en-US\", {\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n        });\n        const timezone = \"America/New_York\"; // You can make this configurable based on user preferences\n\n        // Send confirmation email to sales rep\n        await sendBookingConfirmationToRep(\n          currentUser.email,\n          currentUser.firstName,\n          `${dm.firstName} ${dm.lastName}`,\n          dm.firstName,\n          dm.jobTitle || \"Decision Maker\",\n          dm.company || \"Company\",\n          callDate,\n          callTime,\n          timezone,\n          googleMeetLink,\n        );\n\n        // Send confirmation email to decision maker\n        await sendBookingConfirmationToDM(\n          dm.email,\n          dm.firstName,\n          `${currentUser.firstName} ${currentUser.lastName}`,\n          currentUser.jobTitle || \"Sales Representative\",\n          currentUser.company || \"Company\",\n          callDate,\n          callTime,\n          timezone,\n          googleMeetLink,\n        );\n\n        console.log(\"Booking confirmation emails sent successfully\");\n      } catch (emailError) {\n        console.error(\"Error sending booking confirmation emails:\", emailError);\n        // Don't fail the booking if email fails\n      }\n\n      res.status(201).json({\n        success: true,\n        booking: {\n          id: booking.id,\n          dmName: `${dm.firstName} ${dm.lastName}`,\n          startTime,\n          endTime,\n          status: \"scheduled\",\n          agenda,\n          confirmationCode: `MTG-${booking.id.slice(-6).toUpperCase()}`,\n          googleCalendarEventId,\n          googleMeetLink,\n          calendarIntegrated: !!googleCalendarEventId,\n        },\n        message: `Meeting booked successfully${googleCalendarEventId ? \" and added to your Google Calendar\" : \"\"}`,\n      });\n    } catch (error) {\n      console.error(\"Error booking meeting slot:\", error);\n      res.status(500).json({ message: \"Failed to book meeting slot\" });\n    }\n  });\n\n  // Cancel a booked meeting\n  app.delete(\n    \"/api/calendar/cancel-booking/:bookingId\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const { bookingId } = req.params;\n        const { reason } = req.body;\n        const currentUser = await storage.getUserById(req.user!.userId);\n\n        const booking = await storage.getCallById(bookingId);\n        if (!booking) {\n          return res.status(404).json({ message: \"Booking not found\" });\n        }\n\n        // Verify user can cancel this booking\n        if (\n          booking.salesRepId !== currentUser.id &&\n          currentUser.role !== \"enterprise_admin\"\n        ) {\n          return res.status(403).json({\n            message: \"You don't have permission to cancel this booking\",\n          });\n        }\n\n        // Cancel Google Calendar event if it exists\n        if (\n          booking.googleCalendarEventId &&\n          currentUser.calendarIntegrationEnabled &&\n          currentUser.googleCalendarTokens\n        ) {\n          try {\n            const { setCredentials, deleteCalendarEvent } = await import(\n              \"./google-calendar\"\n            );\n            setCredentials(currentUser.googleCalendarTokens);\n\n            await deleteCalendarEvent(booking.googleCalendarEventId);\n            console.log(\n              \"Google Calendar event deleted:\",\n              booking.googleCalendarEventId,\n            );\n          } catch (calendarError) {\n            console.error(\n              \"Error deleting Google Calendar event:\",\n              calendarError,\n            );\n            // Continue with cancellation even if Google Calendar deletion fails\n          }\n        }\n\n        // Update booking status\n        await storage.updateCall(bookingId, {\n          status: \"cancelled\",\n          cancellationReason: reason || \"Cancelled by user\",\n          cancelledAt: new Date(),\n          cancelledBy: currentUser.id,\n        });\n\n        // Log the cancellation\n        await storage.createActivityLog({\n          userId: currentUser.id,\n          action: \"CANCEL_MEETING\",\n          entityType: \"call\",\n          entityId: bookingId,\n          details: `Cancelled meeting: ${reason || \"No reason provided\"}${booking.googleCalendarEventId ? \" (Google Calendar event deleted)\" : \"\"}`,\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n        });\n\n        res.json({\n          success: true,\n          message: \"Meeting cancelled successfully\",\n        });\n      } catch (error) {\n        console.error(\"Error cancelling booking:\", error);\n        res.status(500).json({ message: \"Failed to cancel booking\" });\n      }\n    },\n  );\n\n  // Get user's flag count\n  app.get(\"/api/user/flags-count\", authenticateToken, async (req, res) => {\n    try {\n      const currentUser = await storage.getUserById(req.user!.userId);\n\n      let flagCount = 0;\n      if (currentUser.role === \"decision_maker\") {\n        // Get flags raised against this DM\n        const flags = await storage.getDMFlags(currentUser.id);\n        flagCount = flags.filter(\n          (flag) => flag.status === \"open\" || flag.status === \"pending\",\n        ).length;\n      } else if (currentUser.role === \"sales_rep\") {\n        // Use the flagsReceived field from the User collection for sales reps\n        flagCount = currentUser.flagsReceived || 0;\n      }\n\n      res.json({ flags: flagCount });\n    } catch (error) {\n      console.error(\"Error getting user flag count:\", error);\n      res.status(500).json({ message: \"Failed to get flag count\" });\n    }\n  });\n\n  // Update user notification settings\n  app.put(\"/api/user/notifications\", authenticateToken, async (req, res) => {\n    try {\n      const userId = req.user!.userId;\n      const notificationSettings = req.body;\n\n      // Update user with notification settings\n      const updatedUser = await storage.updateUser(userId, {\n        notificationSettings,\n        updatedAt: new Date(),\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      console.log(\"Notification settings updated for user:\", userId);\n      res.json({\n        success: true,\n        message: \"Notification settings updated successfully\",\n        settings: notificationSettings,\n      });\n    } catch (error) {\n      console.error(\"Error updating notification settings:\", error);\n      res.status(500).json({\n        message: \"Failed to update notification settings\",\n        error: error.message,\n      });\n    }\n  });\n\n  // Update user privacy settings\n  app.put(\"/api/user/privacy\", authenticateToken, async (req, res) => {\n    try {\n      const userId = req.user!.userId;\n      const privacySettings = req.body;\n\n      // Update user with privacy settings\n      const updatedUser = await storage.updateUser(userId, {\n        privacySettings,\n        updatedAt: new Date(),\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      console.log(\"Privacy settings updated for user:\", userId);\n      res.json({\n        success: true,\n        message: \"Privacy settings updated successfully\",\n        settings: privacySettings,\n      });\n    } catch (error) {\n      console.error(\"Error updating privacy settings:\", error);\n      res.status(500).json({\n        message: \"Failed to update privacy settings\",\n        error: error.message,\n      });\n    }\n  });\n\n  // Get user's upcoming meetings\n  app.get(\"/api/calendar/my-meetings\", authenticateToken, async (req, res) => {\n    try {\n      const currentUser = await storage.getUserById(req.user!.userId);\n      const { startDate, endDate } = req.query;\n\n      let meetings;\n      if (currentUser.role === \"sales_rep\") {\n        meetings = await storage.getCallsByUserId(currentUser.id);\n      } else if (currentUser.role === \"decision_maker\") {\n        meetings = await storage.getCallsByDMId(currentUser.id);\n      } else {\n        // Enterprise admin can see all company meetings\n        meetings = await storage.getCallLogsByCompany(\n          currentUser.companyDomain,\n        );\n      }\n\n      // Filter by date range if provided\n      if (startDate && endDate) {\n        const start = new Date(startDate as string);\n        const end = new Date(endDate as string);\n        meetings = meetings.filter((meeting) => {\n          const meetingDate = new Date(meeting.scheduledAt);\n          return meetingDate >= start && meetingDate <= end;\n        });\n      }\n\n      // Enhance meetings with participant details\n      const enhancedMeetings = await Promise.all(\n        meetings.map(async (meeting) => {\n          const [salesRep, dm] = await Promise.all([\n            storage.getUserById(meeting.salesRepId),\n            storage.getUserById(meeting.decisionMakerId),\n          ]);\n\n          return {\n            id: meeting.id,\n            title: meeting.agenda || \"Business Meeting\",\n            startTime: meeting.scheduledAt,\n            endTime: meeting.endTime,\n            status: meeting.status,\n            salesRep: salesRep\n              ? {\n                  id: salesRep.id,\n                  name: `${salesRep.firstName} ${salesRep.lastName}`,\n                  email: salesRep.email,\n                }\n              : null,\n            decisionMaker: dm\n              ? {\n                  id: dm.id,\n                  name: `${dm.firstName} ${dm.lastName}`,\n                  email: dm.email,\n                  title: dm.jobTitle,\n                }\n              : null,\n            notes: meeting.notes,\n            platform: meeting.platform || \"in-person\",\n            confirmationCode: `MTG-${meeting.id.slice(-6).toUpperCase()}`,\n          };\n        }),\n      );\n\n      res.json(enhancedMeetings);\n    } catch (error) {\n      console.error(\"Error getting user meetings:\", error);\n      res.status(500).json({ message: \"Failed to get meetings\" });\n    }\n  });\n\n  // ===== ENTERPRISE ADMIN ROUTES =====\n\n  // Get enterprise analytics\n  app.get(\n    \"/api/enterprise-admin/analytics\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = req.enterpriseUser;\n        const companyDomain = enterpriseUser.companyDomain;\n\n        // Get company users analytics\n        const companyUsers =\n          await storage.getUsersByCompanyDomain(companyDomain);\n        const totalUsers = companyUsers.length;\n        const salesReps = companyUsers.filter(\n          (u) => u.role === \"sales_rep\",\n        ).length;\n        const decisionMakers = companyUsers.filter(\n          (u) => u.role === \"decision_maker\",\n        ).length;\n        const activeUsers = companyUsers.filter((u) => u.isActive).length;\n\n        // Get current month data\n        const currentMonth = new Date();\n        currentMonth.setDate(1);\n        const newUsersThisMonth = companyUsers.filter(\n          (u) => new Date(u.createdAt) >= currentMonth,\n        ).length;\n\n        // Get meeting analytics for company\n        const companyUserIds = companyUsers.map((u) => u.id);\n        const allCalls = await storage.getAllCalls();\n        const companyCalls = allCalls.filter(\n          (call) =>\n            companyUserIds.includes(call.salesRepId) ||\n            companyUserIds.includes(call.decisionMakerId),\n        );\n\n        const monthlyMeetings = companyCalls.filter(\n          (call) => new Date(call.createdAt) >= currentMonth,\n        ).length;\n\n        const scheduledMeetings = companyCalls.filter(\n          (call) => call.status === \"scheduled\",\n        ).length;\n        const completedMeetings = companyCalls.filter(\n          (call) => call.status === \"completed\",\n        ).length;\n        const completionRate =\n          companyCalls.length > 0\n            ? Math.round((completedMeetings / companyCalls.length) * 100)\n            : 0;\n\n        res.json({\n          totalUsers,\n          salesReps,\n          decisionMakers,\n          activeUsers,\n          activeSalesReps: salesReps,\n          newUsersThisMonth,\n          monthlyMeetings,\n          scheduledMeetings,\n          totalInvitations:\n            await storage.getCompanyInvitationsCount(companyDomain),\n          meetingTrend: 15, // Mock trend data\n          salesRepGrowth: 8,\n          completionRate,\n        });\n      } catch (error) {\n        console.error(\"Error getting enterprise analytics:\", error);\n        res.status(500).json({ message: \"Failed to get analytics\" });\n      }\n    },\n  );\n\n  // Get company users\n  app.get(\n    \"/api/enterprise-admin/users\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = req.enterpriseUser;\n        const companyDomain = enterpriseUser.companyDomain;\n\n        const users = await storage.getUsersByCompanyDomain(companyDomain);\n\n        // Filter out sensitive information\n        const filteredUsers = users.map((user) => ({\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          jobTitle: user.jobTitle,\n          department: user.department,\n          isActive: user.isActive,\n          createdAt: user.createdAt,\n          lastLogin: user.lastLogin,\n        }));\n\n        res.json(filteredUsers);\n      } catch (error) {\n        console.error(\"Error getting company users:\", error);\n        res.status(500).json({ message: \"Failed to get users\" });\n      }\n    },\n  );\n\n  // Create enterprise user\n  app.post(\n    \"/api/enterprise-admin/create-user\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = req.enterpriseUser;\n        const companyDomain = enterpriseUser.companyDomain;\n        const {\n          email,\n          firstName,\n          lastName,\n          role,\n          jobTitle,\n          department,\n          password,\n        } = req.body;\n\n        // Verify email domain matches company domain\n        const emailDomain = email.split(\"@\")[1];\n        if (emailDomain !== companyDomain) {\n          return res.status(400).json({\n            message: `Email domain must match company domain: ${companyDomain}`,\n          });\n        }\n\n        // Check if user already exists\n        const existingUser = await storage.getUserByEmail(email);\n        if (existingUser) {\n          return res\n            .status(400)\n            .json({ message: \"User with this email already exists\" });\n        }\n\n        // Validate password requirements\n        if (!password || password.length < 8) {\n          return res\n            .status(400)\n            .json({ message: \"Password must be at least 8 characters long\" });\n        }\n\n        const passwordRegex =\n          /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/;\n        if (!passwordRegex.test(password)) {\n          return res.status(400).json({\n            message:\n              \"Password must contain uppercase, lowercase, number and special character\",\n          });\n        }\n\n        // Create user with enterprise settings\n        const userData = {\n          email,\n          firstName,\n          lastName,\n          role,\n          jobTitle: jobTitle || \"\",\n          department: department || \"\",\n          companyDomain,\n          domainVerified: true,\n          isActive: true,\n          packageType: \"enterprise\",\n          standing: \"excellent\",\n          password: password,\n          requirePasswordChange: false,\n        };\n\n        const newUser = await storage.createUser(userData);\n\n        // Log enterprise activity\n        await storage.createActivityLog({\n          action: \"CREATE_ENTERPRISE_USER\",\n          performedBy: enterpriseUser.id,\n          targetUser: newUser.id,\n          details: `Created enterprise user: ${email}`,\n          companyDomain,\n        });\n\n        res.status(201).json({\n          id: newUser.id,\n          email: newUser.email,\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n          role: newUser.role,\n          temporaryPassword: \"TempPass123!\", // Return temp password for setup\n        });\n      } catch (error) {\n        console.error(\"Error creating enterprise user:\", error);\n        res.status(500).json({ message: \"Failed to create user\" });\n      }\n    },\n  );\n\n  // Update user status\n  app.patch(\n    \"/api/enterprise-admin/users/:userId/status\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = req.enterpriseUser;\n        const { userId } = req.params;\n        const { isActive } = req.body;\n\n        // Verify user belongs to same company domain\n        const targetUser = await storage.getUser(userId);\n        if (\n          !targetUser ||\n          targetUser.companyDomain !== enterpriseUser.companyDomain\n        ) {\n          return res\n            .status(404)\n            .json({ message: \"User not found or access denied\" });\n        }\n\n        // Update user status\n        const updatedUser = await storage.updateUser(userId, { isActive });\n\n        // Log enterprise activity\n        await storage.createActivityLog({\n          action: \"UPDATE_USER_STATUS\",\n          performedBy: enterpriseUser.id,\n          targetUser: userId,\n          details: `${isActive ? \"Activated\" : \"Deactivated\"} user: ${targetUser.email}`,\n          companyDomain: enterpriseUser.companyDomain,\n        });\n\n        res.json({ success: true, user: updatedUser });\n      } catch (error) {\n        console.error(\"Error updating user status:\", error);\n        res.status(500).json({ message: \"Failed to update user status\" });\n      }\n    },\n  );\n\n  // Delete enterprise user\n  app.delete(\n    \"/api/enterprise-admin/users/:userId\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = req.enterpriseUser;\n        const { userId } = req.params;\n\n        // Verify user belongs to same company domain\n        const targetUser = await storage.getUser(userId);\n        if (\n          !targetUser ||\n          targetUser.companyDomain !== enterpriseUser.companyDomain\n        ) {\n          return res\n            .status(404)\n            .json({ message: \"User not found or access denied\" });\n        }\n\n        // Prevent deletion of enterprise admin users\n        if (targetUser.role === \"enterprise_admin\") {\n          return res\n            .status(400)\n            .json({ message: \"Cannot delete enterprise admin users\" });\n        }\n\n        // Delete the user\n        const deleted = await storage.deleteUser(userId);\n        if (!deleted) {\n          return res.status(500).json({ message: \"Failed to delete user\" });\n        }\n\n        // Log enterprise activity\n        await storage.createActivityLog({\n          action: \"DELETE_USER\",\n          performedBy: enterpriseUser.id,\n          targetUser: userId,\n          details: `Deleted user: ${targetUser.email}`,\n          companyDomain: enterpriseUser.companyDomain,\n        });\n\n        res.json({ success: true, message: \"User deleted successfully\" });\n      } catch (error) {\n        console.error(\"Error deleting user:\", error);\n        res.status(500).json({ message: \"Failed to delete user\" });\n      }\n    },\n  );\n\n  // Get domain settings\n  app.get(\n    \"/api/enterprise-admin/domain-settings\",\n    requireEnterpriseAdmin,\n    async (req, res) => {\n      try {\n        const enterpriseUser = req.enterpriseUser;\n\n        res.json({\n          verifiedDomain: enterpriseUser.companyDomain,\n          autoApproveUsers: true,\n          domainRestrictions: true,\n          verificationDate: enterpriseUser.domainVerifiedAt || new Date(),\n          settings: {\n            requireMFA: false,\n            sessionTimeout: 8, // hours\n            allowGuestAccess: false,\n          },\n        });\n      } catch (error) {\n        console.error(\"Error getting domain settings:\", error);\n        res.status(500).json({ message: \"Failed to get domain settings\" });\n      }\n    },\n  );\n\n  // ===== DECISION MAKER SIGNUP ROUTES =====\n\n  // Save decision maker personal information\n  app.post(\"/api/decision-maker/personal-info\", async (req, res) => {\n    try {\n      console.log(\"Received decision maker signup request:\", req.body);\n      const validatedData = decisionMakerPersonalInfoSchema.parse(req.body);\n      console.log(\"Validated decision maker data:\", validatedData);\n\n      // Check if email already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        console.log(\"Email already exists:\", validatedData.email);\n        return res\n          .status(400)\n          .json({ message: \"Email address is already registered\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(validatedData.password, 10);\n\n      // Save decision maker data\n      const userData = {\n        email: validatedData.email,\n        password: hashedPassword,\n        role: \"decision_maker\",\n        firstName: validatedData.firstName,\n        lastName: validatedData.lastName,\n        linkedinUrl: validatedData.linkedinUrl,\n        linkedinVerified: req.body.linkedinVerified || false,\n        companyDomain: validatedData.companyDomain,\n        calendarIntegrationEnabled: false, // Default: calendar disconnected for new DMs\n        isActive: false, // Mark as inactive until signup is complete\n      };\n\n      // Check for invitation context from frontend\n      if (req.body.invitationContext) {\n        const { salesRepId, invitationId } = req.body.invitationContext;\n        if (salesRepId) {\n          userData.invitedBy = salesRepId;\n          userData.invitationStatus = \"accepted\";\n          userData.invitedAt = new Date();\n          console.log(`DM invited by sales rep: ${salesRepId}`);\n        }\n      }\n\n      console.log(\"Creating decision maker with data:\", userData);\n      const user = await storage.createUser(userData);\n      console.log(\"Decision maker created successfully:\", user.id);\n\n      // Create Invitation record if DM was invited by a sales rep\n      if (req.body.invitationContext && req.body.invitationContext.salesRepId) {\n        const { salesRepId } = req.body.invitationContext;\n        try {\n          const invitationData = {\n            salesRepId: salesRepId,\n            repId: salesRepId, // For backward compatibility\n            dmId: user.id,\n            status: \"accepted\",\n            sentAt: new Date(),\n            acceptedAt: new Date(),\n            email: userData.email,\n            firstName: userData.firstName,\n            lastName: userData.lastName,\n            decisionMakerEmail: userData.email,\n            decisionMakerName: `${userData.firstName} ${userData.lastName}`,\n          };\n\n          await storage.createInvitation(invitationData);\n          console.log(\n            `✅ Invitation record created linking DM ${user.id} to sales rep ${salesRepId}`,\n          );\n        } catch (error) {\n          console.error(\"❌ Failed to create invitation record:\", error);\n          // Don't fail the user creation, just log the error\n        }\n      }\n\n      // Store user ID in session for multi-step process\n      (req.session as any).signupUserId = user.id;\n\n      res.json({\n        success: true,\n        message: \"Personal information saved\",\n        userId: user.id,\n      });\n    } catch (error: any) {\n      console.error(\"Decision maker signup error:\", error);\n      if (error.name === \"ZodError\") {\n        return res\n          .status(400)\n          .json({ message: \"Validation failed\", errors: error.errors });\n      }\n      res.status(500).json({\n        message: \"Failed to save personal information\",\n        error: error.message,\n      });\n    }\n  });\n\n  // Save decision maker professional background\n  app.post(\"/api/decision-maker/professional-info\", async (req, res) => {\n    try {\n      const validatedData = decisionMakerProfessionalSchema.parse(req.body);\n\n      // Get user ID from session\n      const userId = (req.session as any)?.signupUserId;\n      if (!userId) {\n        return res\n          .status(400)\n          .json({ message: \"Please complete personal information first\" });\n      }\n\n      // Update user with professional information\n      const updatedUser = await storage.updateUser(userId, {\n        jobTitle: validatedData.jobTitle,\n        company: validatedData.company,\n        industry: validatedData.industry,\n        companySize: validatedData.companySize,\n        yearsInRole: validatedData.yearsInRole,\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ success: true, message: \"Professional information saved\" });\n    } catch (error: any) {\n      if (error.name === \"ZodError\") {\n        return res\n          .status(400)\n          .json({ message: \"Validation failed\", errors: error.errors });\n      }\n      res\n        .status(500)\n        .json({ message: \"Failed to save professional information\" });\n    }\n  });\n\n  // Save decision maker availability preferences\n  app.post(\"/api/decision-maker/availability\", async (req, res) => {\n    try {\n      const validatedData = decisionMakerAvailabilitySchema.parse(req.body);\n\n      // Get user ID from session\n      const userId = (req.session as any)?.signupUserId;\n      if (!userId) {\n        return res\n          .status(400)\n          .json({ message: \"Please complete previous steps first\" });\n      }\n\n      // Store availability preferences (in a real app, this would go to a separate table)\n      // For now, we'll store as JSON in user record or handle differently\n      const updatedUser = await storage.updateUser(userId, {\n        // Store availability as additional fields or JSON\n        availabilityData: JSON.stringify(validatedData),\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ success: true, message: \"Availability preferences saved\" });\n    } catch (error: any) {\n      if (error.name === \"ZodError\") {\n        return res\n          .status(400)\n          .json({ message: \"Validation failed\", errors: error.errors });\n      }\n      res\n        .status(500)\n        .json({ message: \"Failed to save availability preferences\" });\n    }\n  });\n\n  // Save decision maker nominations and complete registration\n  app.post(\"/api/decision-maker/nominate\", async (req, res) => {\n    try {\n      const validatedData = decisionMakerNominationSchema.parse(req.body);\n\n      // Get user ID from session\n      const userId = (req.session as any)?.signupUserId;\n      if (!userId) {\n        return res\n          .status(400)\n          .json({ message: \"Please complete previous steps first\" });\n      }\n\n      // Get the user to check if they were invited\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Store nominations (in a real app, this would create nomination records)\n      // For now, we'll store as JSON or handle differently\n      const nominations = [];\n      if (validatedData.nominatedSalesReps) {\n        for (const rep of validatedData.nominatedSalesReps) {\n          if (rep.name && rep.email) {\n            nominations.push({\n              nominatorId: userId,\n              name: rep.name,\n              email: rep.email,\n              company: rep.company,\n              referralReason: rep.referralReason,\n              status: \"pending\",\n            });\n          }\n        }\n      }\n\n      // Complete registration by setting packageType to free and activating account\n      const updatedUser = await storage.updateUser(userId, {\n        packageType: \"free\", // All DMs get free plan by default\n        isActive: true,\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Create initial monthly call limit of 3 calls for the DM\n      const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n      try {\n        await storage.getMonthlyCallLimit(\n          userId,\n          \"decision_maker\",\n          currentMonth,\n        );\n        console.log(\n          `Monthly call limit (3 calls) initialized for DM ${userId}`,\n        );\n      } catch (error) {\n        console.error(\"Error initializing monthly call limit:\", error);\n      }\n\n      // Clear signup session now that signup is fully completed\n      delete (req.session as any).signupUserId;\n\n      res.json({\n        success: true,\n        message:\n          \"Registration completed successfully! You have been allocated 3 calls per month.\",\n        nominations: nominations,\n        callsAllocated: 3,\n      });\n    } catch (error: any) {\n      if (error.name === \"ZodError\") {\n        return res\n          .status(400)\n          .json({ message: \"Validation failed\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to save nominations\" });\n    }\n  });\n\n  // Complete decision maker professional information\n  app.post(\"/api/decision-maker/professional-info\", async (req, res) => {\n    try {\n      const validatedData = z\n        .object({\n          jobTitle: z.string().min(1, \"Job title is required\"),\n          company: z.string().min(1, \"Company is required\"),\n          industry: z.string().min(1, \"Industry is required\"),\n          companySize: z.string().min(1, \"Company size is required\"),\n          yearsInRole: z.string().min(1, \"Years in role is required\"),\n        })\n        .parse(req.body);\n\n      // Get user ID from session\n      const userId = (req.session as any)?.signupUserId;\n      if (!userId) {\n        return res\n          .status(400)\n          .json({ message: \"Please complete previous steps first\" });\n      }\n\n      // Update user with professional information\n      const updatedUser = await storage.updateUser(userId, {\n        professionalInfo: {\n          jobTitle: validatedData.jobTitle,\n          company: validatedData.company,\n          industry: validatedData.industry,\n          companySize: validatedData.companySize,\n          yearsInRole: validatedData.yearsInRole,\n        },\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        success: true,\n        message: \"Professional information saved successfully\",\n        user: updatedUser,\n      });\n    } catch (error: any) {\n      if (error.name === \"ZodError\") {\n        return res\n          .status(400)\n          .json({ message: \"Validation failed\", errors: error.errors });\n      }\n      res\n        .status(500)\n        .json({ message: \"Failed to save professional information\" });\n    }\n  });\n\n  // Complete decision maker availability preferences\n  app.post(\"/api/decision-maker/availability\", async (req, res) => {\n    try {\n      console.log(\"Request body:\", req.body);\n\n      // Transform the data to match the expected schema\n      const transformedData = {\n        availabilityType: req.body.availabilityType || \"flexible\",\n        preferredDays: req.body.availableDays || [\n          \"Monday\",\n          \"Tuesday\",\n          \"Wednesday\",\n          \"Thursday\",\n          \"Friday\",\n          \"Saturday\",\n          \"Sunday\",\n        ],\n        preferredTimes: req.body.preferredTimes || [\n          \"9:00 AM - 11:00 AM\",\n          \"11:00 AM - 1:00 PM\",\n          \"1:00 PM - 3:00 PM\",\n          \"3:00 PM - 5:00 PM\",\n          \"5:00 PM - 7:00 PM\",\n          \"7:00 PM - 9:00 PM\",\n        ],\n        timezone:\n          req.body.preferredTimeZone ||\n          req.body.timezone ||\n          req.body.timeZone ||\n          \"UTC-7\", // Provide a fallback\n        callDuration: \"30\", // Default to 30 minutes\n      };\n\n      console.log(\"Transformed data:\", transformedData);\n\n      const validatedData = z\n        .object({\n          availabilityType: z.enum([\n            \"flexible\",\n            \"specific_times\",\n            \"by_appointment\",\n          ]),\n          preferredDays: z.array(z.string()).optional(),\n          preferredTimes: z.array(z.string()).optional(),\n          timezone: z.string().min(1, \"Please select your timezone\"),\n          callDuration: z.enum([\"15\", \"30\", \"45\"]).default(\"30\"),\n        })\n        .safeParse(transformedData);\n\n      if (!validatedData.success) {\n        console.log(\"Validation failed:\", validatedData.error);\n        return res.status(400).json({\n          message: \"Validation failed\",\n          errors: validatedData.error.errors,\n        });\n      }\n\n      const data = validatedData.data;\n\n      // Get user ID from session\n      const userId = (req.session as any)?.signupUserId;\n      if (!userId) {\n        return res\n          .status(400)\n          .json({ message: \"Please complete previous steps first\" });\n      }\n\n      // Update user with availability preferences\n      const updatedUser = await storage.updateUser(userId, {\n        availabilityPreferences: {\n          availabilityType: data.availabilityType,\n          preferredDays: data.preferredDays,\n          preferredTimes: data.preferredTimes,\n          timezone: data.timezone,\n          callDuration: data.callDuration,\n          // Keep backward compatibility\n          preferredTimeZone: data.timezone,\n          availableDays: data.preferredDays,\n          maxCallsPerWeek: \"3\",\n        },\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        success: true,\n        message: \"Availability preferences saved successfully\",\n        user: updatedUser,\n      });\n    } catch (error: any) {\n      if (error.name === \"ZodError\") {\n        return res\n          .status(400)\n          .json({ message: \"Validation failed\", errors: error.errors });\n      }\n      res\n        .status(500)\n        .json({ message: \"Failed to save availability preferences\" });\n    }\n  });\n\n  // Legacy package endpoint - now redirects to nominate (package selection removed)\n  app.post(\"/api/decision-maker/package\", async (req, res) => {\n    return res.status(400).json({\n      message:\n        \"Package selection has been removed. All decision makers get 3 free calls per month.\",\n      redirect: \"/signup/decision-maker/nominate\",\n    });\n  });\n\n  // ===== LOGIN ROUTE =====\n\n  app.post(\"/api/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      console.log(\"Login attempt:\", {\n        email,\n        password: password ? \"***\" : \"missing\",\n      });\n\n      if (!email || !password) {\n        return res\n          .status(400)\n          .json({ message: \"Email and password are required\" });\n      }\n\n      // Get user by email\n      const user = await storage.getUserByEmail(email);\n      console.log(\n        \"User found:\",\n        user\n          ? {\n              id: user.id,\n              email: user.email,\n              role: user.role,\n              isActive: user.isActive,\n            }\n          : \"NOT FOUND\",\n      );\n\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      // Check if account is active (completed signup)\n      if (!user.isActive) {\n        console.log(\"User account inactive\");\n        return res\n          .status(401)\n          .json({ message: \"Please complete your signup process first\" });\n      }\n\n      // Verify password\n      const isPasswordValid = await bcrypt.compare(password, user.password);\n      console.log(\"Password valid:\", isPasswordValid);\n\n      if (!isPasswordValid) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      // Check for user suspension (especially for sales reps with 3+ flags)\n      if (user.role === \"sales_rep\") {\n        const suspensionStatus = await storage.checkUserSuspensionStatus(\n          user.id,\n        );\n        if (suspensionStatus.isSuspended) {\n          console.log(\n            `Sales rep ${user.email} attempted login while suspended`,\n          );\n          return res.status(403).json({\n            message: suspensionStatus.message,\n            suspended: true,\n            suspensionDetails: suspensionStatus.suspension,\n          });\n        }\n      }\n\n      // Generate JWT token\n      const token = generateToken({\n        userId: user.id,\n        email: user.email,\n        role: user.role,\n      });\n\n      console.log(\"Login successful for:\", user.email, \"Token generated\");\n\n      // Log login activity\n      await storage.createActivityLog({\n        userId: user.id,\n        action: \"LOGIN\",\n        entityType: \"user\",\n        entityId: user.id,\n        details: `User logged in: ${user.email}`,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      // Return user data (excluding password)\n      const { password: _, ...userWithoutPassword } = user;\n\n      res.json({\n        success: true,\n        message: \"Login successful\",\n        user: userWithoutPassword,\n        token,\n      });\n    } catch (error: any) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\", error: error.message });\n    }\n  });\n\n  // Logout route (JWT-based - client handles token removal)\n  app.post(\"/api/logout\", authenticateToken, async (req, res) => {\n    console.log(\"Logout request received\");\n\n    // Log logout activity\n    await storage.createActivityLog({\n      userId: req.user!.userId,\n      action: \"LOGOUT\",\n      entityType: \"user\",\n      entityId: req.user!.userId,\n      details: `User logged out: ${req.user!.email}`,\n      ipAddress: req.ip,\n      userAgent: req.get(\"User-Agent\"),\n    });\n\n    // With JWT, logout is handled client-side by removing the token\n    // Server doesn't need to do anything special unless implementing token blacklisting\n    res.json({ success: true, message: \"Logout successful\" });\n  });\n\n  // ===== TEMPORARY ADMIN ENDPOINT FOR TESTING =====\n  // Remove suspension from user (for testing purposes)\n  app.post(\"/api/admin/remove-suspension/:email\", async (req, res) => {\n    try {\n      const { email } = req.params;\n      console.log(`Admin request to remove suspension for: ${email}`);\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Remove suspension using MongoDB direct update\n      const { connectToMongoDB, User } = await import(\"./mongodb\");\n      await connectToMongoDB();\n\n      const updatedUser = await User.findByIdAndUpdate(\n        user.id,\n        {\n          $set: {\n            \"suspension.isActive\": false,\n            \"suspension.endDate\": new Date(),\n            \"suspension.reason\": \"Suspension removed via admin endpoint\",\n          },\n        },\n        { new: true },\n      );\n\n      console.log(\"Updated user suspension:\", updatedUser?.suspension);\n\n      console.log(`Suspension removed for user: ${email}`);\n      res.json({\n        success: true,\n        message: \"Suspension removed successfully\",\n        user: { email: updatedUser.email, role: updatedUser.role },\n      });\n    } catch (error) {\n      console.error(\"Error removing suspension:\", error);\n      res.status(500).json({ message: \"Failed to remove suspension\" });\n    }\n  });\n\n  // ===== DUPLICATE CURRENT USER ROUTE - REMOVED =====\n  // JWT-based current user route is already implemented above\n\n  // Check if user can book calls (monthly limit check)\n  app.get(\"/api/user/can-book-calls\", authenticateToken, async (req, res) => {\n    try {\n      const userId = req.user!.userId;\n      const user = await storage.getUserById(userId);\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const userRole =\n        user.role === \"sales_rep\" ? \"sales_rep\" : \"decision_maker\";\n      const canBookResult = await storage.canUserBookCall(userId, userRole);\n\n      res.json(canBookResult);\n    } catch (error) {\n      console.error(\"Error checking booking eligibility:\", error);\n      res.status(500).json({\n        canBook: false,\n        remainingCalls: 0,\n        message: \"Failed to check booking eligibility\",\n      });\n    }\n  });\n\n  // ===== SALES REP DASHBOARD ROUTES =====\n\n  // Get sales rep's invitations\n  app.get(\"/api/sales-rep/invitations\", authenticateToken, async (req, res) => {\n    try {\n      const invitations = await storage.getInvitationsByUserId(\n        req.user!.userId,\n      );\n      res.json(invitations);\n    } catch (error: any) {\n      console.error(\"Get invitations error:\", error);\n      res.status(500).json({ message: \"Failed to fetch invitations\" });\n    }\n  });\n\n  // Get sales rep's calls\n  app.get(\"/api/sales-rep/calls\", authenticateToken, async (req, res) => {\n    try {\n      const calls = await storage.getCallsByUserId(req.user!.userId);\n      res.json(calls);\n    } catch (error: any) {\n      console.error(\"Get calls error:\", error);\n      res.status(500).json({ message: \"Failed to fetch calls\" });\n    }\n  });\n\n  // Get sales rep's metrics\n  app.get(\"/api/sales-rep/metrics\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.user!.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const invitations = await storage.getInvitationsByUserId(\n        req.user!.userId,\n      );\n      const calls = await storage.getCallsByUserId(req.user!.userId);\n\n      // Calculate metrics\n      const totalInvitations = invitations.length;\n      const acceptedInvitations = invitations.filter(\n        (inv) => inv.status === \"accepted\",\n      ).length;\n      const pendingInvitations = invitations.filter(\n        (inv) => inv.status === \"pending\",\n      ).length;\n      const completedCalls = calls.filter(\n        (call) => call.status === \"completed\",\n      ).length;\n      const upcomingCalls = calls.filter(\n        (call) => call.status === \"scheduled\",\n      ).length;\n\n      // Calculate success rate\n      const successRate =\n        completedCalls > 0\n          ? Math.round((completedCalls / calls.length) * 100)\n          : 0;\n\n      // Get user's subscription plan to determine proper limits\n      let maxDmInvitations = 3; // Default fallback\n      let limits = { dmLimit: 1, callCredits: 1 }; // Default fallback\n\n      try {\n        // Try to get subscription plans from database\n        const subscriptionPlans = await storage.getAllSubscriptionPlans();\n        \n        if (subscriptionPlans && subscriptionPlans.length > 0) {\n          // Find the user's current plan\n          const userPlan = subscriptionPlans.find(plan => \n            plan.name.toLowerCase() === (user.packageType || '').toLowerCase() ||\n            plan.name.toLowerCase().replace(/\\s+/g, '-') === (user.packageType || '').toLowerCase()\n          );\n          \n          if (userPlan) {\n            console.log(`Found subscription plan for ${user.packageType}:`, userPlan.name);\n            maxDmInvitations = userPlan.maxInvitations;\n            limits = {\n              dmLimit: userPlan.maxInvitations,\n              callCredits: userPlan.maxCallCredits\n            };\n          } else {\n            console.log(`No subscription plan found for packageType: ${user.packageType}, using fallback limits`);\n            \n            // Fallback to hardcoded limits if plan not found in database\n            const packageLimits = {\n              free: { dmLimit: 3, callCredits: 1, maxInvitations: 3 },\n              basic: { dmLimit: 10, callCredits: 5, maxInvitations: 10 },\n              pro: { dmLimit: 25, callCredits: 15, maxInvitations: 25 },\n              \"pro-team\": { dmLimit: 50, callCredits: 50, maxInvitations: 50 },\n              enterprise: { dmLimit: 500, callCredits: 500, maxInvitations: 500 },\n            };\n\n            const fallbackLimits = packageLimits[user.packageType as keyof typeof packageLimits] || packageLimits[\"free\"];\n            maxDmInvitations = fallbackLimits.maxInvitations;\n            limits = fallbackLimits;\n          }\n        } else {\n          console.log('No subscription plans in database, using hardcoded fallback limits');\n          \n          // Fallback limits when no plans in database\n          const packageLimits = {\n            free: { dmLimit: 3, callCredits: 1, maxInvitations: 3 },\n            basic: { dmLimit: 10, callCredits: 5, maxInvitations: 10 },\n            pro: { dmLimit: 25, callCredits: 15, maxInvitations: 25 },\n            \"pro-team\": { dmLimit: 50, callCredits: 50, maxInvitations: 50 },\n            enterprise: { dmLimit: 500, callCredits: 500, maxInvitations: 500 },\n          };\n\n          const fallbackLimits = packageLimits[user.packageType as keyof typeof packageLimits] || packageLimits[\"free\"];\n          maxDmInvitations = fallbackLimits.maxInvitations;\n          limits = fallbackLimits;\n        }\n      } catch (planError) {\n        console.error('Error fetching subscription plans for metrics:', planError);\n        // Use basic fallback if there's an error\n        const packageLimits = {\n          free: { dmLimit: 3, callCredits: 1 },\n          basic: { dmLimit: 10, callCredits: 5 },\n          pro: { dmLimit: 25, callCredits: 15 },\n          \"pro-team\": { dmLimit: 50, callCredits: 50 },\n          enterprise: { dmLimit: 500, callCredits: 500 },\n        };\n\n        limits = packageLimits[user.packageType as keyof typeof packageLimits] || packageLimits[\"free\"];\n        maxDmInvitations = limits.dmLimit;\n      }\n\n      const metrics = {\n        callCredits: limits.callCredits - completedCalls,\n        maxCallCredits: limits.callCredits,\n        dmInvitations: totalInvitations,\n        maxDmInvitations: maxDmInvitations,\n        acceptedInvitations,\n        pendingInvitations,\n        upcomingCalls,\n        completedCalls,\n        successRate: completedCalls > 0 ? successRate : null,\n        packageType: user.packageType,\n        standing: user.standing || \"good\",\n        databaseUnlocked: acceptedInvitations > 0,\n      };\n\n      res.json(metrics);\n    } catch (error: any) {\n      console.error(\"Get metrics error:\", error);\n      res.status(500).json({ message: \"Failed to fetch metrics\" });\n    }\n  });\n\n  // ===== DECISION MAKER DASHBOARD ROUTES =====\n\n  // Get decision maker's calls\n  app.get(\"/api/decision-maker/calls\", authenticateToken, async (req, res) => {\n    try {\n      const userId = req.user!.userId;\n\n      const calls = await storage.getCallsByUserId(userId);\n      res.json(calls);\n    } catch (error: any) {\n      console.error(\"Get decision maker calls error:\", error);\n      res.status(500).json({ message: \"Failed to fetch calls\" });\n    }\n  });\n\n  // Mark call as completed (Decision Maker only)\n  app.post(\n    \"/api/decision-maker/complete-call/:callId\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const { callId } = req.params;\n        const userId = req.user!.userId;\n\n        // Verify user is decision maker\n        const user = await storage.getUserById(userId);\n        if (!user || user.role !== \"decision_maker\") {\n          return res\n            .status(403)\n            .json({ message: \"Only decision makers can complete calls\" });\n        }\n\n        // Get the call to verify it belongs to this decision maker\n        const call = await storage.getCallById(callId);\n        if (!call) {\n          return res.status(404).json({ message: \"Call not found\" });\n        }\n\n        console.log(\"Complete call debug:\", {\n          callId,\n          userId,\n          callDecisionMakerId: call.decisionMakerId,\n          callDecisionMakerIdString: call.decisionMakerId?.toString(),\n          match: call.decisionMakerId?.toString() === userId,\n        });\n\n        if (call.decisionMakerId?.toString() !== userId) {\n          return res\n            .status(403)\n            .json({ message: \"You can only complete your own calls\" });\n        }\n\n        if (call.status !== \"scheduled\") {\n          return res\n            .status(400)\n            .json({ message: \"Call is not in scheduled status\" });\n        }\n\n        // Update call status to completed\n        const updatedCall = await storage.updateCall(callId, {\n          status: \"completed\",\n          completedAt: new Date(),\n          updatedAt: new Date(),\n        });\n\n        if (!updatedCall) {\n          return res\n            .status(500)\n            .json({ message: \"Failed to update call status\" });\n        }\n\n        // Decrement monthly call limits for both DM and Sales Rep\n        const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n        try {\n          // Decrement DM's monthly call limit\n          await storage.updateMonthlyCallLimit(\n            userId,\n            \"decision_maker\",\n            currentMonth,\n            1,\n          );\n\n          // Decrement Sales Rep's monthly call limit\n          const salesRepId = call.salesRepId?.toString();\n          if (salesRepId) {\n            await storage.updateMonthlyCallLimit(\n              salesRepId,\n              \"sales_rep\",\n              currentMonth,\n              1,\n            );\n          }\n\n          console.log(\n            `Monthly call limits decremented for DM ${userId} and Sales Rep ${salesRepId} for month ${currentMonth}`,\n          );\n        } catch (limitError) {\n          console.error(\"Error updating monthly call limits:\", limitError);\n          // Don't fail the call completion if limit update fails, just log it\n        }\n\n        // Log the completion activity\n        await storage.createActivityLog({\n          userId,\n          action: \"COMPLETE_CALL\",\n          entityType: \"call\",\n          entityId: callId,\n          details: `Marked call as completed - monthly limits decremented for both participants`,\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n        });\n\n        res.json({\n          success: true,\n          message: \"Call marked as completed successfully\",\n          call: updatedCall,\n        });\n      } catch (error: any) {\n        console.error(\"Complete call error:\", error);\n        res.status(500).json({ message: \"Failed to complete call\" });\n      }\n    },\n  );\n\n  // Get single call (Decision Maker only)\n  app.get(\n    \"/api/decision-maker/call/:callId\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const { callId } = req.params;\n        const userId = req.user!.userId;\n\n        // Verify user is decision maker\n        const user = await storage.getUserById(userId);\n        if (!user || user.role !== \"decision_maker\") {\n          return res\n            .status(403)\n            .json({ message: \"Only decision makers can access calls\" });\n        }\n\n        // Get the call\n        const call = await storage.getCallById(callId);\n        if (!call) {\n          return res.status(404).json({ message: \"Call not found\" });\n        }\n\n        // Verify it belongs to this decision maker\n        if (call.decisionMakerId?.toString() !== userId) {\n          return res\n            .status(403)\n            .json({ message: \"You can only access your own calls\" });\n        }\n\n        res.json(call);\n      } catch (error: any) {\n        console.error(\"Get call error:\", error);\n        res.status(500).json({ message: \"Failed to fetch call\" });\n      }\n    },\n  );\n\n  // Submit call evaluation (Decision Maker only)\n  app.post(\n    \"/api/decision-maker/evaluate-call\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const { callId, experience, experienceTitle, rating, comments } =\n          req.body;\n        const userId = req.user!.userId;\n\n        // Verify user is decision maker\n        const user = await storage.getUserById(userId);\n        if (!user || user.role !== \"decision_maker\") {\n          return res\n            .status(403)\n            .json({ message: \"Only decision makers can evaluate calls\" });\n        }\n\n        // Get the call to verify it belongs to this decision maker\n        const call = await storage.getCallById(callId);\n        if (!call) {\n          return res.status(404).json({ message: \"Call not found\" });\n        }\n\n        if (call.decisionMakerId?.toString() !== userId) {\n          return res\n            .status(403)\n            .json({ message: \"You can only evaluate your own calls\" });\n        }\n\n        // Update call with evaluation data\n        const updatedCall = await storage.updateCall(callId, {\n          rating: rating,\n          feedback: comments,\n          experience: experience,\n          experienceTitle: experienceTitle,\n          evaluatedAt: new Date(),\n          updatedAt: new Date(),\n        });\n\n        if (!updatedCall) {\n          return res\n            .status(500)\n            .json({ message: \"Failed to update call evaluation\" });\n        }\n\n        // Increment flag count and send warning email for rating of 1 (rude behavior)\n        if (rating === 1 && call.salesRepId) {\n          try {\n            console.log(\n              `Rating is 1, incrementing flag for sales rep: ${call.salesRepId}`,\n            );\n            console.log(`Call details:`, {\n              callId: call.id,\n              salesRepId: call.salesRepId,\n              evaluatedBy: userId,\n              rating: rating,\n              experienceTitle: experienceTitle,\n            });\n\n            const flagResult = await storage.incrementUserFlag(\n              call.salesRepId.toString(),\n              `Poor call rating (${rating}/5) - ${experienceTitle}`,\n              userId,\n            );\n\n            console.log(\n              `Flag incremented successfully for sales rep: ${call.salesRepId}`,\n              flagResult,\n            );\n          } catch (flagError) {\n            console.error(\"Error incrementing flag count:\", flagError);\n            console.error(\"Flag error details:\", flagError.message);\n            // Don't fail the evaluation submission if flagging fails\n          }\n        } else {\n          console.log(\n            `No flagging needed - Rating: ${rating}, Has salesRepId: ${!!call.salesRepId}`,\n          );\n        }\n\n        // Log the evaluation activity\n        await storage.createActivityLog({\n          userId,\n          action: \"EVALUATE_CALL\",\n          entityType: \"call\",\n          entityId: callId,\n          details: `Evaluated call with rating ${rating}/5`,\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n        });\n\n        res.json({\n          success: true,\n          message: \"Call evaluation submitted successfully\",\n          call: updatedCall,\n        });\n      } catch (error: any) {\n        console.error(\"Evaluate call error:\", error);\n        res.status(500).json({ message: \"Failed to submit evaluation\" });\n      }\n    },\n  );\n\n  // Get decision maker's metrics\n  app.get(\n    \"/api/decision-maker/metrics\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const user = await storage.getUserById(req.user!.userId);\n        if (!user) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        const calls = await storage.getCallsByUserId(req.user!.userId);\n\n        // Calculate metrics\n        const completedCalls = calls.filter(\n          (call) => call.status === \"completed\",\n        );\n        const upcomingCalls = calls.filter(\n          (call) => call.status === \"scheduled\",\n        );\n        const totalCalls = calls.length;\n\n        // Calculate average rating\n        const ratedCalls = completedCalls.filter((call) => call.rating);\n        const avgRating =\n          ratedCalls.length > 0\n            ? ratedCalls.reduce((sum, call) => sum + call.rating, 0) /\n              ratedCalls.length\n            : null;\n\n        // Get monthly call limit data from the comprehensive system\n        const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n        const monthlyLimit = await storage.getMonthlyCallLimit(\n          req.user!.userId,\n          \"decision_maker\",\n          currentMonth,\n        );\n\n        // Calculate quality score based on ratings and completion rate\n        const qualityScore =\n          avgRating && totalCalls > 0\n            ? Math.round((avgRating / 5) * 100)\n            : null;\n\n        const metrics = {\n          completedCalls: completedCalls.length,\n          remainingCalls: monthlyLimit.remainingCalls,\n          totalCallLimit: monthlyLimit.maxCalls,\n          upcomingCalls: upcomingCalls.length,\n          avgRating: avgRating,\n          qualityScore,\n          packageType: user.packageType,\n          standing: user.standing || \"good\",\n        };\n\n        res.json(metrics);\n      } catch (error: any) {\n        console.error(\"Get decision maker metrics error:\", error);\n        res.status(500).json({ message: \"Failed to fetch metrics\" });\n      }\n    },\n  );\n\n  // Rate a call\n  app.post(\n    \"/api/decision-maker/calls/:callId/rate\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const { callId } = req.params;\n        const { rating, feedback } = req.body;\n\n        if (!rating || rating < 1 || rating > 5) {\n          return res\n            .status(400)\n            .json({ message: \"Rating must be between 1 and 5\" });\n        }\n\n        const ratingValue = parseInt(rating);\n\n        // Get the call to find the sales rep\n        const call = await storage.getCallById(callId);\n        if (!call) {\n          return res.status(404).json({ message: \"Call not found\" });\n        }\n\n        const updatedCall = await storage.updateCall(callId, {\n          rating: ratingValue,\n          feedback: feedback || \"\",\n          status: \"completed\",\n        });\n\n        if (!updatedCall) {\n          return res.status(404).json({ message: \"Call not found\" });\n        }\n\n        // If rating is 1, increase flag count for the sales rep\n        if (ratingValue === 1 && call.salesRepId) {\n          try {\n            await storage.incrementUserFlag(\n              call.salesRepId,\n              \"Low rating from decision maker\",\n              req.user!.userId,\n            );\n\n            // Log the flag activity\n            await storage.createActivityLog({\n              userId: req.user!.userId,\n              action: \"FLAG_USER\",\n              entityType: \"user\",\n              entityId: call.salesRepId.toString(),\n              details: `Flagged sales rep for rating of 1 on call ${callId}`,\n              ipAddress: req.ip,\n              userAgent: req.get(\"User-Agent\"),\n            });\n          } catch (flagError: any) {\n            console.error(\"Error incrementing flag count:\", flagError);\n            // Don't fail the rating process if flagging fails\n          }\n        }\n\n        res.json({\n          success: true,\n          message: \"Call rated successfully\",\n          call: updatedCall,\n        });\n      } catch (error: any) {\n        console.error(\"Rate call error:\", error);\n        res.status(500).json({ message: \"Failed to rate call\" });\n      }\n    },\n  );\n\n  // Rate a call (Sales Rep)\n  app.post(\n    \"/api/sales-rep/calls/:callId/rate\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const { callId } = req.params;\n        const { rating, feedback } = req.body;\n\n        if (!rating || rating < 1 || rating > 5) {\n          return res\n            .status(400)\n            .json({ message: \"Rating must be between 1 and 5\" });\n        }\n\n        const ratingValue = parseInt(rating);\n\n        // Get the call to verify it belongs to this sales rep\n        const call = await storage.getCallById(callId);\n        if (!call) {\n          return res.status(404).json({ message: \"Call not found\" });\n        }\n\n        // Verify the call belongs to the requesting sales rep\n        if (call.salesRepId.toString() !== req.user!.userId) {\n          return res\n            .status(403)\n            .json({ message: \"You can only rate your own calls\" });\n        }\n\n        const updatedCall = await storage.updateCall(callId, {\n          salesRepRating: ratingValue,\n          salesRepFeedback: feedback || \"\",\n          status: \"completed\",\n        });\n\n        if (!updatedCall) {\n          return res.status(404).json({ message: \"Call not found\" });\n        }\n\n        // Increment flag count and send warning email for rating of 1 (poor DM behavior)\n        if (ratingValue === 1 && call.decisionMakerId) {\n          try {\n            console.log(\n              `Sales rep gave rating of 1, flagging decision maker: ${call.decisionMakerId}`,\n            );\n\n            // Get the sales rep and decision maker details\n            const salesRep = await storage.getUserById(req.user!.userId);\n            const decisionMaker = await storage.getUserById(\n              call.decisionMakerId.toString(),\n            );\n\n            if (salesRep && decisionMaker) {\n              // Increment flag count for the decision maker\n              const flagResult = await storage.incrementUserFlag(\n                call.decisionMakerId.toString(),\n                `Poor call rating (${ratingValue}/5) from sales rep - ${feedback || \"No specific feedback\"}`,\n                req.user!.userId,\n              );\n\n              console.log(\n                `Flag incremented successfully for decision maker: ${call.decisionMakerId}`,\n                flagResult,\n              );\n\n              // Send warning email to the decision maker\n              const { sendDecisionMakerWarningEmail } = await import(\n                \"./email-service\"\n              );\n\n              await sendDecisionMakerWarningEmail(\n                decisionMaker.email,\n                decisionMaker.firstName || \"Decision Maker\",\n                `Poor call rating (${ratingValue}/5) - ${feedback || \"Call performance issues\"}`,\n                call.scheduledAt\n                  ? new Date(call.scheduledAt).toLocaleDateString()\n                  : new Date().toLocaleDateString(),\n                `${salesRep.firstName} ${salesRep.lastName}`,\n                salesRep.company || \"Company\",\n                (decisionMaker.flagsReceived || 0) + 1,\n              );\n\n              console.log(\n                `Warning email sent to decision maker: ${decisionMaker.email}`,\n              );\n            }\n          } catch (flagError) {\n            console.error(\"Error flagging decision maker:\", flagError);\n            // Don't fail the rating process if flagging fails\n          }\n        }\n\n        res.json({\n          success: true,\n          message: \"Call rated successfully\",\n          call: updatedCall,\n        });\n      } catch (error: any) {\n        console.error(\"Sales rep rate call error:\", error);\n        res.status(500).json({ message: \"Failed to rate call\" });\n      }\n    },\n  );\n\n  // ===== ADMIN PANEL ROUTES =====\n\n  // Get admin statistics\n  app.get(\"/api/admin/stats\", async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      const userRole = (req.session as any)?.userRole;\n\n      if (!userId || userRole !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Get all users\n      const allUsers = await storage.getAllUsers();\n      const allCalls = await storage.getAllCalls();\n      const allInvitations = await storage.getAllInvitations();\n\n      // Calculate statistics\n      const totalUsers = allUsers.length;\n      const activeSalesReps = allUsers.filter(\n        (user) => user.role === \"sales_rep\" && user.isActive,\n      ).length;\n      const totalCalls = allCalls.length;\n      const completedCalls = allCalls.filter(\n        (call) => call.status === \"completed\",\n      ).length;\n      const scheduledCalls = allCalls.filter(\n        (call) => call.status === \"scheduled\",\n      ).length;\n\n      // Calculate average rating\n      const completedCallsWithRating = allCalls.filter(\n        (call: any) => call.rating && call.rating > 0,\n      );\n      const avgRating =\n        completedCallsWithRating.length > 0\n          ? (\n              completedCallsWithRating.reduce(\n                (sum: number, call: any) => sum + call.rating,\n                0,\n              ) / completedCallsWithRating.length\n            ).toFixed(1)\n          : \"0\";\n\n      // Calculate revenue based on package types\n      const totalRevenue = allUsers.reduce((sum: number, user: any) => {\n        if (user.packageType === \"pro-team\") return sum + 199;\n        if (user.packageType === \"enterprise\") return sum + 499;\n        if (user.packageType === \"starter\") return sum + 99;\n        return sum;\n      }, 0);\n\n      const stats = {\n        totalUsers,\n        activeSalesReps,\n        totalCalls,\n        completedCalls,\n        scheduledCalls,\n        avgRating: parseFloat(avgRating),\n        totalRevenue,\n      };\n\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin statistics\" });\n    }\n  });\n\n  // Get all users for admin\n  app.get(\"/api/admin/users\", async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      const userRole = (req.session as any)?.userRole;\n\n      if (!userId || userRole !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users for admin:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Get all calls for admin\n  app.get(\"/api/admin/calls\", async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      const userRole = (req.session as any)?.userRole;\n\n      if (!userId || userRole !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const calls = await storage.getAllCalls();\n      res.json(calls);\n    } catch (error) {\n      console.error(\"Error fetching calls for admin:\", error);\n      res.status(500).json({ message: \"Failed to fetch calls\" });\n    }\n  });\n\n  // Get all invitations for admin\n  app.get(\"/api/admin/invitations\", async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      const userRole = (req.session as any)?.userRole;\n\n      if (!userId || userRole !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const invitations = await storage.getAllInvitations();\n      res.json(invitations);\n    } catch (error) {\n      console.error(\"Error fetching invitations for admin:\", error);\n      res.status(500).json({ message: \"Failed to fetch invitations\" });\n    }\n  });\n\n  // Update user status\n  app.patch(\"/api/admin/users/:userId/status\", async (req, res) => {\n    try {\n      const adminUserId = (req.session as any)?.userId;\n      const userRole = (req.session as any)?.userRole;\n\n      if (!adminUserId || userRole !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { userId } = req.params;\n      const { status } = req.body;\n\n      const isActive = status === \"active\";\n      const updatedUser = await storage.updateUser(userId, { isActive });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ success: true, user: updatedUser });\n    } catch (error) {\n      console.error(\"Error updating user status:\", error);\n      res.status(500).json({ message: \"Failed to update user status\" });\n    }\n  });\n\n  // Delete user\n  app.delete(\"/api/admin/users/:userId\", async (req, res) => {\n    try {\n      const adminUserId = (req.session as any)?.userId;\n      const userRole = (req.session as any)?.userRole;\n\n      if (!adminUserId || userRole !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { userId } = req.params;\n\n      const deleted = await storage.deleteUser(userId);\n\n      if (!deleted) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ success: true, message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // =============================================================================\n  // FLAGS MANAGEMENT ENDPOINTS\n  // =============================================================================\n\n  // Get flags based on user role\n  app.get(\"/api/flags\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUserById(req.user!.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let flags = [];\n\n      if (user.role === \"sales_rep\") {\n        // Sales reps can see flags they created\n        flags = await storage.getFlagsByRep(req.user!.userId);\n      } else if (user.role === \"decision_maker\") {\n        // Decision makers can see flags against them\n        flags = await storage.getDMFlags(req.user!.userId);\n      } else if (user.role === \"enterprise_admin\") {\n        // Enterprise admins can see flags for their company\n        const userDomain = user.email.split(\"@\")[1];\n        flags = await storage.getFlagsByCompany(userDomain);\n      } else if (user.role === \"super_admin\") {\n        // Super admins can see all flags\n        flags = await storage.getAllFlags();\n      }\n\n      res.json(flags);\n    } catch (error: any) {\n      console.error(\"Error fetching flags:\", error);\n      res.status(500).json({ message: \"Failed to fetch flags\" });\n    }\n  });\n\n  // Create a new flag\n  app.post(\"/api/flags\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUserById(req.user!.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Only sales reps can create flags\n      if (user.role !== \"sales_rep\") {\n        return res\n          .status(403)\n          .json({ message: \"Only sales representatives can create flags\" });\n      }\n\n      const { dmId, reason, description, priority, flagType } = req.body;\n\n      if (!dmId || !reason || !description) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const flagData = {\n        dmId,\n        flaggedBy: req.user!.userId,\n        flaggedByRole: user.role,\n        reason,\n        description,\n        priority: priority || \"medium\",\n        flagType: flagType || \"behavior\",\n        status: \"open\",\n        reportedAt: new Date(),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const flag = await storage.createDMFlag(flagData);\n      res.json({ success: true, flag });\n    } catch (error: any) {\n      console.error(\"Error creating flag:\", error);\n      res.status(500).json({ message: \"Failed to create flag\" });\n    }\n  });\n\n  // Update flag status (PATCH for specific status updates)\n  app.patch(\n    \"/api/flags/:flagId/status\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        // Check if user is super admin\n        const user = await storage.getUserById(req.user!.userId);\n        if (!user || user.role !== \"super_admin\") {\n          return res\n            .status(403)\n            .json({ message: \"Super admin access required\" });\n        }\n\n        const { flagId } = req.params;\n        const { status, action } = req.body;\n\n        if (!status) {\n          return res.status(400).json({ message: \"Status is required\" });\n        }\n\n        const validStatuses = [\n          \"open\",\n          \"investigating\",\n          \"resolved\",\n          \"dismissed\",\n        ];\n        if (!validStatuses.includes(status)) {\n          return res.status(400).json({ message: \"Invalid status\" });\n        }\n\n        const updateData: any = {\n          status,\n          updatedAt: new Date(),\n        };\n\n        if (status === \"resolved\") {\n          updateData.resolvedAt = new Date();\n          updateData.resolvedBy = req.user!.userId;\n          if (action) {\n            updateData.resolution = action;\n          }\n        }\n\n        const updatedFlag = await storage.updateDMFlag(flagId, updateData);\n\n        if (!updatedFlag) {\n          return res.status(404).json({ message: \"Flag not found\" });\n        }\n\n        // Log activity\n        await storage.createActivityLog({\n          action: \"FLAG_STATUS_UPDATED\",\n          performedBy: req.user!.userId,\n          entityType: \"flag\",\n          entityId: flagId,\n          details: `Updated flag status to ${status}${action ? ` with action: ${action}` : \"\"}`,\n          metadata: {\n            flagId,\n            previousStatus: updatedFlag.status,\n            newStatus: status,\n            action,\n          },\n        });\n\n        res.json({ success: true, flag: updatedFlag });\n      } catch (error: any) {\n        console.error(\"Error updating flag status:\", error);\n        res.status(500).json({ message: \"Failed to update flag status\" });\n      }\n    },\n  );\n\n  // Update flag status (PUT for full flag updates)\n  app.put(\"/api/flags/:flagId\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUserById(req.user!.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Only admins can update flag status\n      if (![\"enterprise_admin\", \"super_admin\"].includes(user.role)) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const { flagId } = req.params;\n      const { status, resolution } = req.body;\n\n      const updateData: any = {\n        status,\n        updatedAt: new Date(),\n      };\n\n      if (status === \"resolved\") {\n        updateData.resolvedAt = new Date();\n        updateData.resolvedBy = user.email;\n        if (resolution) {\n          updateData.resolution = resolution;\n        }\n      }\n\n      const updatedFlag = await storage.updateFlagStatus(\n        flagId,\n        status,\n        resolution,\n        user.email,\n      );\n      res.json({ success: true, flag: updatedFlag });\n    } catch (error: any) {\n      console.error(\"Error updating flag:\", error);\n      res.status(500).json({ message: \"Failed to update flag\" });\n    }\n  });\n\n  // Super Admin flag statistics endpoint\n  app.get(\n    \"/api/super-admin/flag-statistics\",\n    requireSuperAdmin,\n    async (req, res) => {\n      try {\n        const statistics = await storage.getFlagStatistics();\n        res.json(statistics);\n      } catch (error: any) {\n        console.error(\"Error fetching flag statistics:\", error);\n        res.status(500).json({ message: \"Failed to fetch flag statistics\" });\n      }\n    },\n  );\n\n  // Credit management endpoints\n  app.post(\n    \"/api/dm/complete-onboarding\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const dmId = req.user!.userId;\n        const { invitedByRepId } = req.body;\n\n        if (!invitedByRepId) {\n          return res.status(400).json({\n            success: false,\n            message: \"Inviting sales rep ID is required\",\n          });\n        }\n\n        const result = await storage.markDMOnboardingComplete(\n          dmId,\n          invitedByRepId,\n        );\n\n        if (result.success) {\n          res.json(result);\n        } else {\n          res.status(400).json(result);\n        }\n      } catch (error) {\n        console.error(\"Error completing DM onboarding:\", error);\n        res.status(500).json({\n          success: false,\n          message: \"Failed to complete onboarding\",\n        });\n      }\n    },\n  );\n\n  app.get(\"/api/sales-rep/credits\", authenticateToken, async (req, res) => {\n    try {\n      const repId = req.user!.userId;\n      const credits = await storage.getRepCredits(repId);\n      const totalCredits = await storage.getRepTotalCredits(repId);\n\n      res.json({\n        credits,\n        totalCredits,\n        databaseAccess: totalCredits > 0,\n      });\n    } catch (error) {\n      console.error(\"Error fetching rep credits:\", error);\n      res.status(500).json({ message: \"Failed to fetch credits\" });\n    }\n  });\n\n  app.get(\n    \"/api/sales-rep/database-access\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const repId = req.user!.userId;\n        const hasAccess = await storage.checkDatabaseAccess(repId);\n\n        res.json({\n          hasAccess,\n          message: hasAccess\n            ? \"Database access granted\"\n            : \"Complete a DM onboarding to unlock database access\",\n        });\n      } catch (error) {\n        console.error(\"Error checking database access:\", error);\n        res.status(500).json({\n          hasAccess: false,\n          message: \"Failed to check database access\",\n        });\n      }\n    },\n  );\n\n  // Enhanced DM listing with gated information\n  app.get(\n    \"/api/sales-rep/available-dms-gated\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const repId = req.user!.userId;\n        const user = await storage.getUserById(repId);\n\n        if (!user || user.role !== \"sales_rep\") {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n\n        // Check if rep has database access\n        const hasAccess = await storage.checkDatabaseAccess(repId);\n        if (!hasAccess) {\n          return res.json({\n            dms: [],\n            message: \"Invite decision makers to unlock database access\",\n            accessGranted: false,\n          });\n        }\n\n        // Get all available DMs\n        const allDMs = await storage.getUsersByRole(\"decision_maker\");\n        const activeAvailableDMs = allDMs.filter(\n          (dm) => dm.isActive && dm.invitationStatus === \"accepted\",\n        );\n\n        // Deduplicate DMs by ID to prevent duplicate display\n        const uniqueDMsMap = new Map();\n        activeAvailableDMs.forEach((dm) => {\n          const dmId = dm._id?.toString() || dm.id;\n          if (!uniqueDMsMap.has(dmId)) {\n            uniqueDMsMap.set(dmId, dm);\n          }\n        });\n        const deduplicatedDMs = Array.from(uniqueDMsMap.values());\n\n        // Check which DMs this rep can see full info for\n        const isEnterprisePlan = user.packageType === \"enterprise\";\n        const hasEmailAddon = user.hasEmailAddon;\n        console.log(\n          \"EMAIL ADDON DEBUG: User email:\",\n          user.email,\n          \"packageType:\",\n          user.packageType,\n          \"hasEmailAddon:\",\n          hasEmailAddon,\n        );\n        const repCalls = await storage.getCallsByRep(repId);\n        const bookedDMIds = new Set(\n          repCalls.map((call) => call.decisionMakerId?.toString()),\n        );\n\n        // Use deduplicated DMs\n        const allAvailableDMs = [...deduplicatedDMs];\n        console.log(\n          `Fixed duplicate DMs: Original count=${activeAvailableDMs.length}, Deduplicated count=${allAvailableDMs.length}`,\n        );\n\n        // Get current month for credit cap and call limit checking\n        const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n\n        // Check if sales rep has reached their monthly call limit\n        const repCallLimit = await storage.getMonthlyCallLimit(\n          repId,\n          \"sales_rep\",\n          currentMonth,\n        );\n        const repCanBookCalls = repCallLimit.remainingCalls > 0;\n\n        const gatedDMs = await Promise.all(\n          allAvailableDMs.map(async (dm, index) => {\n            const dmId = dm._id?.toString() || dm.id;\n            const canSeeDetails =\n              isEnterprisePlan || hasEmailAddon || bookedDMIds.has(dmId);\n            if (dm.email?.includes(\"mlp.yashkumar@gmail.com\")) {\n              console.log(\n                \"EMAIL ADDON DEBUG: DM processing - canSeeDetails:\",\n                canSeeDetails,\n                \"isEnterprise:\",\n                isEnterprisePlan,\n                \"hasAddon:\",\n                hasEmailAddon,\n                \"bookedBefore:\",\n                bookedDMIds.has(dmId),\n              );\n            }\n\n            // For demo purposes, make some profiles unlocked randomly\n            const isDemoUnlocked =\n              dm.id &&\n              dm.id.includes(\"dummy\") &&\n              (index % 3 === 0 || Math.random() > 0.6);\n            const shouldUnlock = canSeeDetails || isDemoUnlocked;\n\n            // Generate engagement score (60-100% range)\n            const engagementScore = Math.floor(Math.random() * 40) + 60;\n\n            // Check if DM has reached their monthly call limit\n            const dmCallLimit = await storage.getMonthlyCallLimit(\n              dmId,\n              \"decision_maker\",\n              currentMonth,\n            );\n            const dmCanBookCalls = dmCallLimit.remainingCalls > 0;\n\n            // Check DM credit eligibility based on engagement score\n            const isEligibleForCredits = engagementScore >= 40; // DMs below 40% can't help reps earn credits\n\n            // Check monthly credit cap (3 credits per month per DM-Rep pair)\n            let monthlyCreditsUsed = 0;\n            let canEarnCredits = false;\n\n            try {\n              const creditUsage = await storage.getDMRepCreditUsage(\n                repId,\n                dmId,\n                currentMonth,\n              );\n              monthlyCreditsUsed = creditUsage ? creditUsage.creditsUsed : 0;\n              canEarnCredits = isEligibleForCredits && monthlyCreditsUsed < 3;\n            } catch (error) {\n              console.error(\"Error checking DM credit usage:\", error);\n              // Default to allowing credits if we can't check usage\n              canEarnCredits = isEligibleForCredits;\n            }\n\n            return {\n              id: dmId,\n              role: dm.role,\n              company: dm.company || \"Unknown Company\",\n              industry: dm.industry || \"Technology\",\n              engagementScore: engagementScore,\n\n              // Monthly Call Limit Information\n              totalCalls: dmCallLimit.totalCalls,\n              maxCalls: dmCallLimit.maxCalls,\n              remainingCalls: dmCallLimit.remainingCalls,\n              canBookCalls: dmCanBookCalls,\n\n              // Credit eligibility indicators\n              isEligibleForCredits: isEligibleForCredits,\n              canEarnCredits: canEarnCredits,\n              monthlyCreditsUsed: monthlyCreditsUsed,\n              maxMonthlyCredits: 3,\n\n              // Gated information\n              name: shouldUnlock\n                ? `${dm.firstName} ${dm.lastName}`\n                : `${dm.firstName?.charAt(0)}*** ${dm.lastName?.charAt(0)}***`,\n              email: shouldUnlock\n                ? dm.email\n                : `${dm.email?.charAt(0)}***@***.com`,\n              jobTitle: shouldUnlock ? dm.jobTitle : \"****** ******\",\n\n              // Access indicators\n              isUnlocked: shouldUnlock,\n              unlockReason: shouldUnlock\n                ? isEnterprisePlan\n                  ? \"enterprise_plan\"\n                  : hasEmailAddon\n                    ? \"email_addon\"\n                    : \"call_booked\"\n                : null,\n            };\n          }),\n        );\n\n        // Filter out DMs who have reached their monthly call limit (remaining calls = 0)\n        const availableDMs = gatedDMs.filter((dm) => dm.canBookCalls);\n\n        const unlockedCount = availableDMs.filter((dm) => dm.isUnlocked).length;\n\n        console.log(\n          `Sales rep has ${repCallLimit.remainingCalls}/${repCallLimit.maxCalls} calls remaining this month`,\n        );\n        console.log(\n          `Returning ${availableDMs.length} available DMs (${gatedDMs.length - availableDMs.length} filtered out for call limits), ${unlockedCount} unlocked`,\n        );\n\n        // Count accepted DM invitations for this rep (for call limit calculation)\n        const repInvitations = await storage.getInvitationsByRep(repId);\n        const acceptedDMsCount = repInvitations.filter(\n          (inv) => inv.status === \"accepted\",\n        ).length;\n\n        res.json({\n          dms: availableDMs,\n          accessGranted: true,\n          totalCount: availableDMs.length,\n          unlockedCount: unlockedCount,\n\n          // Sales rep call limit information\n          repCallLimit: {\n            totalCalls: repCallLimit.totalCalls,\n            maxCalls: repCallLimit.maxCalls,\n            remainingCalls: repCallLimit.remainingCalls,\n            canBookCalls: repCanBookCalls,\n            month: currentMonth,\n          },\n\n          // Count of accepted DMs for call limit calculation\n          acceptedDMsCount: acceptedDMsCount,\n        });\n      } catch (error) {\n        console.error(\"Error fetching available DMs (gated):\", error);\n        res.status(500).json({\n          success: false,\n          message: \"Failed to fetch decision makers\",\n          dms: [],\n          accessGranted: false,\n          totalCount: 0,\n          unlockedCount: 0,\n        });\n      }\n    },\n  );\n\n  // Simulate DM onboarding completion (for testing)\n  app.post(\n    \"/api/simulate/dm-onboarding-complete\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const { dmEmail, repId } = req.body;\n\n        if (!dmEmail || !repId) {\n          return res.status(400).json({\n            success: false,\n            message: \"DM email and rep ID are required\",\n          });\n        }\n\n        // Find the DM\n        const dm = await storage.getUserByEmail(dmEmail);\n        if (!dm || dm.role !== \"decision_maker\") {\n          return res.status(404).json({\n            success: false,\n            message: \"Decision maker not found\",\n          });\n        }\n\n        // Complete onboarding\n        const result = await storage.markDMOnboardingComplete(\n          dm._id || dm.id,\n          repId,\n        );\n        res.json(result);\n      } catch (error) {\n        console.error(\"Error simulating DM onboarding:\", error);\n        res.status(500).json({\n          success: false,\n          message: \"Failed to simulate onboarding completion\",\n        });\n      }\n    },\n  );\n\n  // Create sample invitation for testing credit system\n  app.post(\n    \"/api/create-sample-invitation\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const { dmEmail, dmName } = req.body;\n        const salesRepId = req.user!.userId;\n\n        if (!dmEmail || !dmName) {\n          return res.status(400).json({\n            success: false,\n            message: \"DM email and name are required\",\n          });\n        }\n\n        // Create invitation\n        const invitation = await storage.createInvitation({\n          salesRepId,\n          decisionMakerEmail: dmEmail,\n          decisionMakerName: dmName,\n          status: \"pending\",\n        });\n\n        // Generate invitation link (in production this would be a secure token)\n        const inviteUrl = `${req.protocol}://${req.get(\"host\")}/invite/${invitation.id}`;\n\n        res.json({\n          success: true,\n          message: \"Sample invitation created\",\n          invitation,\n          inviteUrl,\n        });\n      } catch (error) {\n        console.error(\"Error creating sample invitation:\", error);\n        res.status(500).json({\n          success: false,\n          message: \"Failed to create sample invitation\",\n        });\n      }\n    },\n  );\n\n  // Test Google Calendar event creation\n  app.post(\"/api/test-calendar-event\", authenticateToken, async (req, res) => {\n    try {\n      const currentUser = await storage.getUserById(req.user!.userId);\n\n      if (\n        !currentUser.calendarIntegrationEnabled ||\n        !currentUser.googleCalendarTokens\n      ) {\n        return res.status(400).json({\n          success: false,\n          message:\n            \"Google Calendar not connected. Please complete the OAuth flow first.\",\n        });\n      }\n\n      // Set up Google Calendar with user's tokens\n      const { setCredentials, createCalendarEvent } = await import(\n        \"./google-calendar\"\n      );\n      setCredentials(currentUser.googleCalendarTokens);\n\n      // Create a test event\n      const testEvent = await createCalendarEvent({\n        summary: \"Test Event from Naeberly Platform\",\n        description:\n          \"This is a test event created from the Naeberly platform to verify Google Calendar integration.\",\n        start: {\n          dateTime: new Date(Date.now() + 60 * 60 * 1000).toISOString(), // 1 hour from now\n          timeZone: \"America/New_York\",\n        },\n        end: {\n          dateTime: new Date(Date.now() + 90 * 60 * 1000).toISOString(), // 1.5 hours from now\n          timeZone: \"America/New_York\",\n        },\n        attendees: [\n          {\n            email: currentUser.email,\n            displayName: `${currentUser.firstName} ${currentUser.lastName}`,\n          },\n        ],\n      });\n\n      console.log(\"Test Google Calendar event created:\", testEvent.id);\n\n      res.json({\n        success: true,\n        message: \"Test calendar event created successfully\",\n        eventId: testEvent.id,\n        eventUrl: testEvent.htmlLink,\n      });\n    } catch (error) {\n      console.error(\"Error creating test calendar event:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Failed to create test calendar event\",\n        error: error.message,\n      });\n    }\n  });\n\n  // Google Calendar configuration check\n  app.get(\"/api/calendar/config-check\", authenticateToken, async (req, res) => {\n    try {\n      const hasCredentials = !!(\n        process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET\n      );\n      const redirectUri = `${req.protocol}://${req.get(\"host\")}/api/auth/google/callback`;\n\n      res.json({\n        success: true,\n        hasCredentials,\n        clientId: process.env.GOOGLE_CLIENT_ID\n          ? process.env.GOOGLE_CLIENT_ID.substring(0, 12) + \"...\"\n          : \"Missing\",\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET ? \"Present\" : \"Missing\",\n        redirectUri,\n        currentDomain: req.get(\"host\"),\n        requiredDomains: [\"replit.dev\", \"janeway.replit.dev\", req.get(\"host\")],\n        expectedClientId:\n          \"917137353724-ftng1fau0pm0hdl65l1i5et8fmssvedj.apps.googleusercontent.com\",\n        clientIdMatches:\n          process.env.GOOGLE_CLIENT_ID ===\n          \"917137353724-ftng1fau0pm0hdl65l1i5et8fmssvedj.apps.googleusercontent.com\",\n      });\n    } catch (error) {\n      console.error(\"Error checking calendar config:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Failed to check calendar configuration\",\n        error: error.message,\n      });\n    }\n  });\n\n  // Report issue endpoint for decision makers\n  app.post(\n    \"/api/decision-maker/report-issue\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const { type, description, priority } = req.body;\n\n        if (!type || !description) {\n          return res\n            .status(400)\n            .json({ message: \"Issue type and description are required\" });\n        }\n\n        // Get current user\n        const currentUser = await storage.getUserById(req.user!.userId);\n        if (!currentUser) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        // Map the issue type to valid flagType enum values\n        const flagTypeMapping = {\n          technical: \"quality_concern\",\n          behavior: \"inappropriate_behavior\",\n          quality: \"quality_concern\",\n          scheduling: \"scheduling_issues\",\n          other: \"quality_concern\",\n        };\n\n        const flagType = flagTypeMapping[type] || \"quality_concern\";\n        const companyDomain = currentUser.company\n          ? currentUser.company.toLowerCase().replace(/[^a-z0-9]/g, \"\") + \".com\"\n          : currentUser.email.split(\"@\")[1];\n\n        // Create a flag for tracking (using the existing flag system)\n        const flag = await storage.createDMFlag({\n          dmId: currentUser._id.toString(),\n          flaggedBy: currentUser._id.toString(),\n          companyDomain: companyDomain,\n          flagType: flagType,\n          description: `${type}: ${description}`,\n          severity: priority || \"medium\",\n          status: \"open\",\n        });\n\n        // Log activity\n        await storage.createActivityLog({\n          action: \"REPORT_ISSUE\",\n          performedBy: req.user!.userId,\n          details: `Reported issue: ${type}`,\n          metadata: {\n            issueType: type,\n            priority,\n            flagId: flag._id,\n          },\n        });\n\n        res.json({\n          success: true,\n          message: \"Issue reported successfully\",\n          issueId: flag._id,\n        });\n      } catch (error) {\n        console.error(\"Error reporting issue:\", error);\n        res.status(500).json({ message: \"Failed to report issue\" });\n      }\n    },\n  );\n\n  // Get feedback history for decision makers\n  app.get(\n    \"/api/decision-maker/feedback-history\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const currentUser = await storage.getUserById(req.user!.userId);\n        if (!currentUser) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        // Get feedback where this DM provided evaluations\n        const feedback = await storage.getFeedbackByRep(\n          currentUser._id.toString(),\n        );\n\n        // Format feedback for frontend\n        const formattedFeedback = feedback.map((item) => ({\n          id: item._id,\n          callId: item.callId,\n          salesRepId: item.salesRepId,\n          salesRepName: item.salesRepName,\n          company: item.company,\n          rating: item.rating,\n          experience: item.experience,\n          experienceTitle: item.experienceTitle,\n          comments: item.comments,\n          callDate: item.callDate,\n          evaluatedAt: item.evaluatedAt,\n          isRedFlag: item.isRedFlag || false,\n        }));\n\n        res.json(formattedFeedback);\n      } catch (error) {\n        console.error(\"Error fetching feedback history:\", error);\n        res.status(500).json({ message: \"Failed to fetch feedback history\" });\n      }\n    },\n  );\n\n  // Initial feedback endpoints for post-call emails\n\n  // Decision Maker initial feedback submission\n  app.post(\"/api/decision-maker/initial-feedback/:callId\", async (req, res) => {\n    try {\n      const { callId } = req.params;\n      const { callTookPlace, wasPoliteEngaged, comments } = req.body;\n\n      // Get call information\n      const call = await storage.getCallById(callId);\n      if (!call) {\n        return res.status(404).json({ message: \"Call not found\" });\n      }\n\n      // Store initial feedback\n      const initialFeedback = {\n        callId,\n        userId: call.decisionMakerId,\n        userType: \"decision_maker\",\n        callTookPlace: callTookPlace === \"yes\",\n        wasPoliteEngaged,\n        comments: comments || \"\",\n        submittedAt: new Date(),\n      };\n\n      await storage.saveInitialFeedback(initialFeedback);\n\n      // Determine if should proceed to rating system\n      let proceedToRating = false;\n      if (callTookPlace === \"yes\") {\n        proceedToRating = true;\n      }\n\n      res.json({\n        success: true,\n        proceedToRating,\n        message: proceedToRating\n          ? \"Proceeding to rating system\"\n          : \"Feedback submitted successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error submitting DM initial feedback:\", error);\n      res.status(500).json({ message: \"Failed to submit feedback\" });\n    }\n  });\n\n  // Sales Rep initial feedback submission\n  app.post(\"/api/sales-rep/initial-feedback/:callId\", async (req, res) => {\n    try {\n      const { callId } = req.params;\n      const { callTookPlace, wasPoliteEngaged, comments } = req.body;\n\n      // Get call information\n      const call = await storage.getCallById(callId);\n      if (!call) {\n        return res.status(404).json({ message: \"Call not found\" });\n      }\n\n      // Store initial feedback\n      const initialFeedback = {\n        callId,\n        userId: call.salesRepId,\n        userType: \"sales_rep\",\n        callTookPlace: callTookPlace === \"yes\",\n        wasPoliteEngaged,\n        comments: comments || \"\",\n        submittedAt: new Date(),\n      };\n\n      await storage.saveInitialFeedback(initialFeedback);\n\n      // Determine if should proceed to rating system\n      let proceedToRating = false;\n      if (callTookPlace === \"yes\") {\n        proceedToRating = true;\n      }\n\n      res.json({\n        success: true,\n        proceedToRating,\n        message: proceedToRating\n          ? \"Proceeding to rating system\"\n          : \"Feedback submitted successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error submitting Rep initial feedback:\", error);\n      res.status(500).json({ message: \"Failed to submit feedback\" });\n    }\n  });\n\n  // Manual trigger for the background email job (for testing)\n  app.post(\"/api/test/trigger-email-job\", async (req, res) => {\n    try {\n      console.log(\"Manual trigger of post-call feedback email job\");\n      await sendPostCallFeedbackEmails();\n      res.json({ success: true, message: \"Email job triggered successfully\" });\n    } catch (error) {\n      console.error(\"Error triggering email job:\", error);\n      res.status(500).json({ message: \"Failed to trigger email job\" });\n    }\n  });\n\n  // Debug endpoint to check call status (for testing)\n  app.get(\"/api/test/check-calls\", async (req, res) => {\n    try {\n      const allCalls = await storage.getAllCalls();\n      const callsInfo = allCalls.map((call) => ({\n        id: call._id,\n        status: call.status,\n        scheduledAt: call.scheduledAt,\n        completedAt: call.completedAt,\n        endTime: call.endTime,\n        salesRepId: call.salesRepId,\n        decisionMakerId: call.decisionMakerId,\n      }));\n\n      res.json({\n        totalCalls: allCalls.length,\n        calls: callsInfo,\n      });\n    } catch (error) {\n      console.error(\"Error checking calls:\", error);\n      res.status(500).json({ message: \"Failed to check calls\" });\n    }\n  });\n\n  // Test endpoint to manually complete a call and trigger emails (for testing)\n  app.post(\"/api/test/complete-call/:callId\", async (req, res) => {\n    try {\n      const { callId } = req.params;\n\n      // Get call information\n      const call = await storage.getCallById(callId);\n      if (!call) {\n        return res.status(404).json({ message: \"Call not found\" });\n      }\n\n      // Mark call as completed\n      const completedAt = new Date();\n      await storage.updateCall(callId, {\n        status: \"completed\",\n        completedAt: completedAt,\n      });\n\n      console.log(`Manually completed call ${callId} for testing`);\n\n      // Trigger email job to send feedback emails\n      await sendPostCallFeedbackEmails();\n\n      res.json({\n        success: true,\n        message: `Call ${callId} marked as completed and feedback emails triggered`,\n        completedAt: completedAt,\n      });\n    } catch (error) {\n      console.error(\"Error completing call:\", error);\n      res.status(500).json({ message: \"Failed to complete call\" });\n    }\n  });\n\n  // Test endpoint to force send email to a specific call (for testing)\n  app.get(\"/api/test/send-email/:callId\", async (req, res) => {\n    try {\n      const { callId } = req.params;\n\n      // Get call information\n      const call = await storage.getCallById(callId);\n      if (!call) {\n        return res.status(404).json({ message: \"Call not found\" });\n      }\n\n      // Ensure call has completedAt timestamp\n      if (!call.completedAt) {\n        console.log(`Setting completedAt for call ${callId}`);\n        const completedAt = new Date();\n        await storage.updateCall(callId, { completedAt });\n        call.completedAt = completedAt;\n      }\n\n      // Get user details\n      const salesRep = await storage.getUser(call.salesRepId);\n      const decisionMaker = await storage.getUser(call.decisionMakerId);\n\n      if (!salesRep || !decisionMaker) {\n        return res.status(404).json({ message: \"User data not found\" });\n      }\n\n      const results = [];\n\n      // Send emails regardless of existing feedback\n      try {\n        await sendPostCallFeedbackToDM(\n          decisionMaker.email,\n          decisionMaker.firstName,\n          salesRep.firstName,\n          callId,\n        );\n        results.push(\"DM email sent successfully\");\n        console.log(`✓ Email sent to DM: ${decisionMaker.email}`);\n      } catch (error) {\n        results.push(`DM email failed: ${error.message}`);\n        console.error(\"✗ DM email error:\", error);\n      }\n\n      try {\n        await sendPostCallFeedbackToRep(\n          salesRep.email,\n          salesRep.firstName,\n          decisionMaker.firstName,\n          callId,\n        );\n        results.push(\"Rep email sent successfully\");\n        console.log(`✓ Email sent to Rep: ${salesRep.email}`);\n      } catch (error) {\n        results.push(`Rep email failed: ${error.message}`);\n        console.error(\"✗ Rep email error:\", error);\n      }\n\n      res.json({\n        success: true,\n        results,\n        callDetails: {\n          callId,\n          salesRep: `${salesRep.firstName} ${salesRep.lastName} (${salesRep.email})`,\n          decisionMaker: `${decisionMaker.firstName} ${decisionMaker.lastName} (${decisionMaker.email})`,\n          callTime: call.scheduledAt,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error sending test email:\", error);\n      res.status(500).json({ message: \"Failed to send test email\" });\n    }\n  });\n\n  // Test endpoint for sending post-call feedback emails manually\n  app.post(\n    \"/api/test/send-feedback-emails/:callId\",\n    authenticateToken,\n    async (req, res) => {\n      try {\n        const { callId } = req.params;\n\n        // Get call information\n        const call = await storage.getCallById(callId);\n        if (!call) {\n          return res.status(404).json({ message: \"Call not found\" });\n        }\n\n        // Get user details\n        const salesRep = await storage.getUser(call.salesRepId);\n        const decisionMaker = await storage.getUser(call.decisionMakerId);\n\n        if (!salesRep || !decisionMaker) {\n          return res.status(404).json({ message: \"User data not found\" });\n        }\n\n        // Send feedback emails\n        const results = [];\n\n        try {\n          await sendPostCallFeedbackToDM(\n            decisionMaker.email,\n            decisionMaker.firstName,\n            salesRep.firstName,\n            callId,\n          );\n          results.push(\"DM email sent successfully\");\n        } catch (error) {\n          results.push(`DM email failed: ${error.message}`);\n        }\n\n        try {\n          await sendPostCallFeedbackToRep(\n            salesRep.email,\n            salesRep.firstName,\n            decisionMaker.firstName,\n            callId,\n          );\n          results.push(\"Rep email sent successfully\");\n        } catch (error) {\n          results.push(`Rep email failed: ${error.message}`);\n        }\n\n        res.json({\n          success: true,\n          results,\n          callDetails: {\n            salesRep: `${salesRep.firstName} ${salesRep.lastName} (${salesRep.email})`,\n            decisionMaker: `${decisionMaker.firstName} ${decisionMaker.lastName} (${decisionMaker.email})`,\n            callTime: call.scheduledAt,\n          },\n        });\n      } catch (error) {\n        console.error(\"Error testing feedback emails:\", error);\n        res.status(500).json({ message: \"Failed to test feedback emails\" });\n      }\n    },\n  );\n\n  // Background job for sending post-call feedback emails\n  const sendPostCallFeedbackEmails = async () => {\n    try {\n      console.log(\"Running post-call feedback email job...\");\n      const now = new Date();\n      const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000); // 1 hour ago\n\n      // Get all calls that ended between 30 minutes and 1 hour ago\n      const recentlyCompletedCalls = await storage.getAllCalls();\n      console.log(\n        `Found ${recentlyCompletedCalls.length} total calls in database`,\n      );\n\n      // Check for calls that should be auto-completed (scheduled calls that have passed their time)\n      // For testing: Use 5 minutes instead of 30 minutes to auto-complete calls quickly\n      const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);\n      const twentyFourHoursAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n\n      // Auto-complete scheduled calls that have passed their scheduled time\n      for (const call of recentlyCompletedCalls) {\n        console.log(\n          `Checking call ${call._id}: status=${call.status}, scheduledAt=${call.scheduledAt}, completedAt=${call.completedAt}`,\n        );\n\n        // Fix completed calls that don't have completedAt timestamp\n        if (call.status === \"completed\" && !call.completedAt) {\n          console.log(\n            `Fixing completed call ${call._id} - adding completedAt timestamp`,\n          );\n          try {\n            const completedAt = new Date();\n            await storage.updateCall(call._id.toString(), {\n              completedAt: completedAt,\n            });\n            call.completedAt = completedAt;\n            console.log(`Successfully added completedAt to call ${call._id}`);\n          } catch (error) {\n            console.error(\n              `Failed to add completedAt to call ${call._id}:`,\n              error,\n            );\n          }\n        }\n\n        if (call.status === \"scheduled\" && call.scheduledAt) {\n          const scheduledTime = new Date(call.scheduledAt);\n          const callEndTime = new Date(\n            scheduledTime.getTime() + 15 * 60 * 1000,\n          ); // Add 15 minutes duration\n\n          console.log(\n            `Call ${call._id}: scheduled=${scheduledTime}, endTime=${callEndTime}, fiveMinutesAgo=${fiveMinutesAgo}`,\n          );\n\n          // If the call end time was more than 5 minutes ago, auto-complete it\n          if (callEndTime <= fiveMinutesAgo) {\n            console.log(\n              `Auto-completing scheduled call ${call._id} that ended at ${callEndTime}`,\n            );\n            try {\n              const completedAt = new Date();\n              await storage.updateCall(call._id.toString(), {\n                status: \"completed\",\n                completedAt: completedAt,\n              });\n              call.status = \"completed\";\n              call.completedAt = completedAt;\n              console.log(`Successfully auto-completed call ${call._id}`);\n            } catch (error) {\n              console.error(`Failed to auto-complete call ${call._id}:`, error);\n            }\n          }\n        }\n      }\n\n      // Re-fetch all calls to get the latest completedAt timestamps\n      const updatedCalls = await storage.getAllCalls();\n\n      // Now process calls that have been explicitly marked as completed (including auto-completed ones)\n      const callsToProcess = updatedCalls.filter((call) => {\n        console.log(\n          `Filtering call ${call._id}: status=${call.status}, completedAt=${call.completedAt}`,\n        );\n        if (call.status !== \"completed\") {\n          console.log(`Call ${call._id} filtered out: status is not completed`);\n          return false;\n        }\n        if (!call.completedAt) {\n          console.log(\n            `Call ${call._id} filtered out: no completedAt timestamp`,\n          );\n          return false;\n        }\n        const completedTime = new Date(call.completedAt);\n        const isWithinTimeRange =\n          completedTime >= twentyFourHoursAgo && completedTime <= now;\n        console.log(\n          `Call ${call._id}: completedTime=${completedTime}, twentyFourHoursAgo=${twentyFourHoursAgo}, now=${now}, withinRange=${isWithinTimeRange}`,\n        );\n        return isWithinTimeRange;\n      });\n\n      console.log(\n        `Found ${callsToProcess.length} calls that were marked as completed in the last 24 hours`,\n      );\n\n      if (callsToProcess.length > 0) {\n        console.log(\n          \"Calls to process:\",\n          callsToProcess.map((call) => ({\n            id: call._id,\n            completedAt: call.completedAt,\n            status: call.status,\n            salesRepId: call.salesRepId,\n            decisionMakerId: call.decisionMakerId,\n          })),\n        );\n      }\n\n      for (const call of callsToProcess) {\n        try {\n          // Check if feedback emails already sent\n          const dmFeedbackExists = await storage.getInitialFeedback(\n            call._id.toString(),\n            \"decision_maker\",\n          );\n          const repFeedbackExists = await storage.getInitialFeedback(\n            call._id.toString(),\n            \"sales_rep\",\n          );\n\n          // Get user details\n          const salesRep = await storage.getUser(call.salesRepId);\n          const decisionMaker = await storage.getUser(call.decisionMakerId);\n\n          if (!salesRep || !decisionMaker) {\n            console.log(`Skipping call ${call._id} - missing user data`);\n            continue;\n          }\n\n          // Send DM feedback email if not already sent\n          if (!dmFeedbackExists) {\n            console.log(\n              `Sending post-call feedback email to DM: ${decisionMaker.email}`,\n            );\n            await sendPostCallFeedbackToDM(\n              decisionMaker.email,\n              decisionMaker.firstName,\n              salesRep.firstName,\n              call._id.toString(),\n            );\n          }\n\n          // Send Rep feedback email if not already sent\n          if (!repFeedbackExists) {\n            console.log(\n              `Sending post-call feedback email to Rep: ${salesRep.email}`,\n            );\n            await sendPostCallFeedbackToRep(\n              salesRep.email,\n              salesRep.firstName,\n              decisionMaker.firstName,\n              call._id.toString(),\n            );\n          }\n        } catch (emailError) {\n          console.error(\n            `Error sending feedback email for call ${call._id}:`,\n            emailError,\n          );\n        }\n      }\n    } catch (error) {\n      console.error(\"Error in post-call feedback email job:\", error);\n    }\n  };\n\n  // Run the background job every 5 minutes for testing\n  setInterval(sendPostCallFeedbackEmails, 5 * 60 * 1000);\n\n  // Run once on startup (after a 30-second delay to ensure everything is loaded)\n  setTimeout(sendPostCallFeedbackEmails, 30 * 1000);\n\n  console.log(\"Post-call feedback email job scheduled to run every 5 minutes\");\n\n  // Debug endpoint to check DM users and their invitedBy status\n  app.get(\"/api/debug/dm-users-status\", async (req, res) => {\n    try {\n      const dmUsers = await storage.getUsersByRole(\"decision_maker\");\n      const dmStatus = dmUsers.map((dm) => ({\n        id: dm.id,\n        email: dm.email,\n        name: `${dm.firstName} ${dm.lastName}`,\n        calendarEnabled: dm.calendarIntegrationEnabled,\n        invitedBy: dm.invitedBy,\n        flagsReceived: dm.flagsReceived || 0,\n      }));\n\n      console.log(\"DM Users Status:\", dmStatus);\n      res.json({ dmUsers: dmStatus });\n    } catch (error) {\n      console.error(\"Error checking DM users status:\", error);\n      res.status(500).json({ error: \"Failed to check DM users status\" });\n    }\n  });\n\n  // Debug endpoint to manually test calendar disconnection flagging\n  app.post(\"/api/debug/test-calendar-disconnection\", async (req, res) => {\n    try {\n      const { dmId, salesRepId } = req.body;\n\n      if (!dmId || !salesRepId) {\n        return res.status(400).json({ error: \"dmId and salesRepId required\" });\n      }\n\n      const dmUser = await storage.getUser(dmId);\n      const salesRep = await storage.getUser(salesRepId);\n\n      if (!dmUser || !salesRep) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      console.log(\n        `Manual test: DM ${dmUser.email} disconnecting calendar, flagging sales rep ${salesRep.email}`,\n      );\n\n      // Manually trigger the calendar disconnection flag\n      await handleCalendarDisconnectionFlag(salesRepId, dmId, dmUser);\n\n      res.json({\n        success: true,\n        message: `Calendar disconnection flag processed for sales rep ${salesRep.email}`,\n      });\n    } catch (error) {\n      console.error(\"Error testing calendar disconnection:\", error);\n      res.status(500).json({ error: \"Failed to test calendar disconnection\" });\n    }\n  });\n\n  // Debug endpoint to test referral credit award\n  app.post(\"/api/debug/test-referral-credit\", async (req, res) => {\n    try {\n      const { dmId, salesRepId } = req.body;\n\n      if (!dmId || !salesRepId) {\n        return res.status(400).json({ error: \"dmId and salesRepId required\" });\n      }\n\n      const dmUser = await storage.getUser(dmId);\n      if (!dmUser) {\n        return res.status(404).json({ error: \"DM not found\" });\n      }\n\n      console.log(\n        `Testing referral credit award for DM ${dmUser.email} to sales rep ${salesRepId}`,\n      );\n\n      // Manually trigger the referral credit award\n      await handleCalendarConnectionCredit(salesRepId, dmId, dmUser);\n\n      res.json({\n        success: true,\n        message: `Referral credit test completed for DM ${dmUser.email}`,\n      });\n    } catch (error) {\n      console.error(\"Error testing referral credit:\", error);\n      res.status(500).json({ error: \"Failed to test referral credit\" });\n    }\n  });\n\n  // Debug endpoint to test call booking capability\n  app.post(\"/api/debug/can-book-call\", async (req, res) => {\n    try {\n      const { userId, userRole } = req.body;\n\n      if (!userId || !userRole) {\n        return res.status(400).json({ error: \"userId and userRole required\" });\n      }\n\n      const result = await storage.canUserBookCall(userId, userRole);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error testing call booking:\", error);\n      res.status(500).json({ error: \"Failed to test call booking capability\" });\n    }\n  });\n\n  // Debug endpoint to disconnect DM calendar\n  app.post(\"/api/debug/disconnect-dm-calendar\", async (req, res) => {\n    try {\n      const { dmId } = req.body;\n\n      if (!dmId) {\n        return res.status(400).json({ error: \"dmId required\" });\n      }\n\n      const updatedUser = await storage.updateUser(dmId, {\n        calendarIntegrationEnabled: false,\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ error: \"DM not found\" });\n      }\n\n      res.json({\n        success: true,\n        message: `DM ${updatedUser.email} calendar disconnected`,\n        calendarEnabled: updatedUser.calendarIntegrationEnabled,\n      });\n    } catch (error) {\n      console.error(\"Error disconnecting DM calendar:\", error);\n      res.status(500).json({ error: \"Failed to disconnect DM calendar\" });\n    }\n  });\n\n  // Debug endpoint to get sales rep IDs\n  app.get(\"/api/debug/sales-rep-ids\", async (req, res) => {\n    try {\n      const salesReps = await storage.getUsersByRole(\"sales_rep\");\n      const salesRepData = salesReps.map((rep) => ({\n        id: rep.id,\n        email: rep.email,\n        name: `${rep.firstName} ${rep.lastName}`,\n        flagsReceived: rep.flagsReceived || 0,\n      }));\n\n      console.log(\"Sales Rep IDs:\", salesRepData);\n      res.json({ salesReps: salesRepData });\n    } catch (error) {\n      console.error(\"Error getting sales rep IDs:\", error);\n      res.status(500).json({ error: \"Failed to get sales rep IDs\" });\n    }\n  });\n\n  // Debug endpoint to manually link a DM to a sales rep\n  app.post(\"/api/debug/link-dm-to-rep\", async (req, res) => {\n    try {\n      const { dmId, salesRepId } = req.body;\n\n      if (!dmId || !salesRepId) {\n        return res.status(400).json({ error: \"dmId and salesRepId required\" });\n      }\n\n      const updatedDM = await storage.updateUser(dmId, {\n        invitedBy: salesRepId,\n        calendarIntegrationEnabled: true,\n      });\n\n      if (!updatedDM) {\n        return res.status(404).json({ error: \"DM not found\" });\n      }\n\n      console.log(\n        `Linked DM ${updatedDM.email} to sales rep ${salesRepId} and enabled calendar`,\n      );\n      res.json({\n        success: true,\n        message: `DM ${updatedDM.email} linked to sales rep and calendar enabled`,\n      });\n    } catch (error) {\n      console.error(\"Error linking DM to rep:\", error);\n      res.status(500).json({ error: \"Failed to link DM to rep\" });\n    }\n  });\n\n  // Email Addon Purchase Route (for basic/pro users)\n  app.post(\"/api/purchase-email-addon\", authenticateToken, async (req, res) => {\n    console.log(\n      \"EMAIL ADDON PURCHASE: Route hit with userId:\",\n      req.user?.userId,\n    );\n    try {\n      const userId = req.user!.userId;\n      console.log(\"EMAIL ADDON PURCHASE: Getting user by ID:\", userId);\n      const user = await storage.getUserById(userId);\n      console.log(\"EMAIL ADDON PURCHASE: User found:\", user ? \"Yes\" : \"No\");\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Check if user already has addon\n      if (user.hasEmailAddon) {\n        return res\n          .status(400)\n          .json({ message: \"Email addon already purchased\" });\n      }\n\n      // Check if user is on enterprise plan (they get it for free)\n      if (user.packageType === \"enterprise\") {\n        return res\n          .status(400)\n          .json({ message: \"Enterprise users have full access included\" });\n      }\n\n      // Create Stripe payment intent for $5\n      console.log(\"EMAIL ADDON PURCHASE: Creating Stripe payment intent...\");\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: 500, // $5.00 in cents\n        currency: \"usd\",\n        metadata: {\n          userId: userId.toString(),\n          addonType: \"email_access\",\n        },\n      });\n\n      console.log(\n        \"EMAIL ADDON PURCHASE: Payment intent created:\",\n        paymentIntent.id,\n      );\n      const response = {\n        clientSecret: paymentIntent.client_secret,\n        amount: 500,\n      };\n      console.log(\"EMAIL ADDON PURCHASE: Sending response:\", response);\n      res.json(response);\n    } catch (error: any) {\n      console.error(\"Email addon purchase error:\", error);\n      res.status(500).json({\n        message:\n          \"Error creating payment intent: \" +\n          (error?.message || \"Unknown error\"),\n      });\n    }\n  });\n\n  // Test endpoint to verify authentication is working\n  app.get(\"/api/test-auth\", authenticateToken, async (req, res) => {\n    console.log(\"TEST AUTH: Route hit with userId:\", req.user?.userId);\n    const user = await storage.getUserById(req.user!.userId);\n    res.json({\n      success: true,\n      userId: req.user?.userId,\n      userEmail: user?.email,\n      hasEmailAddon: user?.hasEmailAddon,\n    });\n  });\n\n  // Confirm Email Addon Purchase\n  app.post(\n    \"/api/confirm-email-addon-purchase\",\n    authenticateToken,\n    async (req, res) => {\n      console.log(\"CONFIRM ADDON: Route hit with userId:\", req.user?.userId);\n      console.log(\"CONFIRM ADDON: Request body:\", req.body);\n      try {\n        const { paymentIntentId } = req.body;\n        const userId = req.user!.userId;\n        console.log(\n          \"CONFIRM ADDON: PaymentIntentId:\",\n          paymentIntentId,\n          \"UserId:\",\n          userId,\n        );\n\n        if (!paymentIntentId) {\n          console.log(\"CONFIRM ADDON: Missing payment intent ID\");\n          return res\n            .status(400)\n            .json({ message: \"Payment intent ID is required\" });\n        }\n\n        // Verify payment with Stripe\n        console.log(\"CONFIRM ADDON: Retrieving payment intent from Stripe...\");\n        const paymentIntent =\n          await stripe.paymentIntents.retrieve(paymentIntentId);\n        console.log(\n          \"CONFIRM ADDON: Payment intent status:\",\n          paymentIntent.status,\n        );\n        console.log(\n          \"CONFIRM ADDON: Payment intent metadata:\",\n          paymentIntent.metadata,\n        );\n\n        if (paymentIntent.status !== \"succeeded\") {\n          console.log(\n            \"CONFIRM ADDON: Payment not succeeded, status:\",\n            paymentIntent.status,\n          );\n          return res.status(400).json({\n            message: `Payment not completed. Status: ${paymentIntent.status}`,\n          });\n        }\n\n        // Verify payment belongs to user (if metadata exists)\n        if (paymentIntent.metadata?.userId) {\n          const expectedUserId = userId.toString();\n          const actualUserId = paymentIntent.metadata.userId;\n          console.log(\n            \"CONFIRM ADDON: User ID check - Expected:\",\n            expectedUserId,\n            \"Actual:\",\n            actualUserId,\n          );\n\n          if (actualUserId !== expectedUserId) {\n            console.log(\"CONFIRM ADDON: User ID mismatch\");\n            return res\n              .status(400)\n              .json({ message: \"Payment not associated with this user\" });\n          }\n        } else {\n          console.log(\n            \"CONFIRM ADDON: No metadata found, proceeding with payment confirmation\",\n          );\n        }\n\n        // Check if user already has addon before updating\n        console.log(\"CONFIRM ADDON: Checking current user status...\");\n        const currentUser = await storage.getUserById(userId);\n        if (!currentUser) {\n          console.log(\"CONFIRM ADDON: User not found\");\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        if (currentUser.hasEmailAddon) {\n          console.log(\"CONFIRM ADDON: User already has addon\");\n          return res.json({\n            success: true,\n            message: \"Email addon already active\",\n            alreadyActive: true,\n          });\n        }\n\n        // Update user with email addon\n        console.log(\"CONFIRM ADDON: Updating user with addon...\");\n        const updateData = {\n          hasEmailAddon: true,\n          emailAddonPurchaseDate: new Date(),\n        };\n        console.log(\"CONFIRM ADDON: Update data:\", updateData);\n\n        const updatedUser = await storage.updateUser(userId, updateData);\n        console.log(\n          \"CONFIRM ADDON: User updated result:\",\n          updatedUser ? \"Success\" : \"Failed\",\n        );\n\n        if (!updatedUser) {\n          console.log(\"CONFIRM ADDON: Failed to update user\");\n          return res\n            .status(500)\n            .json({ message: \"Failed to update user with addon\" });\n        }\n\n        // Verify the update worked\n        const verifyUser = await storage.getUserById(userId);\n        console.log(\n          \"CONFIRM ADDON: Verification - hasEmailAddon:\",\n          verifyUser?.hasEmailAddon,\n        );\n\n        res.json({\n          success: true,\n          message: \"Email addon purchased successfully\",\n          hasEmailAddon: verifyUser?.hasEmailAddon || false,\n        });\n      } catch (error: any) {\n        console.error(\"Email addon confirmation error:\", error);\n        res.status(500).json({\n          message:\n            \"Error confirming purchase: \" + (error?.message || \"Unknown error\"),\n          error: error?.message,\n        });\n      }\n    },\n  );\n\n  // Temporary admin endpoint to fix email addon status\n  app.post(\"/api/admin/fix-email-addon/:email\", async (req, res) => {\n    try {\n      const email = req.params.email;\n      console.log(\"ADMIN: Fixing email addon for:\", email);\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const updatedUser = await storage.updateUser(user._id, {\n        hasEmailAddon: true,\n        emailAddonPurchaseDate: new Date(),\n      });\n\n      console.log(\n        \"ADMIN: User email addon activated:\",\n        updatedUser ? \"Success\" : \"Failed\",\n      );\n      res.json({\n        success: true,\n        message: \"Email addon activated\",\n        user: updatedUser,\n      });\n    } catch (error: any) {\n      console.error(\"Admin fix error:\", error);\n      res.status(500).json({ message: \"Error: \" + error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":288456},"server/simple-mongodb-storage.ts":{"content":"import {\n  User,\n  Invitation,\n  Call,\n  SubscriptionPlan,\n  CompanyCredits,\n  CallLog,\n  Feedback,\n  CompanyDMs,\n  DMFlags,\n  RepSuspension,\n  CallCredits,\n  DMRepCreditUsage,\n  PlatformSettings,\n  ActivityLog,\n  MonthlyCallLimit,\n  InitialFeedback,\n  connectToMongoDB,\n} from \"./mongodb\";\nimport type { IStorage } from \"./storage\";\nimport bcrypt from \"bcrypt\";\n\nexport class SimpleMongoDBStorage implements IStorage {\n  async getUser(id: string): Promise<any | undefined> {\n    try {\n      const user = await User.findById(id);\n      return user ? this.toPlainObject(user) : undefined;\n    } catch (error) {\n      console.error(\"Error getting user:\", error);\n      return undefined;\n    }\n  }\n\n  async getUserByUsername(username: string): Promise<any | undefined> {\n    // MongoDB doesn't have username field, use email instead\n    return this.getUserByEmail(username);\n  }\n\n  async getUserByEmail(email: string): Promise<any | undefined> {\n    try {\n      await connectToMongoDB();\n      console.log(\"Looking for user with email:\", email);\n      const user = await User.findOne({ email });\n      console.log(\"Found user:\", user ? \"YES\" : \"NO\");\n      return user ? this.toPlainObject(user) : undefined;\n    } catch (error) {\n      console.error(\"Error getting user by email:\", error);\n      return undefined;\n    }\n  }\n\n  async createUser(userData: any): Promise<any> {\n    try {\n      // Hash password if not already hashed\n      if (userData.password && !userData.password.startsWith(\"$2b$\")) {\n        const saltRounds = 10;\n        userData.password = await bcrypt.hash(userData.password, saltRounds);\n      }\n\n      const user = new User(userData);\n      await user.save();\n      return this.toPlainObject(user);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      throw error;\n    }\n  }\n\n  async updateUser(id: string, updates: any): Promise<any | undefined> {\n    try {\n      const user = await User.findByIdAndUpdate(id, updates, { new: true });\n      return user ? this.toPlainObject(user) : undefined;\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      return undefined;\n    }\n  }\n\n  async getInvitationsByUserId(userId: string): Promise<any[]> {\n    try {\n      const invitations = await Invitation.find({ salesRepId: userId });\n      return invitations.map((inv) => this.toPlainObject(inv));\n    } catch (error) {\n      console.error(\"Error getting invitations:\", error);\n      return [];\n    }\n  }\n\n  async getInvitationsByRep(repId: string): Promise<any[]> {\n    try {\n      const invitations = await Invitation.find({ salesRepId: repId });\n      return invitations.map((inv) => this.toPlainObject(inv));\n    } catch (error) {\n      console.error(\"Error getting invitations by rep:\", error);\n      return [];\n    }\n  }\n\n  async getInvitationById(id: string): Promise<any | undefined> {\n    try {\n      const invitation = await Invitation.findById(id);\n      return invitation ? this.toPlainObject(invitation) : undefined;\n    } catch (error) {\n      console.error(\"Error getting invitation by ID:\", error);\n      return undefined;\n    }\n  }\n\n  async createInvitation(invitationData: any): Promise<any> {\n    try {\n      const invitation = new Invitation(invitationData);\n      await invitation.save();\n      return this.toPlainObject(invitation);\n    } catch (error) {\n      console.error(\"Error creating invitation:\", error);\n      throw error;\n    }\n  }\n\n  async updateInvitationStatus(\n    id: string,\n    status: string,\n  ): Promise<any | undefined> {\n    try {\n      const invitation = await Invitation.findByIdAndUpdate(\n        id,\n        { status },\n        { new: true },\n      );\n      return invitation ? this.toPlainObject(invitation) : undefined;\n    } catch (error) {\n      console.error(\"Error updating invitation status:\", error);\n      return undefined;\n    }\n  }\n\n  async getCallsByUserId(userId: string): Promise<any[]> {\n    try {\n      const calls = await Call.find({\n        $or: [{ salesRepId: userId }, { decisionMakerId: userId }],\n      });\n\n      // Populate decision maker names for sales rep calls\n      const populatedCalls = [];\n      for (const call of calls) {\n        const callObj = this.toPlainObject(call);\n\n        // If this is a sales rep viewing their calls, populate DM name\n        if (call.salesRepId.toString() === userId) {\n          const decisionMaker = await User.findById(call.decisionMakerId);\n          callObj.decisionMakerName = decisionMaker\n            ? `${decisionMaker.firstName} ${decisionMaker.lastName}`\n            : \"Unknown\";\n          callObj.dmName = callObj.decisionMakerName; // Also set dmName for backward compatibility\n        }\n\n        // If this is a decision maker viewing their calls, populate sales rep name\n        if (call.decisionMakerId.toString() === userId) {\n          const salesRep = await User.findById(call.salesRepId);\n          callObj.salesRepName = salesRep\n            ? `${salesRep.firstName} ${salesRep.lastName}`\n            : \"Unknown\";\n          callObj.company = salesRep ? salesRep.company : \"\";\n        }\n\n        populatedCalls.push(callObj);\n      }\n\n      return populatedCalls;\n    } catch (error) {\n      console.error(\"Error getting calls:\", error);\n      return [];\n    }\n  }\n\n  async createCall(callData: any): Promise<any> {\n    try {\n      const call = new Call(callData);\n      await call.save();\n      return this.toPlainObject(call);\n    } catch (error) {\n      console.error(\"Error creating call:\", error);\n      throw error;\n    }\n  }\n\n  async updateCall(id: string, updates: any): Promise<any | undefined> {\n    try {\n      const call = await Call.findByIdAndUpdate(id, updates, { new: true });\n      return call ? this.toPlainObject(call) : undefined;\n    } catch (error) {\n      console.error(\"Error updating call:\", error);\n      return undefined;\n    }\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    try {\n      await connectToMongoDB();\n      const result = await User.findByIdAndDelete(id);\n      return !!result;\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      return false;\n    }\n  }\n\n  async getAllUsers(): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const users = await User.find({}).sort({ createdAt: -1 });\n      return users.map((user) => this.toPlainObject(user));\n    } catch (error) {\n      console.error(\"Error getting all users:\", error);\n      return [];\n    }\n  }\n\n  async getAllInvitations(): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const invitations = await Invitation.find({}).sort({ createdAt: -1 });\n\n      // Populate sales rep names\n      const populatedInvitations = [];\n      for (const invitation of invitations) {\n        const salesRep = await User.findById(invitation.salesRepId);\n        const invitationObj = this.toPlainObject(invitation);\n        invitationObj.salesRepName = salesRep\n          ? `${salesRep.firstName} ${salesRep.lastName}`\n          : \"Unknown\";\n        populatedInvitations.push(invitationObj);\n      }\n\n      return populatedInvitations;\n    } catch (error) {\n      console.error(\"Error getting all invitations:\", error);\n      return [];\n    }\n  }\n\n  async getAllCalls(): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const calls = await Call.find({}).sort({ createdAt: -1 });\n      console.log(`getAllCalls: Found ${calls.length} calls in database`);\n\n      // Populate user names\n      const populatedCalls = [];\n      for (const call of calls) {\n        const salesRep = await User.findById(call.salesRepId);\n        const decisionMaker = await User.findById(call.decisionMakerId);\n        const callObj = this.toPlainObject(call);\n        callObj.salesRepName = salesRep\n          ? `${salesRep.firstName} ${salesRep.lastName}`\n          : \"Unknown\";\n        callObj.decisionMakerName = decisionMaker\n          ? `${decisionMaker.firstName} ${decisionMaker.lastName}`\n          : \"Unknown\";\n        populatedCalls.push(callObj);\n      }\n\n      return populatedCalls;\n    } catch (error) {\n      console.error(\"Error getting all calls:\", error);\n      return [];\n    }\n  }\n\n  // Super Admin methods\n  async getUsersByRole(role: string): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const users = await User.find({ role }).sort({ createdAt: -1 });\n      return users.map((user) => this.toPlainObject(user));\n    } catch (error) {\n      console.error(\"Error getting users by role:\", error);\n      return [];\n    }\n  }\n\n  async getRecentInactiveSalesReps(limit: number): Promise<any[]> {\n    try {\n      console.log('getRecentInactiveSalesReps called with limit:', limit);\n      await connectToMongoDB();\n      \n      const users = await User.find({ \n        role: 'sales_rep', \n        isActive: false \n      })\n      .sort({ createdAt: -1 })\n      .limit(limit);\n      \n      console.log('Found inactive sales reps from DB:', users.length);\n      if (users.length > 0) {\n        console.log('Inactive users found:', users.map(u => ({ id: u._id, email: u.email, isActive: u.isActive })));\n      }\n      \n      return users.map((user) => this.toPlainObject(user));\n    } catch (error) {\n      console.error(\"Error getting recent inactive sales reps:\", error);\n      return [];\n    }\n  }\n\n  async getUsersWithPagination(\n    page: number,\n    limit: number,\n    filters?: any,\n  ): Promise<{ users: any[]; total: number }> {\n    try {\n      await connectToMongoDB();\n      const skip = (page - 1) * limit;\n      const query = filters || {};\n\n      const users = await User.find(query)\n        .sort({ createdAt: -1 })\n        .skip(skip)\n        .limit(limit);\n\n      const total = await User.countDocuments(query);\n\n      return {\n        users: users.map((user) => this.toPlainObject(user)),\n        total,\n      };\n    } catch (error) {\n      console.error(\"Error getting users with pagination:\", error);\n      return { users: [], total: 0 };\n    }\n  }\n\n  // Subscription Plan CRUD methods\n  async getAllSubscriptionPlans(): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const plans = await SubscriptionPlan.find({ isActive: true }).sort({\n        createdAt: 1,\n      });\n      return plans.map((plan) => ({\n        id: plan._id.toString(),\n        name: plan.name,\n        description: plan.description,\n        price: plan.price,\n        billingInterval: plan.billingInterval,\n        features: plan.features,\n        maxCallCredits: plan.maxCallCredits,\n        maxInvitations: plan.maxInvitations,\n        prioritySupport: plan.prioritySupport,\n        bestSeller: plan.bestSeller,\n        isActive: plan.isActive,\n        createdAt: plan.createdAt,\n        updatedAt: plan.updatedAt,\n      }));\n    } catch (error) {\n      console.error(\"Error getting subscription plans:\", error);\n      return [];\n    }\n  }\n\n  async getSubscriptionPlan(id: string): Promise<any | undefined> {\n    try {\n      await connectToMongoDB();\n      const plan = await SubscriptionPlan.findById(id);\n      if (plan) {\n        return {\n          id: plan._id.toString(),\n          name: plan.name,\n          description: plan.description,\n          price: plan.price,\n          billingInterval: plan.billingInterval,\n          features: plan.features,\n          maxCallCredits: plan.maxCallCredits,\n          maxInvitations: plan.maxInvitations,\n          prioritySupport: plan.prioritySupport,\n          bestSeller: plan.bestSeller,\n          isActive: plan.isActive,\n          createdAt: plan.createdAt,\n          updatedAt: plan.updatedAt,\n        };\n      }\n      return undefined;\n    } catch (error) {\n      console.error(\"Error getting subscription plan:\", error);\n      return undefined;\n    }\n  }\n\n  async createSubscriptionPlan(planData: any): Promise<any> {\n    try {\n      await connectToMongoDB();\n\n      // If this plan is marked as best seller, remove best seller from all other plans\n      if (planData.bestSeller) {\n        await SubscriptionPlan.updateMany({}, { $set: { bestSeller: false } });\n      }\n\n      const plan = new SubscriptionPlan(planData);\n      const savedPlan = await plan.save();\n\n      return {\n        id: savedPlan._id.toString(),\n        name: savedPlan.name,\n        description: savedPlan.description,\n        price: savedPlan.price,\n        billingInterval: savedPlan.billingInterval,\n        features: savedPlan.features,\n        maxCallCredits: savedPlan.maxCallCredits,\n        maxInvitations: savedPlan.maxInvitations,\n        prioritySupport: savedPlan.prioritySupport,\n        bestSeller: savedPlan.bestSeller,\n        isActive: savedPlan.isActive,\n        createdAt: savedPlan.createdAt,\n        updatedAt: savedPlan.updatedAt,\n      };\n    } catch (error) {\n      console.error(\"Error creating subscription plan:\", error);\n      throw error;\n    }\n  }\n\n  async updateSubscriptionPlan(\n    id: string,\n    updates: any,\n  ): Promise<any | undefined> {\n    try {\n      await connectToMongoDB();\n\n      // If this plan is being marked as best seller, remove best seller from all other plans\n      if (updates.bestSeller === true) {\n        await SubscriptionPlan.updateMany(\n          { _id: { $ne: id } },\n          { $set: { bestSeller: false } },\n        );\n      }\n\n      const updatedPlan = await SubscriptionPlan.findByIdAndUpdate(\n        id,\n        { ...updates, updatedAt: new Date() },\n        { new: true },\n      );\n\n      if (updatedPlan) {\n        return {\n          id: updatedPlan._id.toString(),\n          name: updatedPlan.name,\n          description: updatedPlan.description,\n          price: updatedPlan.price,\n          billingInterval: updatedPlan.billingInterval,\n          features: updatedPlan.features,\n          maxCallCredits: updatedPlan.maxCallCredits,\n          maxInvitations: updatedPlan.maxInvitations,\n          prioritySupport: updatedPlan.prioritySupport,\n          bestSeller: updatedPlan.bestSeller,\n          isActive: updatedPlan.isActive,\n          createdAt: updatedPlan.createdAt,\n          updatedAt: updatedPlan.updatedAt,\n        };\n      }\n      return undefined;\n    } catch (error) {\n      console.error(\"Error updating subscription plan:\", error);\n      throw error;\n    }\n  }\n\n  async deleteSubscriptionPlan(id: string): Promise<boolean> {\n    try {\n      await connectToMongoDB();\n      const result = await SubscriptionPlan.findByIdAndDelete(id);\n      return !!result;\n    } catch (error) {\n      console.error(\"Error deleting subscription plan:\", error);\n      return false;\n    }\n  }\n\n  // Activity Log methods\n  async createActivityLog(log: any): Promise<any> {\n    try {\n      await connectToMongoDB();\n\n      const activityLog = new ActivityLog({\n        userId: log.userId,\n        action: log.action,\n        entityType: log.entityType,\n        entityId: log.entityId,\n        details: log.details,\n        timestamp: log.timestamp || new Date(),\n        ipAddress: log.ipAddress,\n        userAgent: log.userAgent,\n      });\n\n      const savedLog = await activityLog.save();\n      console.log(\"Activity Log saved to database:\", savedLog);\n\n      return this.toPlainObject(savedLog);\n    } catch (error) {\n      console.error(\"Error creating activity log:\", error);\n      console.log(\"Activity Log (console fallback):\", log);\n      return { ...log, id: Date.now().toString(), createdAt: new Date() };\n    }\n  }\n\n  async getActivityLogs(\n    page: number,\n    limit: number,\n    filters?: any,\n  ): Promise<{ logs: any[]; total: number }> {\n    try {\n      await connectToMongoDB();\n\n      // Build query object\n      let query: any = {};\n\n      if (filters) {\n        if (filters.action && filters.action !== \"all\") {\n          query.action = filters.action;\n        }\n        if (filters.entityType && filters.entityType !== \"all\") {\n          query.entityType = filters.entityType;\n        }\n        if (filters.search) {\n          query.$or = [\n            { details: { $regex: filters.search, $options: \"i\" } },\n            { action: { $regex: filters.search, $options: \"i\" } },\n            { entityType: { $regex: filters.search, $options: \"i\" } },\n          ];\n        }\n      }\n\n      // Calculate pagination\n      const skip = (page - 1) * limit;\n\n      // Get total count\n      const total = await ActivityLog.countDocuments(query);\n\n      // Get logs with pagination, sorted by timestamp descending\n      const logs = await ActivityLog.find(query)\n        .sort({ timestamp: -1 })\n        .skip(skip)\n        .limit(limit)\n        .populate(\"userId\", \"firstName lastName email\")\n        .exec();\n\n      // Transform logs to include user info\n      const transformedLogs = logs.map((log) => ({\n        _id: log._id,\n        action: log.action,\n        entityType: log.entityType,\n        entityId: log.entityId,\n        details: log.details,\n        timestamp: log.timestamp,\n        ipAddress: log.ipAddress,\n        userAgent: log.userAgent,\n        user: log.userId\n          ? {\n              firstName: log.userId.firstName,\n              lastName: log.userId.lastName,\n              email: log.userId.email,\n            }\n          : null,\n      }));\n\n      return {\n        logs: transformedLogs,\n        total,\n      };\n    } catch (error) {\n      console.error(\"Error getting activity logs:\", error);\n      return { logs: [], total: 0 };\n    }\n  }\n\n  // Analytics methods\n  async getUserAnalytics(): Promise<any> {\n    try {\n      await connectToMongoDB();\n\n      const totalUsers = await User.countDocuments();\n      const salesReps = await User.countDocuments({ role: \"sales_rep\" });\n      const decisionMakers = await User.countDocuments({\n        role: \"decision_maker\",\n      });\n      const activeUsers = await User.countDocuments({ isActive: true });\n      const inactiveUsers = await User.countDocuments({ isActive: false });\n\n      // Get user growth over time (last 30 days)\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      const newUsersThisMonth = await User.countDocuments({\n        createdAt: { $gte: thirtyDaysAgo },\n      });\n\n      return {\n        totalUsers,\n        salesReps,\n        decisionMakers,\n        activeUsers,\n        inactiveUsers,\n        newUsersThisMonth,\n        userGrowthRate:\n          totalUsers > 0\n            ? ((newUsersThisMonth / totalUsers) * 100).toFixed(1)\n            : 0,\n      };\n    } catch (error) {\n      console.error(\"Error getting user analytics:\", error);\n      return {\n        totalUsers: 0,\n        salesReps: 0,\n        decisionMakers: 0,\n        activeUsers: 0,\n        inactiveUsers: 0,\n        newUsersThisMonth: 0,\n        userGrowthRate: 0,\n      };\n    }\n  }\n\n  async getCallAnalytics(): Promise<any> {\n    try {\n      await connectToMongoDB();\n\n      const totalCalls = await Call.countDocuments();\n      const completedCalls = await Call.countDocuments({ status: \"completed\" });\n      const scheduledCalls = await Call.countDocuments({ status: \"scheduled\" });\n      const cancelledCalls = await Call.countDocuments({ status: \"cancelled\" });\n\n      // Get calls this month\n      const thisMonth = new Date();\n      thisMonth.setDate(1);\n      const callsThisMonth = await Call.countDocuments({\n        createdAt: { $gte: thisMonth },\n      });\n\n      // Calculate average rating\n      const callsWithRating = await Call.find({\n        rating: { $exists: true, $ne: null },\n      });\n      const averageRating =\n        callsWithRating.length > 0\n          ? (\n              callsWithRating.reduce(\n                (sum, call) => sum + (call.rating || 0),\n                0,\n              ) / callsWithRating.length\n            ).toFixed(1)\n          : 0;\n\n      return {\n        totalCalls,\n        completedCalls,\n        scheduledCalls,\n        cancelledCalls,\n        callsThisMonth,\n        averageRating,\n        completionRate:\n          totalCalls > 0 ? ((completedCalls / totalCalls) * 100).toFixed(1) : 0,\n      };\n    } catch (error) {\n      console.error(\"Error getting call analytics:\", error);\n      return {\n        totalCalls: 0,\n        completedCalls: 0,\n        scheduledCalls: 0,\n        cancelledCalls: 0,\n        callsThisMonth: 0,\n        averageRating: 0,\n        completionRate: 0,\n      };\n    }\n  }\n\n  async getSubscriptionAnalytics(): Promise<any> {\n    try {\n      await connectToMongoDB();\n\n      const freeUsers = await User.countDocuments({ packageType: \"free\" });\n      const basicUsers = await User.countDocuments({ packageType: \"basic\" });\n      const premiumUsers = await User.countDocuments({\n        packageType: \"premium\",\n      });\n      const totalUsers = await User.countDocuments();\n\n      return {\n        freeUsers,\n        basicUsers,\n        premiumUsers,\n        totalUsers,\n        freePercentage:\n          totalUsers > 0 ? ((freeUsers / totalUsers) * 100).toFixed(1) : 0,\n        basicPercentage:\n          totalUsers > 0 ? ((basicUsers / totalUsers) * 100).toFixed(1) : 0,\n        premiumPercentage:\n          totalUsers > 0 ? ((premiumUsers / totalUsers) * 100).toFixed(1) : 0,\n      };\n    } catch (error) {\n      console.error(\"Error getting subscription analytics:\", error);\n      return {\n        freeUsers: 0,\n        basicUsers: 0,\n        premiumUsers: 0,\n        totalUsers: 0,\n        freePercentage: 0,\n        basicPercentage: 0,\n        premiumPercentage: 0,\n      };\n    }\n  }\n\n  // Calendar integration methods\n  async getCallById(id: string): Promise<any | undefined> {\n    try {\n      await connectToMongoDB();\n      const call = await Call.findById(id);\n      return call ? this.toPlainObject(call) : undefined;\n    } catch (error) {\n      console.error(\"Error getting call by ID:\", error);\n      return undefined;\n    }\n  }\n\n  // Enterprise admin methods\n  async getUsersByCompanyDomain(domain: string): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const users = await User.find({\n        $or: [\n          { companyDomain: domain },\n          { email: { $regex: `@${domain}$`, $options: \"i\" } },\n        ],\n      });\n      return users.map((user) => this.toPlainObject(user));\n    } catch (error) {\n      console.error(\"Error getting users by company domain:\", error);\n      return [];\n    }\n  }\n\n  async getCompanyInvitationsCount(domain: string): Promise<number> {\n    try {\n      await connectToMongoDB();\n      // Get all users from the company domain\n      const companyUsers = await User.find({\n        $or: [\n          { companyDomain: domain },\n          { email: { $regex: `@${domain}$`, $options: \"i\" } },\n        ],\n      });\n\n      const userIds = companyUsers.map((user) => user._id.toString());\n\n      // Count invitations sent by company users\n      const invitationCount = await Invitation.countDocuments({\n        salesRepId: { $in: userIds },\n      });\n\n      return invitationCount;\n    } catch (error) {\n      console.error(\"Error getting company invitations count:\", error);\n      return 0;\n    }\n  }\n\n  // Credit management methods\n  async getCompanyCredits(companyDomain: string): Promise<any | undefined> {\n    try {\n      await connectToMongoDB();\n      const credits = await CompanyCredits.findOne({ companyDomain });\n      return credits ? this.toPlainObject(credits) : undefined;\n    } catch (error) {\n      console.error(\"Error getting company credits:\", error);\n      return undefined;\n    }\n  }\n\n  async updateCompanyCredits(\n    companyDomain: string,\n    updates: any,\n  ): Promise<any | undefined> {\n    try {\n      await connectToMongoDB();\n      const credits = await CompanyCredits.findOneAndUpdate(\n        { companyDomain },\n        { $set: updates },\n        { new: true },\n      );\n      return credits ? this.toPlainObject(credits) : undefined;\n    } catch (error) {\n      console.error(\"Error updating company credits:\", error);\n      return undefined;\n    }\n  }\n\n  async createCompanyCredits(creditsData: any): Promise<any> {\n    try {\n      await connectToMongoDB();\n      const credits = new CompanyCredits(creditsData);\n      const savedCredits = await credits.save();\n      return this.toPlainObject(savedCredits);\n    } catch (error) {\n      console.error(\"Error creating company credits:\", error);\n      throw error;\n    }\n  }\n\n  async updateRepCreditUsage(\n    companyDomain: string,\n    repId: string,\n    usage: any,\n  ): Promise<any> {\n    try {\n      await connectToMongoDB();\n      const credits = await CompanyCredits.findOneAndUpdate(\n        {\n          companyDomain,\n          \"repUsage.repId\": repId,\n        },\n        {\n          $set: {\n            \"repUsage.$.callsBooked\": usage.callsBooked,\n            \"repUsage.$.dmsUnlocked\": usage.dmsUnlocked,\n            \"repUsage.$.creditsUsed\": usage.creditsUsed,\n            \"repUsage.$.feedbacksReceived\": usage.feedbacksReceived,\n            \"repUsage.$.flagsReceived\": usage.flagsReceived,\n            \"repUsage.$.lastUpdated\": new Date(),\n          },\n        },\n        { new: true },\n      );\n\n      if (!credits) {\n        // Add new rep usage if not found\n        const updatedCredits = await CompanyCredits.findOneAndUpdate(\n          { companyDomain },\n          {\n            $push: {\n              repUsage: {\n                repId,\n                repEmail: usage.repEmail,\n                ...usage,\n                lastUpdated: new Date(),\n              },\n            },\n          },\n          { new: true },\n        );\n        return updatedCredits ? this.toPlainObject(updatedCredits) : undefined;\n      }\n\n      return this.toPlainObject(credits);\n    } catch (error) {\n      console.error(\"Error updating rep credit usage:\", error);\n      throw error;\n    }\n  }\n\n  // Call logs methods\n  async createCallLog(callData: any): Promise<any> {\n    try {\n      await connectToMongoDB();\n      const callLog = new CallLog(callData);\n      const savedLog = await callLog.save();\n      return this.toPlainObject(savedLog);\n    } catch (error) {\n      console.error(\"Error creating call log:\", error);\n      throw error;\n    }\n  }\n\n  async getCallLogsByCompany(companyDomain: string): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const logs = await CallLog.find({ companyDomain })\n        .populate(\"salesRepId\", \"firstName lastName email\")\n        .populate(\"decisionMakerId\", \"firstName lastName email\")\n        .sort({ createdAt: -1 });\n      return logs.map((log) => this.toPlainObject(log));\n    } catch (error) {\n      console.error(\"Error getting call logs by company:\", error);\n      return [];\n    }\n  }\n\n  async getCallLogsByRep(repId: string): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const logs = await CallLog.find({ salesRepId: repId })\n        .populate(\"decisionMakerId\", \"firstName lastName email\")\n        .sort({ createdAt: -1 });\n      return logs.map((log) => this.toPlainObject(log));\n    } catch (error) {\n      console.error(\"Error getting call logs by rep:\", error);\n      return [];\n    }\n  }\n\n  async updateCallLog(callId: string, updates: any): Promise<any | undefined> {\n    try {\n      await connectToMongoDB();\n      const log = await CallLog.findByIdAndUpdate(callId, updates, {\n        new: true,\n      });\n      return log ? this.toPlainObject(log) : undefined;\n    } catch (error) {\n      console.error(\"Error updating call log:\", error);\n      return undefined;\n    }\n  }\n\n  // Feedback methods\n  async createFeedback(feedbackData: any): Promise<any> {\n    try {\n      await connectToMongoDB();\n      const feedback = new Feedback(feedbackData);\n      const savedFeedback = await feedback.save();\n      return this.toPlainObject(savedFeedback);\n    } catch (error) {\n      console.error(\"Error creating feedback:\", error);\n      throw error;\n    }\n  }\n\n  async getFeedbackByCompany(companyDomain: string): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const feedback = await Feedback.find({ companyDomain })\n        .populate(\"salesRepId\", \"firstName lastName email\")\n        .populate(\"decisionMakerId\", \"firstName lastName email\")\n        .sort({ createdAt: -1 });\n      return feedback.map((f) => this.toPlainObject(f));\n    } catch (error) {\n      console.error(\"Error getting feedback by company:\", error);\n      return [];\n    }\n  }\n\n  async getFeedbackByRep(repId: string): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const feedback = await Feedback.find({ salesRepId: repId })\n        .populate(\"decisionMakerId\", \"firstName lastName email\")\n        .sort({ createdAt: -1 });\n      return feedback.map((f) => this.toPlainObject(f));\n    } catch (error) {\n      console.error(\"Error getting feedback by rep:\", error);\n      return [];\n    }\n  }\n\n  // DM tracking methods\n  async getCompanyDMs(companyDomain: string): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const companyDMs = await CompanyDMs.find({\n        companyDomain,\n        status: { $ne: \"removed\" },\n      })\n        .populate(\n          \"dmId\",\n          \"firstName lastName email jobTitle company linkedinUrl\",\n        )\n        .populate(\"linkedRepId\", \"firstName lastName email\")\n        .populate(\"replacementDMId\", \"firstName lastName email\")\n        .sort({ createdAt: -1 });\n      return companyDMs.map((dm) => this.toPlainObject(dm));\n    } catch (error) {\n      console.error(\"Error getting company DMs:\", error);\n      return [];\n    }\n  }\n\n  async createCompanyDM(dmData: any): Promise<any> {\n    try {\n      await connectToMongoDB();\n      const companyDM = new CompanyDMs(dmData);\n      const savedDM = await companyDM.save();\n      return this.toPlainObject(savedDM);\n    } catch (error) {\n      console.error(\"Error creating company DM:\", error);\n      throw error;\n    }\n  }\n\n  async updateCompanyDM(dmId: string, updates: any): Promise<any | undefined> {\n    try {\n      await connectToMongoDB();\n      const dm = await CompanyDMs.findOneAndUpdate(\n        { dmId },\n        { $set: updates },\n        { new: true },\n      );\n      return dm ? this.toPlainObject(dm) : undefined;\n    } catch (error) {\n      console.error(\"Error updating company DM:\", error);\n      return undefined;\n    }\n  }\n\n  async requestDMRemoval(\n    dmId: string,\n    reason: string,\n    requestedBy: string,\n  ): Promise<any> {\n    try {\n      await connectToMongoDB();\n      const dm = await CompanyDMs.findOneAndUpdate(\n        { dmId },\n        {\n          $set: {\n            removalRequested: true,\n            removalReason: reason,\n            status: \"inactive\",\n          },\n        },\n        { new: true },\n      );\n\n      if (dm) {\n        // Create activity log\n        await this.createActivityLog({\n          action: \"REQUEST_DM_REMOVAL\",\n          performedBy: requestedBy,\n          targetUser: dmId,\n          details: `Requested removal of DM: ${reason}`,\n          companyDomain: dm.companyDomain,\n        });\n      }\n\n      return dm ? this.toPlainObject(dm) : undefined;\n    } catch (error) {\n      console.error(\"Error requesting DM removal:\", error);\n      throw error;\n    }\n  }\n\n  async replaceDM(\n    originalDMId: string,\n    replacementDMId: string,\n    replacedBy: string,\n  ): Promise<any> {\n    try {\n      await connectToMongoDB();\n\n      // Update original DM record\n      const originalDM = await CompanyDMs.findOneAndUpdate(\n        { dmId: originalDMId },\n        {\n          $set: {\n            status: \"removed\",\n            replacementDMId,\n            removalRequested: false,\n          },\n        },\n        { new: true },\n      );\n\n      if (originalDM) {\n        // Create new DM record for replacement\n        const replacementData = {\n          companyDomain: originalDM.companyDomain,\n          dmId: replacementDMId,\n          linkedRepId: originalDM.linkedRepId,\n          verificationStatus: \"pending\",\n          engagementScore: 0,\n          flagCount: 0,\n          totalInteractions: 0,\n          referralDate: new Date(),\n          status: \"active\",\n        };\n\n        const replacementDM = await this.createCompanyDM(replacementData);\n\n        // Create activity log\n        await this.createActivityLog({\n          action: \"REPLACE_DM\",\n          performedBy: replacedBy,\n          targetUser: originalDMId,\n          details: `Replaced DM with new DM: ${replacementDMId}`,\n          companyDomain: originalDM.companyDomain,\n        });\n\n        return {\n          original: this.toPlainObject(originalDM),\n          replacement: replacementDM,\n        };\n      }\n\n      return undefined;\n    } catch (error) {\n      console.error(\"Error replacing DM:\", error);\n      throw error;\n    }\n  }\n\n  // DM flags methods\n  async createDMFlag(flagData: any): Promise<any> {\n    try {\n      await connectToMongoDB();\n      const flag = new DMFlags(flagData);\n      const savedFlag = await flag.save();\n\n      // Update flag count in CompanyDMs\n      await CompanyDMs.findOneAndUpdate(\n        { dmId: flagData.dmId },\n        { $inc: { flagCount: 1 } },\n      );\n\n      return this.toPlainObject(savedFlag);\n    } catch (error) {\n      console.error(\"Error creating DM flag:\", error);\n      throw error;\n    }\n  }\n\n  async getDMFlags(dmId: string): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const flags = await DMFlags.find({ dmId })\n        .populate(\"flaggedBy\", \"firstName lastName email\")\n        .populate(\"resolvedBy\", \"firstName lastName email\")\n        .sort({ createdAt: -1 });\n      return flags.map((flag) => this.toPlainObject(flag));\n    } catch (error) {\n      console.error(\"Error getting DM flags:\", error);\n      return [];\n    }\n  }\n\n  async getFlagsByCompany(companyDomain: string): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const flags = await DMFlags.find({ companyDomain })\n        .populate(\"dmId\", \"firstName lastName email\")\n        .populate(\"flaggedBy\", \"firstName lastName email\")\n        .populate(\"resolvedBy\", \"firstName lastName email\")\n        .sort({ createdAt: -1 });\n      return flags.map((flag) => this.toPlainObject(flag));\n    } catch (error) {\n      console.error(\"Error getting flags by company:\", error);\n      return [];\n    }\n  }\n\n  async updateFlagStatus(\n    flagId: string,\n    status: string,\n    resolution?: string,\n    resolvedBy?: string,\n  ): Promise<any> {\n    try {\n      await connectToMongoDB();\n      const updates: any = { status };\n\n      if (resolution) updates.resolution = resolution;\n      if (resolvedBy) updates.resolvedBy = resolvedBy;\n      if (status === \"resolved\") updates.resolvedAt = new Date();\n\n      const flag = await DMFlags.findByIdAndUpdate(flagId, updates, {\n        new: true,\n      });\n      return flag ? this.toPlainObject(flag) : undefined;\n    } catch (error) {\n      console.error(\"Error updating flag status:\", error);\n      return undefined;\n    }\n  }\n\n  // Calendar and booking methods\n  async getUserById(id: string): Promise<any | undefined> {\n    await connectToMongoDB();\n    const user = await User.findById(id);\n    return user ? this.toPlainObject(user) : undefined;\n  }\n\n  // Get calls for sales rep by date range\n  async getCallsBySalesRepDateRange(\n    salesRepId: string,\n    startDate: string | Date,\n    endDate: string | Date,\n  ): Promise<any[]> {\n    await connectToMongoDB();\n    \n    // Convert strings to Date objects if needed\n    const startDateObj = typeof startDate === 'string' ? new Date(startDate) : startDate;\n    const endDateObj = typeof endDate === 'string' ? new Date(endDate) : endDate;\n    \n    console.log(`getCallsBySalesRepDateRange for Rep ${salesRepId}:`, {\n      startDate: startDateObj.toISOString(),\n      endDate: endDateObj.toISOString()\n    });\n    \n    const [calls, callLogs] = await Promise.all([\n      Call.find({\n        salesRepId: salesRepId,\n        scheduledAt: {\n          $gte: startDateObj,\n          $lte: endDateObj,\n        },\n        status: { $in: [\"scheduled\", \"completed\"] },\n      }).sort({ scheduledAt: 1 }),\n      \n      CallLog.find({\n        salesRepId: salesRepId,\n        scheduledAt: {\n          $gte: startDateObj,\n          $lte: endDateObj,\n        },\n        status: { $in: [\"scheduled\", \"completed\"] },\n      }).sort({ scheduledAt: 1 })\n    ]);\n\n    const allCalls = [...calls, ...callLogs];\n    const uniqueCalls = allCalls.filter((call, index, arr) => \n      arr.findIndex(c => c._id.toString() === call._id.toString()) === index\n    );\n\n    console.log(`Sales rep ${salesRepId} has ${uniqueCalls.length} calls in date range`);\n    return uniqueCalls.map((call) => this.toPlainObject(call));\n  }\n\n  async getCallsByDateRange(\n    dmId: string,\n    startDate: string | Date,\n    endDate: string | Date,\n  ): Promise<any[]> {\n    await connectToMongoDB();\n    \n    // Convert strings to Date objects if needed\n    const startDateObj = typeof startDate === 'string' ? new Date(startDate) : startDate;\n    const endDateObj = typeof endDate === 'string' ? new Date(endDate) : endDate;\n    \n    console.log(`getCallsByDateRange for DM ${dmId}:`, {\n      startDate: startDateObj.toISOString(),\n      endDate: endDateObj.toISOString(),\n      startDateLocal: startDateObj.toString(),\n      endDateLocal: endDateObj.toString()\n    });\n    \n    // Check both Call and CallLog collections for scheduled calls\n    const [calls, callLogs] = await Promise.all([\n      Call.find({\n        decisionMakerId: dmId,\n        scheduledAt: {\n          $gte: startDateObj,\n          $lte: endDateObj,\n        },\n        status: { $in: [\"scheduled\", \"completed\"] },\n      }).sort({ scheduledAt: 1 }),\n      \n      CallLog.find({\n        decisionMakerId: dmId,\n        scheduledAt: {\n          $gte: startDateObj,\n          $lte: endDateObj,\n        },\n        status: { $in: [\"scheduled\", \"completed\"] },\n      }).sort({ scheduledAt: 1 })\n    ]);\n\n    // Combine both results and deduplicate by ID\n    const allCalls = [...calls, ...callLogs];\n    const uniqueCalls = allCalls.filter((call, index, arr) => \n      arr.findIndex(c => c._id.toString() === call._id.toString()) === index\n    );\n\n    console.log(`getCallsByDateRange results for DM ${dmId}:`, {\n      callsFound: calls.length,\n      callLogsFound: callLogs.length,\n      totalUnique: uniqueCalls.length,\n      calls: uniqueCalls.map(call => ({\n        id: call._id,\n        scheduledAt: call.scheduledAt,\n        status: call.status\n      }))\n    });\n\n    return uniqueCalls.map((call) => this.toPlainObject(call));\n  }\n\n  async getCallByTime(\n    dmId: string,\n    scheduledAt: Date,\n  ): Promise<any | undefined> {\n    await connectToMongoDB();\n    const startWindow = new Date(scheduledAt.getTime() - 15 * 60 * 1000);\n    const endWindow = new Date(scheduledAt.getTime() + 15 * 60 * 1000);\n\n    const existingCall = await CallLog.findOne({\n      decisionMakerId: dmId,\n      scheduledAt: {\n        $gte: startWindow,\n        $lte: endWindow,\n      },\n      status: { $in: [\"scheduled\", \"completed\"] },\n    });\n\n    return existingCall ? this.toPlainObject(existingCall) : undefined;\n  }\n\n  async getCallsByDMId(dmId: string): Promise<any[]> {\n    await connectToMongoDB();\n    const calls = await CallLog.find({\n      decisionMakerId: dmId,\n      status: { $in: [\"scheduled\", \"completed\"] },\n    }).sort({ scheduledAt: 1 });\n\n    return calls.map((call) => this.toPlainObject(call));\n  }\n\n  async getCallsByCompany(companyDomain: string): Promise<any[]> {\n    await connectToMongoDB();\n    const companyUsers = await User.find({\n      $or: [\n        { companyDomain: companyDomain },\n        { company: companyDomain.split(\".\")[0] },\n      ],\n    });\n\n    const userIds = companyUsers.map((user) => user._id.toString());\n\n    const calls = await CallLog.find({\n      $or: [\n        { salesRepId: { $in: userIds } },\n        { decisionMakerId: { $in: userIds } },\n      ],\n      status: { $in: [\"scheduled\", \"completed\"] },\n    }).sort({ scheduledAt: 1 });\n\n    return calls.map((call) => this.toPlainObject(call));\n  }\n\n  async getFlagsByRep(repId: string): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const { DMFlags } = await import(\"./mongodb\");\n      const flags = await DMFlags.find({ flaggedBy: repId }).sort({\n        createdAt: -1,\n      });\n      return flags.map((flag) => this.toPlainObject(flag));\n    } catch (error) {\n      console.error(\"Error fetching flags by rep:\", error);\n      return [];\n    }\n  }\n\n  async getAllFlags(): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const { DMFlags } = await import(\"./mongodb\");\n      const flags = await DMFlags.find({})\n        .populate(\"dmId\", \"firstName lastName email company jobTitle\")\n        .populate(\"flaggedBy\", \"firstName lastName email role\")\n        .sort({ createdAt: -1 });\n      return flags.map((flag) => this.toPlainObject(flag));\n    } catch (error) {\n      console.error(\"Error fetching all flags:\", error);\n      return [];\n    }\n  }\n\n  async updateDMFlag(flagId: string, updateData: any): Promise<any> {\n    try {\n      await connectToMongoDB();\n      const { DMFlags } = await import(\"./mongodb\");\n      const updatedFlag = await DMFlags.findByIdAndUpdate(\n        flagId,\n        updateData,\n        { new: true }\n      )\n        .populate(\"dmId\", \"firstName lastName email company jobTitle\")\n        .populate(\"flaggedBy\", \"firstName lastName email role\");\n      \n      return updatedFlag ? this.toPlainObject(updatedFlag) : null;\n    } catch (error) {\n      console.error(\"Error updating DM flag:\", error);\n      throw error;\n    }\n  }\n\n  async getFlagStatistics(): Promise<any> {\n    try {\n      await connectToMongoDB();\n      const { DMFlags, User } = await import(\"./mongodb\");\n      \n      // Get flag statistics\n      const totalFlags = await DMFlags.countDocuments({});\n      const openFlags = await DMFlags.countDocuments({ status: \"open\" });\n      const investigatingFlags = await DMFlags.countDocuments({ status: \"investigating\" });\n      const resolvedFlags = await DMFlags.countDocuments({ status: \"resolved\" });\n      const dismissedFlags = await DMFlags.countDocuments({ status: \"dismissed\" });\n\n      // Get suspended users count\n      const suspendedUsers = await User.countDocuments({ standing: \"suspended\" });\n\n      return {\n        total: totalFlags,\n        open: openFlags,\n        investigating: investigatingFlags,\n        resolved: resolvedFlags,\n        dismissed: dismissedFlags,\n        suspendedUsers: suspendedUsers\n      };\n    } catch (error) {\n      console.error(\"Error fetching flag statistics:\", error);\n      return {\n        total: 0,\n        open: 0,\n        investigating: 0,\n        resolved: 0,\n        dismissed: 0,\n        suspendedUsers: 0\n      };\n    }\n  }\n\n  // Suspension-related methods\n  async checkRepSuspensionStatus(repId: string): Promise<any> {\n    try {\n      await connectToMongoDB();\n      const user = await User.findById(repId);\n      if (!user) {\n        return { isSuspended: false, suspension: null };\n      }\n\n      const suspension = user.suspension;\n      if (!suspension || !suspension.isActive) {\n        return { isSuspended: false, suspension: null };\n      }\n\n      // Check if suspension has expired\n      const now = new Date();\n      const endDate = new Date(suspension.endDate);\n\n      if (endDate < now) {\n        // Suspension has expired, deactivate it\n        await User.findByIdAndUpdate(repId, {\n          \"suspension.isActive\": false,\n        });\n        return { isSuspended: false, suspension: null };\n      }\n\n      return { isSuspended: true, suspension };\n    } catch (error) {\n      console.error(\"Error checking rep suspension status:\", error);\n      return { isSuspended: false, suspension: null };\n    }\n  }\n\n  async suspendRep(repId: string, suspensionData: any): Promise<any> {\n    try {\n      await connectToMongoDB();\n\n      const suspension = {\n        type: suspensionData.type, // '30-day' or '90-day'\n        startDate: new Date(),\n        endDate: suspensionData.endDate,\n        suspensionReason: suspensionData.reason,\n        isActive: true,\n        triggeredBy: suspensionData.triggeredBy || \"automatic\",\n      };\n\n      const updatedUser = await User.findByIdAndUpdate(\n        repId,\n        { $set: { suspension } },\n        { new: true },\n      );\n\n      if (updatedUser) {\n        // Log the suspension\n        await this.createActivityLog({\n          action: \"SUSPEND_REP\",\n          performedBy: \"system\",\n          targetUser: repId,\n          details: `Sales rep suspended: ${suspension.suspensionReason}`,\n          metadata: {\n            suspensionType: suspension.type,\n            endDate: suspension.endDate,\n          },\n        });\n      }\n\n      return updatedUser ? this.toPlainObject(updatedUser) : null;\n    } catch (error) {\n      console.error(\"Error suspending rep:\", error);\n      throw error;\n    }\n  }\n\n  async liftRepSuspension(\n    repId: string,\n    liftedBy: string,\n    reason?: string,\n  ): Promise<any> {\n    try {\n      await connectToMongoDB();\n\n      const updatedUser = await User.findByIdAndUpdate(\n        repId,\n        {\n          $set: {\n            \"suspension.isActive\": false,\n            \"suspension.liftedAt\": new Date(),\n            \"suspension.liftedBy\": liftedBy,\n            \"suspension.liftReason\": reason || \"Manual lift\",\n          },\n        },\n        { new: true },\n      );\n\n      if (updatedUser) {\n        // Log the suspension lift\n        await this.createActivityLog({\n          action: \"LIFT_SUSPENSION\",\n          performedBy: liftedBy,\n          targetUser: repId,\n          details: `Sales rep suspension lifted: ${reason || \"Manual lift\"}`,\n          metadata: {\n            originalSuspensionType: updatedUser.suspension?.type,\n          },\n        });\n      }\n\n      return updatedUser ? this.toPlainObject(updatedUser) : null;\n    } catch (error) {\n      console.error(\"Error lifting rep suspension:\", error);\n      throw error;\n    }\n  }\n\n  async getRecentFeedbackForRep(\n    repId: string,\n    limit: number = 10,\n  ): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const feedback = await Feedback.find({ salesRepId: repId })\n        .sort({ createdAt: -1 })\n        .limit(limit)\n        .populate(\"decisionMakerId\", \"firstName lastName email\");\n      return feedback.map((f) => this.toPlainObject(f));\n    } catch (error) {\n      console.error(\"Error getting recent feedback for rep:\", error);\n      return [];\n    }\n  }\n\n  async getSuspendedReps(): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const suspendedUsers = await User.find({\n        \"suspension.isActive\": true,\n        \"suspension.endDate\": { $gt: new Date() },\n      });\n      return suspendedUsers.map((user) => this.toPlainObject(user));\n    } catch (error) {\n      console.error(\"Error getting suspended reps:\", error);\n      return [];\n    }\n  }\n\n  // Credit management methods\n  async awardCreditToDMCompletion(\n    repId: string,\n    dmId: string,\n  ): Promise<{ success: boolean; message: string; creditAwarded?: any }> {\n    try {\n      const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n\n      // Get DM to check engagement score eligibility\n      const dm = await this.getUser(dmId);\n      if (!dm || dm.role !== \"decision_maker\") {\n        return {\n          success: false,\n          message: \"Decision Maker not found\",\n        };\n      }\n\n      // Check DM credit eligibility based on engagement score\n      // For demo purposes, we'll simulate engagement score (normally this would be calculated)\n      const engagementScore = dm.engagementScore || Math.floor(Math.random() * 40) + 60; // 60-100% range\n      const isEligibleForCredits = engagementScore >= 40; // DMs below 40% can't help reps earn credits\n\n      if (!isEligibleForCredits) {\n        return {\n          success: false,\n          message: `Decision Maker's engagement score (${engagementScore}%) is below the 40% threshold required for credit eligibility`,\n        };\n      }\n\n      // Check if rep has already earned max credits from this DM this month\n      const currentUsage = await this.checkDMCreditUsage(\n        repId,\n        dmId,\n        currentMonth,\n      );\n      if (currentUsage >= 3) {\n        return {\n          success: false,\n          message:\n            \"Maximum credits (3) already earned from this Decision Maker this month\",\n        };\n      }\n\n      // Check if credit already exists for this rep-dm pair this month (any onboarding source)\n      const existingCredit = await CallCredits.findOne({\n        repId: repId,\n        dmId: dmId,\n        month: currentMonth,\n        source: \"dm_onboarding\"\n      });\n\n      if (existingCredit) {\n        return {\n          success: false,\n          message:\n            \"Credit already awarded for this Decision Maker's onboarding\",\n        };\n      }\n\n      // Award credit\n      const creditData = {\n        repId: repId,\n        dmId: dmId,\n        month: currentMonth,\n        source: \"dm_onboarding\", // Valid enum value from schema\n        creditAmount: 1,\n        earnedAt: new Date(),\n      };\n\n      const credit = await CallCredits.create(creditData);\n\n      // Update DM credit usage\n      await this.updateDMCreditUsage(repId, dmId, currentMonth);\n\n      return {\n        success: true,\n        message:\n          \"Credit successfully awarded for Decision Maker onboarding completion with calendar integration\",\n        creditAwarded: this.toPlainObject(credit),\n      };\n    } catch (error) {\n      console.error(\"Error awarding DM completion credit:\", error);\n      return {\n        success: false,\n        message: \"Failed to award credit\",\n      };\n    }\n  }\n\n  async checkDMCreditUsage(\n    repId: string,\n    dmId: string,\n    month: string,\n  ): Promise<number> {\n    try {\n      const usage = await DMRepCreditUsage.findOne({\n        repId: repId,\n        dmId: dmId,\n        month: month,\n      });\n      return usage?.creditsUsed || 0;\n    } catch (error) {\n      console.error(\"Error checking DM credit usage:\", error);\n      return 0;\n    }\n  }\n\n  async updateDMCreditUsage(\n    repId: string,\n    dmId: string,\n    month: string,\n  ): Promise<any> {\n    try {\n      const result = await DMRepCreditUsage.findOneAndUpdate(\n        { repId: repId, dmId: dmId, month: month },\n        { $inc: { creditsUsed: 1 } },\n        { upsert: true, new: true },\n      );\n      return this.toPlainObject(result);\n    } catch (error) {\n      console.error(\"Error updating DM credit usage:\", error);\n      throw error;\n    }\n  }\n\n  async getDMRepCreditUsage(\n    repId: string,\n    dmId: string,\n    month: string,\n  ): Promise<any> {\n    try {\n      const usage = await DMRepCreditUsage.findOne({\n        repId: repId,\n        dmId: dmId,\n        month: month,\n      });\n      return usage ? this.toPlainObject(usage) : null;\n    } catch (error) {\n      console.error(\"Error getting DM-Rep credit usage:\", error);\n      return null;\n    }\n  }\n\n  // Monthly Call Limit Management\n  async getMonthlyCallLimit(\n    userId: string,\n    userRole: \"sales_rep\" | \"decision_maker\",\n    month: string,\n  ): Promise<any> {\n    try {\n      await connectToMongoDB();\n      let callLimit = await MonthlyCallLimit.findOne({\n        userId: userId,\n        month: month,\n      });\n\n      // Get user to determine their subscription plan\n      const user = await User.findById(userId);\n      if (!user) {\n        throw new Error(`User ${userId} not found`);\n      }\n\n      // Get user's subscription plan based on packageType\n      const plans = await this.getAllSubscriptionPlans();\n      const userPlan = plans.find(plan => \n        plan.name.toLowerCase() === user.packageType?.toLowerCase()\n      );\n\n      // Calculate max calls based on user's subscription plan\n      let maxCalls = userPlan?.maxCallCredits || (userRole === \"decision_maker\" ? 3 : 1); // Default fallbacks\n      \n      console.log(`User ${userId} (${userRole}) with ${user.packageType || 'free'} plan gets ${maxCalls} monthly calls`);\n      \n      // For sales reps, also consider accepted DM invitations that have connected calendar\n      if (userRole === \"sales_rep\") {\n        const invitations = await this.getInvitationsByRep(userId);\n        const acceptedDMs = invitations.filter(inv => inv.status === 'accepted');\n        \n        // Check which accepted DMs have connected their calendar\n        let connectedCalendarDMsCount = 0;\n        \n        // First try using dmId from invitations\n        for (const invitation of acceptedDMs) {\n          if (invitation.dmId) {\n            const dm = await this.getUserById(invitation.dmId);\n            if (dm && dm.calendarIntegrationEnabled) {\n              connectedCalendarDMsCount++;\n            }\n          }\n        }\n        \n        // If no dmIds in invitations, check Users collection directly\n        if (connectedCalendarDMsCount === 0) {\n          const directDMs = await User.find({\n            invitedBy: userId,\n            role: 'decision_maker',\n            calendarIntegrationEnabled: true\n          });\n          connectedCalendarDMsCount = directDMs.length;\n        }\n        \n        // Sales rep gets 1 credit per connected-calendar DM\n        // Changed from 5 credits to 1 credit per DM as per requirements\n        maxCalls = connectedCalendarDMsCount; // Each connected DM = 1 call credit\n        \n        console.log(`Sales rep ${userId}: Accepted DMs=${acceptedDMs.length}, Connected calendar DMs=${connectedCalendarDMsCount}, Final limit=${maxCalls} (1 credit per connected DM)`);\n      }\n\n      // Create new record if doesn't exist\n      if (!callLimit) {\n        callLimit = await MonthlyCallLimit.create({\n          userId: userId,\n          userRole: userRole,\n          month: month,\n          totalCalls: 0,\n          maxCalls: maxCalls,\n          remainingCalls: maxCalls,\n          lastUpdated: new Date(),\n        });\n      } else {\n        // Update maxCalls if it has changed (for sales reps with new accepted invitations)\n        if (callLimit.maxCalls !== maxCalls) {\n          const newRemainingCalls = maxCalls - callLimit.totalCalls;\n          callLimit = await MonthlyCallLimit.findByIdAndUpdate(\n            callLimit._id,\n            { \n              maxCalls: maxCalls,\n              remainingCalls: Math.max(0, newRemainingCalls),\n              lastUpdated: new Date()\n            },\n            { new: true }\n          );\n        }\n      }\n\n      return this.toPlainObject(callLimit);\n    } catch (error) {\n      console.error(\"Error getting monthly call limit:\", error);\n      return {\n        userId: userId,\n        userRole: userRole,\n        month: month,\n        totalCalls: 0,\n        maxCalls: userRole === \"decision_maker\" ? 3 : 0,\n        remainingCalls: userRole === \"decision_maker\" ? 3 : 0,\n        lastUpdated: new Date(),\n      };\n    }\n  }\n\n  async updateMonthlyCallLimit(\n    userId: string,\n    userRole: \"sales_rep\" | \"decision_maker\",\n    month: string,\n    increment: number = 1,\n  ): Promise<any> {\n    try {\n      await connectToMongoDB();\n      const result = await MonthlyCallLimit.findOneAndUpdate(\n        { userId: userId, month: month },\n        {\n          $inc: { totalCalls: increment, remainingCalls: -increment },\n          $set: { lastUpdated: new Date() },\n        },\n        { upsert: true, new: true },\n      );\n      return this.toPlainObject(result);\n    } catch (error) {\n      console.error(\"Error updating monthly call limit:\", error);\n      throw error;\n    }\n  }\n\n  async canUserBookCall(\n    userId: string,\n    userRole: \"sales_rep\" | \"decision_maker\",\n  ): Promise<{ canBook: boolean; remainingCalls: number; message?: string }> {\n    try {\n      const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n      const callLimit = await this.getMonthlyCallLimit(userId, userRole, currentMonth);\n      \n      // Check monthly call limit first\n      const hasCallsRemaining = callLimit.remainingCalls > 0;\n      if (!hasCallsRemaining) {\n        return {\n          canBook: false,\n          remainingCalls: callLimit.remainingCalls,\n          message: `Monthly call limit reached (${callLimit.maxCalls}/${callLimit.maxCalls} calls used)`\n        };\n      }\n\n      // For sales reps, also check if any referred DMs have disconnected calendar\n      if (userRole === \"sales_rep\") {\n        const calendarBlockResult = await this.checkSalesRepCalendarBlock(userId);\n        if (!calendarBlockResult.canBook) {\n          return {\n            canBook: false,\n            remainingCalls: callLimit.remainingCalls,\n            message: calendarBlockResult.message\n          };\n        }\n      }\n      \n      return {\n        canBook: true,\n        remainingCalls: callLimit.remainingCalls,\n      };\n    } catch (error) {\n      console.error(\"Error checking if user can book call:\", error);\n      return { canBook: false, remainingCalls: 0, message: \"Error checking call limits\" };\n    }\n  }\n\n  async checkSalesRepCalendarBlock(salesRepId: string): Promise<{ canBook: boolean; message?: string }> {\n    try {\n      await connectToMongoDB();\n      \n      // Find all DMs that were invited by this sales rep\n      const referredDMs = await User.find({ \n        invitedBy: salesRepId, \n        role: \"decision_maker\" \n      }).select('email firstName lastName calendarIntegrationEnabled');\n      \n      if (referredDMs.length === 0) {\n        // No referred DMs - sales rep can book calls normally\n        return { canBook: true };\n      }\n      \n      // Check if any referred DM has disconnected calendar\n      const disconnectedDMs = referredDMs.filter(dm => !dm.calendarIntegrationEnabled);\n      \n      if (disconnectedDMs.length > 0) {\n        // Build message listing disconnected DMs\n        const dmNames = disconnectedDMs.map(dm => \n          `${dm.firstName} ${dm.lastName} (${dm.email})`\n        ).join(', ');\n        \n        const message = disconnectedDMs.length === 1 \n          ? `Cannot book calls: Your referred Decision Maker ${dmNames} must reconnect their calendar to enable call booking.`\n          : `Cannot book calls: Your referred Decision Makers (${dmNames}) must reconnect their calendars to enable call booking.`;\n          \n        return { \n          canBook: false, \n          message \n        };\n      }\n      \n      // All referred DMs have calendars connected\n      return { canBook: true };\n      \n    } catch (error) {\n      console.error(\"Error checking sales rep calendar block:\", error);\n      return { \n        canBook: false, \n        message: \"Error checking referred Decision Maker calendar status\" \n      };\n    }\n  }\n\n  async getRepCredits(repId: string): Promise<any[]> {\n    try {\n      const credits = await CallCredits.find({ repId: repId, isActive: true })\n        .populate(\"dmId\", \"firstName lastName email company\")\n        .sort({ earnedAt: -1 });\n      return credits.map((credit) => this.toPlainObject(credit));\n    } catch (error) {\n      console.error(\"Error getting rep credits:\", error);\n      return [];\n    }\n  }\n\n  async getRepTotalCredits(repId: string): Promise<number> {\n    try {\n      const total = await CallCredits.countDocuments({\n        repId: repId,\n        isActive: true,\n      });\n      return total;\n    } catch (error) {\n      console.error(\"Error getting rep total credits:\", error);\n      return 0;\n    }\n  }\n\n  async checkDatabaseAccess(repId: string): Promise<boolean> {\n    try {\n      // Sales rep can only access database if they have at least one ACCEPTED invitation\n      // AND that DM has connected their calendar (which awards credits)\n      const invitations = await this.getInvitationsByRep(repId);\n      const acceptedInvitations = invitations.filter(inv => inv.status === 'accepted');\n      \n      // No accepted invitations = no database access\n      if (acceptedInvitations.length === 0) {\n        console.log(`Sales rep ${repId}: No accepted invitations - database access denied`);\n        return false;\n      }\n      \n      // Check if any accepted DMs have connected calendar (which awards credits)\n      let hasConnectedDMs = false;\n      for (const invitation of acceptedInvitations) {\n        if (invitation.dmId) {\n          const dm = await this.getUserById(invitation.dmId);\n          if (dm && dm.calendarIntegrationEnabled) {\n            hasConnectedDMs = true;\n            break;\n          }\n        }\n      }\n      \n      // Also check direct Users collection for DMs invited by this rep\n      if (!hasConnectedDMs) {\n        const directDMs = await User.find({\n          invitedBy: repId,\n          role: 'decision_maker',\n          calendarIntegrationEnabled: true\n        });\n        hasConnectedDMs = directDMs.length > 0;\n      }\n      \n      console.log(`Sales rep ${repId}: Accepted invitations=${acceptedInvitations.length}, Connected DMs=${hasConnectedDMs}, Database access=${hasConnectedDMs}`);\n      return hasConnectedDMs;\n    } catch (error) {\n      console.error(\"Error checking database access:\", error);\n      return false;\n    }\n  }\n\n  async markDMOnboardingComplete(\n    dmId: string,\n    invitedByRepId: string,\n  ): Promise<{ success: boolean; message: string }> {\n    try {\n      // Update DM to mark onboarding as complete\n      await User.findByIdAndUpdate(dmId, {\n        onboardingComplete: true,\n        calendarIntegrationEnabled: true,\n        termsAccepted: true,\n        onboardingCompletedAt: new Date(),\n      });\n\n      // Award credit to the inviting sales rep\n      const creditResult = await this.awardCreditToDMCompletion(\n        invitedByRepId,\n        dmId,\n      );\n\n      return {\n        success: true,\n        message: creditResult.success\n          ? \"DM onboarding completed and credit awarded to sales rep\"\n          : `DM onboarding completed. Credit note: ${creditResult.message}`,\n      };\n    } catch (error) {\n      console.error(\"Error marking DM onboarding complete:\", error);\n      return {\n        success: false,\n        message: \"Failed to complete DM onboarding process\",\n      };\n    }\n  }\n\n  // Rep suspension methods (implementation needed)\n  async createRepSuspension(suspensionData: any): Promise<any> {\n    try {\n      await connectToMongoDB();\n      const suspension = await RepSuspension.create(suspensionData);\n      return this.toPlainObject(suspension);\n    } catch (error) {\n      console.error(\"Error creating rep suspension:\", error);\n      throw error;\n    }\n  }\n\n  async getActiveRepSuspension(repId: string): Promise<any | undefined> {\n    try {\n      await connectToMongoDB();\n      const suspension = await RepSuspension.findOne({\n        salesRepId: repId,\n        isActive: true,\n      });\n      return suspension ? this.toPlainObject(suspension) : undefined;\n    } catch (error) {\n      console.error(\"Error getting active rep suspension:\", error);\n      return undefined;\n    }\n  }\n\n  async updateRepSuspension(\n    suspensionId: string,\n    updates: any,\n  ): Promise<any | undefined> {\n    try {\n      await connectToMongoDB();\n      const suspension = await RepSuspension.findByIdAndUpdate(\n        suspensionId,\n        updates,\n        { new: true },\n      );\n      return suspension ? this.toPlainObject(suspension) : undefined;\n    } catch (error) {\n      console.error(\"Error updating rep suspension:\", error);\n      return undefined;\n    }\n  }\n\n  async getRepSuspensionHistory(repId: string): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const suspensions = await RepSuspension.find({ salesRepId: repId }).sort({\n        createdAt: -1,\n      });\n      return suspensions.map((s) => this.toPlainObject(s));\n    } catch (error) {\n      console.error(\"Error getting rep suspension history:\", error);\n      return [];\n    }\n  }\n\n  async getCallsByRep(repId: string): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const calls = await Call.find({ salesRepId: repId });\n      return calls.map((call) => this.toPlainObject(call));\n    } catch (error) {\n      console.error(\"Error getting calls by rep:\", error);\n      return [];\n    }\n  }\n\n  // Platform Settings methods\n  async getPlatformSettings(): Promise<any> {\n    try {\n      await connectToMongoDB();\n      let settings = await PlatformSettings.findOne();\n\n      // If no settings exist, create default settings\n      if (!settings) {\n        settings = await PlatformSettings.create({});\n      }\n\n      return this.toPlainObject(settings);\n    } catch (error) {\n      console.error(\"Error getting platform settings:\", error);\n      throw error;\n    }\n  }\n\n  async updatePlatformSettings(updates: any, updatedBy: string): Promise<any> {\n    try {\n      await connectToMongoDB();\n\n      // Add metadata about who updated the settings\n      const updateData = {\n        ...updates,\n        lastUpdatedBy: updatedBy,\n        lastUpdatedAt: new Date(),\n      };\n\n      let settings = await PlatformSettings.findOne();\n\n      if (!settings) {\n        // Create new settings if none exist\n        settings = await PlatformSettings.create(updateData);\n      } else {\n        // Update existing settings\n        settings = await PlatformSettings.findOneAndUpdate({}, updateData, {\n          new: true,\n        });\n      }\n\n      return this.toPlainObject(settings);\n    } catch (error) {\n      console.error(\"Error updating platform settings:\", error);\n      throw error;\n    }\n  }\n\n  // Increment user flag count\n  async incrementUserFlag(userId: string, reason: string, flaggedBy: string): Promise<any> {\n    try {\n      await connectToMongoDB();\n      const { User, DMFlags } = await import(\"./mongodb\");\n      \n      console.log(`Starting flag increment for user ${userId}, reason: ${reason}, flagged by: ${flaggedBy}`);\n      \n      // Get the user being flagged and the user who flagged\n      const flaggedUser = await User.findById(userId);\n      const flaggingUser = await User.findById(flaggedBy);\n      \n      if (!flaggedUser) {\n        console.error(`Flagged user not found: ${userId}`);\n        throw new Error(\"Flagged user not found\");\n      }\n      \n      if (!flaggingUser) {\n        console.error(`Flagging user not found: ${flaggedBy}`);\n        throw new Error(\"Flagging user not found\");\n      }\n      \n      console.log(`Found users - Flagged: ${flaggedUser.email} (${flaggedUser.role}), Flagging: ${flaggingUser.email} (${flaggingUser.role})`);\n      \n      // Create a flag record\n      const flagData = {\n        dmId: userId, // Reusing the dmId field but this will be for any user\n        flaggedBy: flaggedBy,\n        flagType: 'quality_concern', // Using valid enum value\n        description: reason, // Using description instead of reason\n        status: 'open',\n        severity: 'medium',\n        companyDomain: flaggedUser.companyDomain || 'naeberly.com'\n      };\n      \n      console.log('Creating flag record:', flagData);\n      const flag = new DMFlags(flagData);\n      await flag.save();\n      console.log('Flag record created successfully');\n      \n      // Increment the user's flag count in the User collection\n      console.log(`Incrementing flag count for user ${userId}`);\n      const updatedUser = await User.findByIdAndUpdate(\n        userId,\n        { \n          $inc: { flagsReceived: 1 },\n          $set: { updatedAt: new Date() }\n        },\n        { new: true }\n      );\n      \n      const newFlagCount = updatedUser?.flagsReceived || 1;\n      console.log(`Flag count incremented to: ${newFlagCount}`);\n      \n      // Check if user should be suspended (3 flags = 90-day suspension)\n      if (newFlagCount >= 3 && flaggedUser.role === 'sales_rep') {\n        console.log(`Sales rep ${flaggedUser.email} has reached ${newFlagCount} flags, applying 90-day suspension`);\n        \n        const suspensionStartDate = new Date();\n        const suspensionEndDate = new Date();\n        suspensionEndDate.setDate(suspensionStartDate.getDate() + 90);\n        \n        // Update user with suspension details\n        await User.findByIdAndUpdate(userId, {\n          $set: {\n            suspension: {\n              isActive: true,\n              startDate: suspensionStartDate,\n              endDate: suspensionEndDate,\n              reason: `Automatic 90-day suspension: ${newFlagCount} flags received`,\n              type: '90-day-flags'\n            },\n            updatedAt: new Date()\n          }\n        });\n        \n        console.log(`90-day suspension applied to ${flaggedUser.email} until ${suspensionEndDate.toDateString()}`);\n      }\n      \n      // Send warning email to the flagged sales rep\n      if (flaggedUser.role === 'sales_rep') {\n        console.log('Attempting to send warning email to sales rep...');\n        try {\n          const { sendSalesRepWarningEmail } = await import(\"./email-service\");\n          \n          const emailResult = await sendSalesRepWarningEmail(\n            flaggedUser.email,\n            flaggedUser.firstName,\n            flaggingUser.firstName,\n            `${flaggingUser.firstName} ${flaggingUser.lastName}`,\n            flaggingUser.jobTitle || 'Decision Maker',\n            flaggingUser.company || 'Unknown Company',\n            reason,\n            new Date().toLocaleDateString('en-US', { \n              weekday: 'long', \n              year: 'numeric', \n              month: 'long', \n              day: 'numeric' \n            }),\n            newFlagCount\n          );\n          \n          console.log(`Warning email sent successfully to ${flaggedUser.email}:`, emailResult);\n        } catch (emailError) {\n          console.error(\"Error sending warning email:\", emailError);\n          console.error(\"Email error details:\", emailError.message);\n          // Don't fail the flagging process if email fails\n        }\n      } else {\n        console.log(`User ${flaggedUser.email} is not a sales rep (role: ${flaggedUser.role}), skipping warning email`);\n      }\n      \n      return this.toPlainObject(updatedUser);\n    } catch (error) {\n      console.error(\"Error incrementing user flag:\", error);\n      console.error(\"Error details:\", error.message);\n      throw error;\n    }\n  }\n\n  // Get user flags\n  async getUserFlags(userId: string): Promise<any[]> {\n    try {\n      await connectToMongoDB();\n      const { DMFlags } = await import(\"./mongodb\");\n      \n      const flags = await DMFlags.find({ dmId: userId }).sort({ createdAt: -1 });\n      return flags.map(flag => this.toPlainObject(flag));\n    } catch (error) {\n      console.error(\"Error getting user flags:\", error);\n      return [];\n    }\n  }\n\n  // Check if a user is currently suspended\n  async checkUserSuspensionStatus(userId: string): Promise<{ isSuspended: boolean; suspension?: any; message?: string }> {\n    try {\n      await connectToMongoDB();\n      const { User } = await import(\"./mongodb\");\n      \n      const user = await User.findById(userId);\n      if (!user || !user.suspension || !user.suspension.isActive) {\n        return { isSuspended: false };\n      }\n      \n      const now = new Date();\n      const endDate = new Date(user.suspension.endDate);\n      \n      // Check if suspension has expired\n      if (now > endDate) {\n        // Automatically deactivate expired suspension\n        await User.findByIdAndUpdate(userId, {\n          $set: {\n            'suspension.isActive': false,\n            updatedAt: new Date()\n          }\n        });\n        return { isSuspended: false };\n      }\n      \n      // User is still suspended\n      const daysRemaining = Math.ceil((endDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n      const message = `Your account has been suspended due to ${user.suspension.reason}. Suspension will be lifted on ${endDate.toDateString()} (${daysRemaining} days remaining).`;\n      \n      return { \n        isSuspended: true, \n        suspension: user.suspension,\n        message\n      };\n    } catch (error) {\n      console.error(\"Error checking suspension status:\", error);\n      return { isSuspended: false };\n    }\n  }\n\n  // Initial feedback methods\n  async saveInitialFeedback(feedbackData: any): Promise<any> {\n    try {\n      await connectToMongoDB();\n      const feedback = new InitialFeedback(feedbackData);\n      await feedback.save();\n      return this.toPlainObject(feedback);\n    } catch (error) {\n      console.error(\"Error saving initial feedback:\", error);\n      throw error;\n    }\n  }\n\n  async getInitialFeedback(callId: string, userType: string): Promise<any | undefined> {\n    try {\n      await connectToMongoDB();\n      const feedback = await InitialFeedback.findOne({ callId, userType });\n      return feedback ? this.toPlainObject(feedback) : undefined;\n    } catch (error) {\n      console.error(\"Error getting initial feedback:\", error);\n      return undefined;\n    }\n  }\n\n  private toPlainObject(mongooseDoc: any): any {\n    const obj = mongooseDoc.toObject();\n    // Convert MongoDB _id to id for consistency\n    if (obj._id) {\n      obj.id = obj._id.toString();\n    }\n    return obj;\n  }\n}\n","size_bytes":72466},"server/storage.ts":{"content":"export interface IStorage {\n  // User methods\n  getUser(id: string): Promise<any | undefined>;\n  getUserByUsername(username: string): Promise<any | undefined>;\n  getUserByEmail(email: string): Promise<any | undefined>;\n  createUser(user: any): Promise<any>;\n  updateUser(id: string, updates: any): Promise<any | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n  getAllUsers(): Promise<any[]>;\n  getUsersByRole(role: string): Promise<any[]>;\n  getRecentInactiveSalesReps(limit: number): Promise<any[]>;\n  getUsersWithPagination(\n    page: number,\n    limit: number,\n    filters?: any,\n  ): Promise<{ users: any[]; total: number }>;\n\n  // Invitation methods\n  getInvitationsByUserId(userId: string): Promise<any[]>;\n  getInvitationsByRep(repId: string): Promise<any[]>;\n  createInvitation(invitation: any): Promise<any>;\n  updateInvitationStatus(id: string, status: string): Promise<any | undefined>;\n  getAllInvitations(): Promise<any[]>;\n\n  // Call methods\n  getCallsByUserId(userId: string): Promise<any[]>;\n  createCall(call: any): Promise<any>;\n  updateCall(id: string, updates: any): Promise<any | undefined>;\n  getAllCalls(): Promise<any[]>;\n\n  // Subscription Plan methods\n  getAllSubscriptionPlans(): Promise<any[]>;\n  getSubscriptionPlan(id: string): Promise<any | undefined>;\n  createSubscriptionPlan(plan: any): Promise<any>;\n  updateSubscriptionPlan(id: string, updates: any): Promise<any | undefined>;\n  deleteSubscriptionPlan(id: string): Promise<boolean>;\n\n  // Activity Log methods\n  createActivityLog(log: any): Promise<any>;\n  getActivityLogs(\n    page: number,\n    limit: number,\n    filters?: any,\n  ): Promise<{ logs: any[]; total: number }>;\n\n  // Analytics methods\n  getUserAnalytics(): Promise<any>;\n  getCallAnalytics(): Promise<any>;\n  getSubscriptionAnalytics(): Promise<any>;\n\n  // Calendar integration methods\n  getCallById(id: string): Promise<any | undefined>;\n\n  // Enterprise admin methods\n  getUsersByCompanyDomain(domain: string): Promise<any[]>;\n  getCompanyInvitationsCount(domain: string): Promise<number>;\n\n  // Credit management methods\n  getCompanyCredits(companyDomain: string): Promise<any | undefined>;\n  updateCompanyCredits(\n    companyDomain: string,\n    updates: any,\n  ): Promise<any | undefined>;\n  createCompanyCredits(creditsData: any): Promise<any>;\n  updateRepCreditUsage(\n    companyDomain: string,\n    repId: string,\n    usage: any,\n  ): Promise<any>;\n\n  // Call logs methods\n  createCallLog(callData: any): Promise<any>;\n  getCallLogsByCompany(companyDomain: string): Promise<any[]>;\n  getCallLogsByRep(repId: string): Promise<any[]>;\n  updateCallLog(callId: string, updates: any): Promise<any | undefined>;\n\n  // Feedback methods\n  createFeedback(feedbackData: any): Promise<any>;\n  getFeedbackByCompany(companyDomain: string): Promise<any[]>;\n  getFeedbackByRep(repId: string): Promise<any[]>;\n\n  // DM tracking methods\n  getCompanyDMs(companyDomain: string): Promise<any[]>;\n  createCompanyDM(dmData: any): Promise<any>;\n  updateCompanyDM(dmId: string, updates: any): Promise<any | undefined>;\n  requestDMRemoval(\n    dmId: string,\n    reason: string,\n    requestedBy: string,\n  ): Promise<any>;\n  replaceDM(\n    originalDMId: string,\n    replacementDMId: string,\n    replacedBy: string,\n  ): Promise<any>;\n\n  // DM flags methods\n  createDMFlag(flagData: any): Promise<any>;\n  getDMFlags(dmId: string): Promise<any[]>;\n  getFlagsByCompany(companyDomain: string): Promise<any[]>;\n  updateFlagStatus(\n    flagId: string,\n    status: string,\n    resolution?: string,\n    resolvedBy?: string,\n  ): Promise<any>;\n\n  // Calendar and booking methods\n  getUserById(id: string): Promise<any | undefined>;\n  getCallsByDateRange(\n    dmId: string,\n    startDate: Date,\n    endDate: Date,\n  ): Promise<any[]>;\n  getCallByTime(dmId: string, scheduledAt: Date): Promise<any | undefined>;\n  getCallsByDMId(dmId: string): Promise<any[]>;\n  getCallsByCompany(companyDomain: string): Promise<any[]>;\n\n  // Additional flags methods\n  getFlagsByRep(repId: string): Promise<any[]>;\n  getAllFlags(): Promise<any[]>;\n\n  // Rep suspension methods\n  createRepSuspension(suspensionData: any): Promise<any>;\n  getActiveRepSuspension(repId: string): Promise<any | undefined>;\n  updateRepSuspension(\n    suspensionId: string,\n    updates: any,\n  ): Promise<any | undefined>;\n  getRepSuspensionHistory(repId: string): Promise<any[]>;\n  checkRepSuspensionStatus(\n    repId: string,\n  ): Promise<{ isSuspended: boolean; suspension?: any }>;\n  getRecentFeedbackForRep(repId: string, limit?: number): Promise<any[]>;\n\n  // Credit management methods\n  awardCreditToDMCompletion(\n    repId: string,\n    dmId: string,\n  ): Promise<{ success: boolean; message: string; creditAwarded?: any }>;\n  checkDMCreditUsage(\n    repId: string,\n    dmId: string,\n    month: string,\n  ): Promise<number>;\n  updateDMCreditUsage(repId: string, dmId: string, month: string): Promise<any>;\n  getDMRepCreditUsage(repId: string, dmId: string, month: string): Promise<any>;\n  getRepCredits(repId: string): Promise<any[]>;\n  getRepTotalCredits(repId: string): Promise<number>;\n  checkDatabaseAccess(repId: string): Promise<boolean>;\n\n  // DM onboarding completion\n  markDMOnboardingComplete(\n    dmId: string,\n    invitedByRepId: string,\n  ): Promise<{ success: boolean; message: string }>;\n\n  // Platform settings methods\n  getPlatformSettings(): Promise<any>;\n  updatePlatformSettings(updates: any, updatedBy: string): Promise<any>;\n\n  // User flag methods\n  incrementUserFlag(\n    userId: string,\n    reason: string,\n    flaggedBy: string,\n  ): Promise<any>;\n\n  // Initial feedback methods (for post-call emails)\n  saveInitialFeedback(feedbackData: any): Promise<any>;\n  getInitialFeedback(\n    callId: string,\n    userType: string,\n  ): Promise<any | undefined>;\n}\n\n// Import and use only MongoDB storage\nimport { SimpleMongoDBStorage } from \"./simple-mongodb-storage\";\n\nexport const storage = new SimpleMongoDBStorage();\n","size_bytes":5935},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull(), // 'sales_rep', 'decision_maker', 'super_admin'\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  linkedinUrl: text(\"linkedin_url\"),\n  linkedinVerified: boolean(\"linkedin_verified\").default(false),\n  jobTitle: text(\"job_title\"),\n  company: text(\"company\"),\n  industry: text(\"industry\"),\n  companySize: text(\"company_size\"),\n  yearsInRole: text(\"years_in_role\"),\n  packageType: text(\"package_type\").default(\"free\"),\n  hasEmailAddon: boolean(\"has_email_addon\").default(false), // $5 addon for DM email access\n  emailAddonPurchaseDate: timestamp(\"email_addon_purchase_date\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  standing: text(\"standing\").default(\"good\"), // 'good', 'excellent'\n});\n\nexport const invitations = pgTable(\"invitations\", {\n  id: serial(\"id\").primaryKey(),\n  salesRepId: integer(\"sales_rep_id\").notNull(),\n  decisionMakerEmail: text(\"decision_maker_email\").notNull(),\n  decisionMakerName: text(\"decision_maker_name\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // 'pending', 'accepted', 'declined'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const calls = pgTable(\"calls\", {\n  id: serial(\"id\").primaryKey(),\n  salesRepId: integer(\"sales_rep_id\").notNull(),\n  decisionMakerId: integer(\"decision_maker_id\").notNull(),\n  scheduledAt: timestamp(\"scheduled_at\").notNull(),\n  status: text(\"status\").notNull().default(\"scheduled\"), // 'scheduled', 'completed', 'cancelled'\n  rating: integer(\"rating\"), // 1-5 stars\n  feedback: text(\"feedback\"),\n  company: text(\"company\"),\n  pitch: text(\"pitch\"),\n});\n\n// Subscription Plans Table\nexport const subscriptionPlans = pgTable(\"subscription_plans\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price: text(\"price\").notNull(),\n  billingInterval: text(\"billing_interval\").notNull(), // 'monthly', 'yearly'\n  features: text(\"features\").array(), // Array of feature strings\n  maxCallCredits: integer(\"max_call_credits\").notNull(),\n  maxInvitations: integer(\"max_invitations\").notNull(),\n  prioritySupport: boolean(\"priority_support\").default(false),\n  bestSeller: boolean(\"best_seller\").default(false), // Only one plan can be best seller\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Activity Logs Table for Super Admin monitoring\nexport const activityLogs = pgTable(\"activity_logs\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\"),\n  action: text(\"action\").notNull(),\n  entityType: text(\"entity_type\").notNull(), // 'user', 'subscription', 'call', etc.\n  entityId: text(\"entity_id\"),\n  details: text(\"details\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Sales Rep signup validation schemas\nexport const salesRepPersonalInfoSchema = z.object({\n  firstName: z.string().min(2, \"First name must be at least 2 characters\").max(50, \"First name must be less than 50 characters\"),\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\").max(50, \"Last name must be less than 50 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  companyDomain: z.string().min(2, \"Company domain is required\").refine(\n    (domain) => {\n      // Remove http/https and www prefix, ensure it's a valid domain format\n      const cleanDomain = domain.replace(/^(https?:\\/\\/)?(www\\.)?/, '').toLowerCase();\n      return /^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*\\.[a-zA-Z]{2,}$/.test(cleanDomain);\n    },\n    \"Please enter a valid domain (e.g., company.com)\"\n  ),\n  linkedinUrl: z.string().url(\"Please enter a valid LinkedIn URL\").refine(\n    (url) => url.includes(\"linkedin.com\"),\n    \"URL must be a LinkedIn profile\"\n  ),\n  password: z.string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, \n      \"Password must contain uppercase, lowercase, number and special character\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n}).refine((data) => {\n  // Extract domain from email\n  const emailDomain = data.email.split('@')[1]?.toLowerCase();\n  // Clean and normalize company domain\n  const cleanCompanyDomain = data.companyDomain.replace(/^(https?:\\/\\/)?(www\\.)?/, '').toLowerCase();\n  return emailDomain === cleanCompanyDomain;\n}, {\n  message: \"Email domain must match company domain\",\n  path: [\"companyDomain\"],\n}).refine((data) => {\n  // Extract name from LinkedIn URL and validate against first/last name\n  const { linkedinUrl, firstName, lastName } = data;\n  \n  // Extract the profile identifier from LinkedIn URL\n  const linkedinMatch = linkedinUrl.match(/linkedin\\.com\\/in\\/([^\\/\\?]+)/);\n  if (!linkedinMatch) return false;\n  \n  const profileId = linkedinMatch[1].toLowerCase();\n  const cleanFirstName = firstName.toLowerCase().replace(/[^a-z]/g, '');\n  const cleanLastName = lastName.toLowerCase().replace(/[^a-z]/g, '');\n  \n  // Check various common LinkedIn URL patterns - BOTH names must be present\n  const cleanFirstLast = `${cleanFirstName}-${cleanLastName}`;\n  const cleanLastFirst = `${cleanLastName}-${cleanFirstName}`;\n  const cleanFullName = `${cleanFirstName}${cleanLastName}`;\n  \n  // Require BOTH first and last name to be present in the LinkedIn URL\n  return (profileId.includes(cleanFirstName) && profileId.includes(cleanLastName)) ||\n         profileId === cleanFirstLast ||\n         profileId === cleanLastFirst ||\n         profileId === cleanFullName;\n}, {\n  message: \"LinkedIn URL must match your first and last name\",\n  path: [\"linkedinUrl\"],\n});\n\nexport const salesRepProfessionalSchema = z.object({\n  jobTitle: z.string().min(2, \"Job title is required\"),\n  company: z.string().min(2, \"Company name is required\"),\n  industry: z.string().min(1, \"Please select an industry\"),\n  companySize: z.string().min(1, \"Please select company size\"),\n  yearsInRole: z.string().optional(),\n});\n\nexport const salesRepInvitesSchema = z.object({\n  decisionMakers: z.array(z.object({\n    name: z.string().min(2, \"Name must be at least 2 characters\").optional().or(z.literal(\"\")),\n    email: z.string().email(\"Please enter a valid email\").optional().or(z.literal(\"\")),\n  })).optional(),\n});\n\nexport const salesRepPackageSchema = z.object({\n  packageType: z.string().min(1, \"Package selection is required\"), // Accept MongoDB ID\n});\n\n// Decision Maker signup validation schemas\nexport const decisionMakerPersonalInfoSchema = z.object({\n  firstName: z.string().min(2, \"First name must be at least 2 characters\").max(50, \"First name must be less than 50 characters\"),\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\").max(50, \"Last name must be less than 50 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  companyDomain: z.string().min(2, \"Company domain is required\").refine(\n    (domain) => {\n      // Remove http/https and www prefix, ensure it's a valid domain format\n      const cleanDomain = domain.replace(/^(https?:\\/\\/)?(www\\.)?/, '').toLowerCase();\n      return /^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*\\.[a-zA-Z]{2,}$/.test(cleanDomain);\n    },\n    \"Please enter a valid domain (e.g., company.com)\"\n  ),\n  linkedinUrl: z.string().url(\"Please enter a valid LinkedIn URL\").refine(\n    (url) => url.includes(\"linkedin.com\"),\n    \"Must be a valid LinkedIn URL\"\n  ),\n  password: z.string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(/[A-Z]/, \"Password must contain at least one uppercase letter\")\n    .regex(/[a-z]/, \"Password must contain at least one lowercase letter\")\n    .regex(/\\d/, \"Password must contain at least one number\")\n    .regex(/[!@#$%^&*(),.?\":{}|<>]/, \"Password must contain at least one special character\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n}).refine((data) => {\n  // Extract domain from email\n  const emailDomain = data.email.split('@')[1]?.toLowerCase();\n  // Clean and normalize company domain\n  const cleanCompanyDomain = data.companyDomain.replace(/^(https?:\\/\\/)?(www\\.)?/, '').toLowerCase();\n  return emailDomain === cleanCompanyDomain;\n}, {\n  message: \"Email domain must match company domain\",\n  path: [\"companyDomain\"],\n}).refine((data) => {\n  // Extract name from LinkedIn URL and validate against first/last name\n  const { linkedinUrl, firstName, lastName } = data;\n  \n  // Extract the profile identifier from LinkedIn URL\n  const linkedinMatch = linkedinUrl.match(/linkedin\\.com\\/in\\/([^\\/\\?]+)/);\n  if (!linkedinMatch) return false;\n  \n  const profileId = linkedinMatch[1].toLowerCase();\n  const cleanFirstName = firstName.toLowerCase().replace(/[^a-z]/g, '');\n  const cleanLastName = lastName.toLowerCase().replace(/[^a-z]/g, '');\n  \n  // Check various common LinkedIn URL patterns - BOTH names must be present\n  const cleanFirstLast = `${cleanFirstName}-${cleanLastName}`;\n  const cleanLastFirst = `${cleanLastName}-${cleanFirstName}`;\n  const cleanFullName = `${cleanFirstName}${cleanLastName}`;\n  \n  // Require BOTH first and last name to be present in the LinkedIn URL\n  return (profileId.includes(cleanFirstName) && profileId.includes(cleanLastName)) ||\n         profileId === cleanFirstLast ||\n         profileId === cleanLastFirst ||\n         profileId === cleanFullName;\n}, {\n  message: \"LinkedIn URL must match your first and last name\",\n  path: [\"linkedinUrl\"],\n});\n\nexport const decisionMakerProfessionalSchema = z.object({\n  jobTitle: z.string().min(2, \"Job title is required\"),\n  company: z.string().min(2, \"Company name is required\"),\n  industry: z.string().min(1, \"Please select an industry\"),\n  companySize: z.string().min(1, \"Please select company size\"),\n  yearsInRole: z.string().optional(),\n});\n\nexport const decisionMakerAvailabilitySchema = z.object({\n  availabilityType: z.enum([\"flexible\", \"specific_times\", \"by_appointment\"]),\n  preferredDays: z.array(z.string()).optional(),\n  preferredTimes: z.array(z.string()).optional(),\n  timezone: z.string().min(1, \"Please select your timezone\"),\n  callDuration: z.enum([\"15\", \"30\", \"45\"]).default(\"15\"),\n});\n\nexport const decisionMakerNominationSchema = z.object({\n  nominatedSalesReps: z.array(z.object({\n    name: z.string().min(2, \"Name must be at least 2 characters\").optional().or(z.literal(\"\")),\n    email: z.string().email(\"Please enter a valid email\").optional().or(z.literal(\"\")),\n    company: z.string().optional().or(z.literal(\"\")),\n    referralReason: z.string().optional().or(z.literal(\"\")),\n  })).optional(),\n});\n\nexport const decisionMakerPackageSchema = z.object({\n  packageType: z.string().min(1, \"Package selection is required\"), // Accept MongoDB ID\n});\n\n// Super Admin Authentication Schema\nexport const superAdminLoginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n});\n\n// Subscription Plan Management Schemas\nexport const createSubscriptionPlanSchema = z.object({\n  name: z.string().min(2, \"Plan name must be at least 2 characters\"),\n  description: z.string().optional(),\n  price: z.string().min(1, \"Price is required\"),\n  billingInterval: z.enum([\"monthly\", \"yearly\"]),\n  features: z.array(z.string()).optional(),\n  maxCallCredits: z.number().min(0, \"Call credits must be 0 or greater\"),\n  maxInvitations: z.number().min(0, \"Invitations must be 0 or greater\"),\n  prioritySupport: z.boolean().default(false),\n  bestSeller: z.boolean().default(false),\n  isActive: z.boolean().default(true),\n});\n\nexport const updateSubscriptionPlanSchema = createSubscriptionPlanSchema.partial();\n\n// User Management Schema for Super Admin\nexport const updateUserSchema = z.object({\n  email: z.string().email().optional(),\n  firstName: z.string().min(2).optional(),\n  lastName: z.string().min(2).optional(),\n  role: z.enum([\"sales_rep\", \"decision_maker\", \"super_admin\"]).optional(),\n  packageType: z.string().optional(),\n  isActive: z.boolean().optional(),\n  standing: z.enum([\"good\", \"warning\", \"suspended\"]).optional(),\n});\n\n// Activity Log Schema\nexport const createActivityLogSchema = z.object({\n  userId: z.number().optional(),\n  action: z.string().min(1, \"Action is required\"),\n  entityType: z.string().min(1, \"Entity type is required\"),\n  entityId: z.string().optional(),\n  details: z.string().optional(),\n  ipAddress: z.string().optional(),\n  userAgent: z.string().optional(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInvitationSchema = createInsertSchema(invitations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCallSchema = createInsertSchema(calls).omit({\n  id: true,\n});\n\nexport const insertSubscriptionPlanSchema = createInsertSchema(subscriptionPlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertInvitation = z.infer<typeof insertInvitationSchema>;\nexport type Invitation = typeof invitations.$inferSelect;\nexport type InsertCall = z.infer<typeof insertCallSchema>;\nexport type Call = typeof calls.$inferSelect;\nexport type SubscriptionPlan = typeof subscriptionPlans.$inferSelect;\nexport type InsertSubscriptionPlan = z.infer<typeof insertSubscriptionPlanSchema>;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\n","size_bytes":14294},"client/src/App.jsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Navigation from \"@/components/navigation\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\nimport SalesDashboard from \"@/pages/sales-dashboard\";\nimport DecisionDashboard from \"@/pages/decision-dashboard\";\nimport PostCallEvaluation from \"@/pages/post-call-evaluation\";\nimport CallFeedback from \"@/pages/call-feedback\";\nimport AdminPanel from \"@/pages/admin-panel\";\nimport SuperAdminLogin from \"@/pages/super-admin-login\";\nimport SuperAdminDashboard from \"@/pages/super-admin-dashboard\";\nimport EnterpriseAdmin from \"@/pages/enterprise-admin\";\nimport EnterpriseProtectedRoute from \"@/components/EnterpriseProtectedRoute\";\nimport PersonalInfo from \"@/pages/signup/personal-info\";\nimport ProfessionalBackground from \"@/pages/signup/professional-background\";\nimport AvailabilityPreferences from \"@/pages/signup/availability-preferences\";\nimport NominateSalesRep from \"@/pages/signup/nominate-sales-rep\";\nimport ChoosePackage from \"@/pages/signup/choose-package\";\nimport SalesRepPersonalInfo from \"@/pages/signup/sales-rep/personal-info\";\nimport SalesRepProfessionalInfo from \"@/pages/signup/sales-rep/professional-info\";\nimport InviteDecisionMakers from \"@/pages/signup/sales-rep/invite-decision-makers\";\nimport SalesRepChoosePackage from \"@/pages/signup/sales-rep/choose-package\";\nimport DecisionMakerPersonalInfo from \"@/pages/signup/decision-maker/personal-info\";\nimport DecisionMakerProfessionalInfo from \"@/pages/signup/decision-maker/professional-info\";\nimport DecisionMakerAvailability from \"@/pages/signup/decision-maker/availability\";\nimport DecisionMakerNominate from \"@/pages/signup/decision-maker/nominate\";\n// Package selection removed from DM flow - DMs automatically get 3 calls per month\n// import DecisionMakerChoosePackage from \"@/pages/signup/decision-maker/package\";\nimport TestSignup from \"@/pages/test-signup\";\nimport FlagsManagement from \"@/pages/flags-management\";\nimport NotFound from \"@/pages/not-found\";\nimport DMSuspensionAlerts from \"@/pages/dm-suspension-alerts\";\nimport Analytics from \"@/pages/analytics\";\nimport Profile from \"@/pages/profile\";\nimport DMInviteLanding from \"@/pages/dm-invite-landing\";\nimport SalesRepEvaluation from \"@/pages/sales-rep-evaluation\";\nimport PaymentSuccess from \"@/pages/payment-success\";\nimport DMFeedback from \"@/pages/feedback/dm-feedback\";\nimport RepFeedback from \"@/pages/feedback/rep-feedback\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/invite/:token\" component={DMInviteLanding} />\n      <Route path=\"/payment-success\" component={PaymentSuccess} />\n      <Route path=\"/sales-dashboard\">\n        <ProtectedRoute requiredRole=\"sales_rep\">\n          <SalesDashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/decision-dashboard\">\n        <ProtectedRoute requiredRole=\"decision_maker\">\n          <DecisionDashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin\">\n        <ProtectedRoute requiredRole=\"admin\">\n          <AdminPanel />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/super-admin/login\" component={SuperAdminLogin} />\n      <Route path=\"/super-admin/dashboard\">\n        <ProtectedRoute requiredRole=\"super_admin\">\n          <SuperAdminDashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/enterprise-admin\">\n        <EnterpriseProtectedRoute>\n          <EnterpriseAdmin />\n        </EnterpriseProtectedRoute>\n      </Route>\n      <Route path=\"/evaluation/rep\" component={PostCallEvaluation} />\n      <Route path=\"/evaluation/dm\" component={CallFeedback} />\n      <Route path=\"/evaluation/sales-rep\">\n        <ProtectedRoute requiredRole=\"sales_rep\">\n          <SalesRepEvaluation />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/flags\">\n        <ProtectedRoute>\n          <FlagsManagement />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/signup/personal\" component={PersonalInfo} />\n      <Route path=\"/signup/professional\" component={ProfessionalBackground} />\n      <Route path=\"/signup/availability\" component={AvailabilityPreferences} />\n      <Route path=\"/signup/nominate\" component={NominateSalesRep} />\n      <Route path=\"/signup/package\" component={ChoosePackage} />\n      <Route path=\"/signup/sales-rep/personal-info\" component={SalesRepPersonalInfo} />\n      <Route path=\"/signup/sales-rep/professional-info\" component={SalesRepProfessionalInfo} />\n      <Route path=\"/signup/sales-rep/invites\" component={InviteDecisionMakers} />\n      <Route path=\"/signup/sales-rep/package\" component={SalesRepChoosePackage} />\n      <Route path=\"/signup/decision-maker/personal-info\" component={DecisionMakerPersonalInfo} />\n      <Route path=\"/signup/decision-maker/professional-info\" component={DecisionMakerProfessionalInfo} />\n      <Route path=\"/signup/decision-maker/availability\" component={DecisionMakerAvailability} />\n      <Route path=\"/signup/decision-maker/nominate\" component={DecisionMakerNominate} />\n      {/* Package route removed - DMs automatically get 3 calls per month */}\n      <Route path=\"/test-signup\" component={TestSignup} />\n      <Route path=\"/dm-suspension-alerts\">\n        <ProtectedRoute requiredRole=\"decision_maker\">\n          <DMSuspensionAlerts />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/analytics\">\n        <ProtectedRoute requiredRole=\"sales_rep\">\n          <Analytics />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/profile\">\n        <ProtectedRoute requiredRole=\"sales_rep\">\n          <Profile />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/feedback/dm/:callId\" component={DMFeedback} />\n      <Route path=\"/feedback/rep/:callId\" component={RepFeedback} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen\">\n          <Navigation />\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":6501},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Add pages below */}\n      {/* <Route path=\"/\" component={Home}/> */}\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":733},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  --naeborly-blue: hsl(217, 91%, 60%);\n  --naeborly-light-blue: hsl(217, 91%, 75%);\n  --naeborly-dark-blue: hsl(217, 91%, 45%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-gradient-to-br from-blue-50 to-slate-50 text-foreground min-h-screen;\n  }\n}\n\n.naeborly-blue {\n  background-color: var(--naeborly-blue);\n}\n\n.naeborly-light-blue {\n  background-color: var(--naeborly-light-blue);\n}\n\n.naeborly-dark-blue {\n  background-color: var(--naeborly-dark-blue);\n}\n","size_bytes":2058},"client/src/main.jsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")).render(<App />);\n","size_bytes":156},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AccountSettings.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Building,\n  User,\n  CreditCard,\n  ExternalLink,\n  Mail,\n  Phone,\n  Calendar,\n  Shield,\n  HelpCircle,\n  Settings,\n  CheckCircle,\n  AlertCircle,\n  Loader2,\n  FileText,\n  Users,\n  Activity,\n  DollarSign,\n} from \"lucide-react\";\n\nexport default function AccountSettings() {\n  const { toast } = useToast();\n  const [isSupportDialogOpen, setIsSupportDialogOpen] = useState(false);\n  const [supportForm, setSupportForm] = useState({\n    subject: \"\",\n    message: \"\",\n    priority: \"medium\",\n    category: \"general\",\n  });\n  const [isUpdatingSettings, setIsUpdatingSettings] = useState(false);\n\n  // Fetch company settings\n  const {\n    data: settings = {},\n    isLoading,\n    refetch,\n  } = useQuery({\n    queryKey: [\"/api/company-settings\"],\n    retry: false,\n  });\n\n  const { company = {}, plan = {}, usage = {}, support = {} } = settings;\n\n  // Access billing portal mutation\n  const billingPortalMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"/api/billing-portal-link\");\n      return response;\n    },\n    onSuccess: (data) => {\n      window.open(data.url, \"_blank\");\n      toast({\n        title: \"Billing Portal Opened\",\n        description:\n          \"You've been redirected to manage your billing information\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to access billing portal\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Submit support ticket mutation\n  const supportMutation = useMutation({\n    mutationFn: async (ticketData) => {\n      return await apiRequest(\"/api/contact-support\", {\n        method: \"POST\",\n        body: JSON.stringify(ticketData),\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Support Ticket Submitted\",\n        description: `Ticket ${data.ticket.id} created. Expected response: ${data.ticket.estimatedResponse}`,\n      });\n      setIsSupportDialogOpen(false);\n      setSupportForm({\n        subject: \"\",\n        message: \"\",\n        priority: \"medium\",\n        category: \"general\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit support ticket\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAccessBilling = () => {\n    billingPortalMutation.mutate();\n  };\n\n  const handleSupportSubmit = () => {\n    if (!supportForm.subject.trim() || !supportForm.message.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    supportMutation.mutate(supportForm);\n  };\n\n  const getPlanStatusBadge = (status) => {\n    switch (status) {\n      case \"active\":\n        return (\n          <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n            <CheckCircle className=\"mr-1 h-3 w-3\" />\n            Active\n          </Badge>\n        );\n      case \"trial\":\n        return (\n          <Badge variant=\"secondary\">\n            <AlertCircle className=\"mr-1 h-3 w-3\" />\n            Trial\n          </Badge>\n        );\n      case \"cancelled\":\n        return (\n          <Badge variant=\"destructive\">\n            <AlertCircle className=\"mr-1 h-3 w-3\" />\n            Cancelled\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  const formatCurrency = (amount, currency = \"USD\") => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: currency,\n    }).format(amount);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <Loader2 className=\"animate-spin h-8 w-8 text-blue-600\" />\n        <span className=\"ml-2 text-gray-600\">Loading account settings...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h2 className=\"text-2xl font-bold text-gray-900 flex items-center\">\n          <Settings className=\"text-blue-600 mr-3\" size={28} />\n          Account Settings & Support\n        </h2>\n        <p className=\"text-gray-600 mt-1\">\n          Manage your company information, billing, and get support\n        </p>\n      </div>\n\n      {/* Company Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Building className=\"text-blue-600 mr-3\" size={20} />\n            Company Information\n          </CardTitle>\n          <CardDescription>\n            Your company details and verification status\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-600\">\n                  Company Name\n                </Label>\n                <div className=\"mt-1 text-lg font-semibold\">{company.name}</div>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-600\">\n                  Verified Domain\n                </Label>\n                <div className=\"mt-1 flex items-center space-x-2\">\n                  <Badge\n                    variant=\"default\"\n                    className=\"bg-green-100 text-green-800\"\n                  >\n                    <Shield className=\"mr-1 h-3 w-3\" />\n                    Verified\n                  </Badge>\n                  <span className=\"text-sm text-gray-700\">\n                    {company.verifiedDomain}\n                  </span>\n                </div>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-600\">\n                  Team Size\n                </Label>\n                <div className=\"mt-1 text-sm text-gray-700\">\n                  {company.totalUsers} total users ({company.salesReps} sales\n                  reps, {company.decisionMakers} decision makers)\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-600\">\n                  Admin Contact\n                </Label>\n                <div className=\"mt-1 space-y-1\">\n                  <div className=\"font-medium\">\n                    {company.adminContact?.name}\n                  </div>\n                  <div className=\"text-sm text-gray-600 flex items-center\">\n                    <Mail className=\"h-4 w-4 mr-1\" />\n                    {company.adminContact?.email}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    Joined {formatDate(company.adminContact?.joinedDate)}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Plan Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <CreditCard className=\"text-blue-600 mr-3\" size={20} />\n            Subscription Plan\n          </CardTitle>\n          <CardDescription>\n            Your current plan details and billing information\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Plan Details */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"text-lg font-semibold\">{plan.type}</h4>\n                  <p className=\"text-sm text-gray-600\">\n                    {formatCurrency(plan.pricing?.basePrice)} /{\" \"}\n                    {plan.billingCycle}\n                  </p>\n                </div>\n                {getPlanStatusBadge(plan.status)}\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-600\">Current Period:</span>\n                  <span>\n                    {formatDate(plan.currentPeriodStart)} -{\" \"}\n                    {formatDate(plan.currentPeriodEnd)}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-600\">Next Renewal:</span>\n                  <span className=\"font-medium\">\n                    {formatDate(plan.renewalDate)}\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"pt-4\">\n                <Button\n                  onClick={handleAccessBilling}\n                  disabled={billingPortalMutation.isPending}\n                  className=\"w-full\"\n                >\n                  {billingPortalMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"animate-spin h-4 w-4 mr-2\" />\n                      Opening Portal...\n                    </>\n                  ) : (\n                    <>\n                      <ExternalLink className=\"h-4 w-4 mr-2\" />\n                      Manage Billing\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            {/* Plan Features */}\n            <div className=\"space-y-4\">\n              <h5 className=\"font-medium text-gray-900\">Plan Features</h5>\n              <div className=\"space-y-2\">\n                {plan.features?.map((feature, index) => (\n                  <div key={index} className=\"flex items-center text-sm\">\n                    <CheckCircle className=\"h-4 w-4 text-green-500 mr-2 flex-shrink-0\" />\n                    <span className=\"text-gray-700\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"pt-4 border-t\">\n                <h6 className=\"font-medium text-gray-900 mb-2\">Plan Limits</h6>\n                <div className=\"space-y-1 text-sm text-gray-600\">\n                  <div>\n                    Monthly Call Credits: {plan.limits?.monthlyCallCredits}\n                  </div>\n                  <div>DM Referrals: {plan.limits?.dmReferrals}</div>\n                  <div>Support Level: {plan.limits?.supportLevel}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Usage & Billing */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Current Usage */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Activity className=\"text-blue-600 mr-3\" size={20} />\n              Current Month Usage\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">Calls Made</span>\n                <span className=\"font-medium\">\n                  {usage.currentMonth?.calls || 0}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">DMs Referred</span>\n                <span className=\"font-medium\">\n                  {usage.currentMonth?.dmsReferred || 0}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">Credits Used</span>\n                <span className=\"font-medium\">\n                  {usage.currentMonth?.creditUsage || 0}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">Credits Remaining</span>\n                <span className=\"font-medium text-green-600\">\n                  {usage.currentMonth?.remainingCredits || 0}\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Billing */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <DollarSign className=\"text-blue-600 mr-3\" size={20} />\n              Recent Billing\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {usage.billingHistory?.slice(0, 3).map((bill, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between py-2 border-b last:border-b-0\"\n                >\n                  <div>\n                    <div className=\"text-sm font-medium\">\n                      {bill.description}\n                    </div>\n                    <div className=\"text-xs text-gray-500\">\n                      {formatDate(bill.date)}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-medium\">\n                      {formatCurrency(bill.amount)}\n                    </div>\n                    <Badge\n                      variant={bill.status === \"paid\" ? \"default\" : \"secondary\"}\n                      className=\"text-xs\"\n                    >\n                      {bill.status}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Support & Help */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <HelpCircle className=\"text-blue-600 mr-3\" size={20} />\n            Support & Help\n          </CardTitle>\n          <CardDescription>\n            Get help with your account or contact our support team\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Support Actions */}\n            <div className=\"space-y-4\">\n              <Dialog\n                open={isSupportDialogOpen}\n                onOpenChange={setIsSupportDialogOpen}\n              >\n                <DialogTrigger asChild>\n                  <Button className=\"w-full\" variant=\"outline\">\n                    <Mail className=\"h-4 w-4 mr-2\" />\n                    Contact Naeberly Support\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-lg\">\n                  <DialogHeader>\n                    <DialogTitle>Contact Support</DialogTitle>\n                    <DialogDescription>\n                      Submit a support ticket and our team will get back to you\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4 py-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"priority\">Priority</Label>\n                        <Select\n                          value={supportForm.priority}\n                          onValueChange={(value) =>\n                            setSupportForm((prev) => ({\n                              ...prev,\n                              priority: value,\n                            }))\n                          }\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"low\">Low</SelectItem>\n                            <SelectItem value=\"medium\">Medium</SelectItem>\n                            <SelectItem value=\"high\">High</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"category\">Category</Label>\n                        <Select\n                          value={supportForm.category}\n                          onValueChange={(value) =>\n                            setSupportForm((prev) => ({\n                              ...prev,\n                              category: value,\n                            }))\n                          }\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"general\">General</SelectItem>\n                            <SelectItem value=\"billing\">Billing</SelectItem>\n                            <SelectItem value=\"technical\">Technical</SelectItem>\n                            <SelectItem value=\"feature_request\">\n                              Feature Request\n                            </SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"subject\">Subject *</Label>\n                      <Input\n                        id=\"subject\"\n                        placeholder=\"Brief description of your issue\"\n                        value={supportForm.subject}\n                        onChange={(e) =>\n                          setSupportForm((prev) => ({\n                            ...prev,\n                            subject: e.target.value,\n                          }))\n                        }\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"message\">Message *</Label>\n                      <Textarea\n                        id=\"message\"\n                        placeholder=\"Detailed description of your issue or question\"\n                        rows={4}\n                        value={supportForm.message}\n                        onChange={(e) =>\n                          setSupportForm((prev) => ({\n                            ...prev,\n                            message: e.target.value,\n                          }))\n                        }\n                      />\n                    </div>\n                  </div>\n                  <DialogFooter>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setIsSupportDialogOpen(false)}\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      onClick={handleSupportSubmit}\n                      disabled={supportMutation.isPending}\n                    >\n                      {supportMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"animate-spin h-4 w-4 mr-2\" />\n                          Submitting...\n                        </>\n                      ) : (\n                        \"Submit Ticket\"\n                      )}\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n\n              <div className=\"grid grid-cols-1 gap-3\">\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full justify-start\"\n                  onClick={() => window.open(support.helpCenterUrl, \"_blank\")}\n                >\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Help Center\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full justify-start\"\n                  onClick={() => window.open(support.statusPageUrl, \"_blank\")}\n                >\n                  <Activity className=\"h-4 w-4 mr-2\" />\n                  System Status\n                </Button>\n              </div>\n            </div>\n\n            {/* Account Manager */}\n            <div className=\"space-y-4\">\n              <h5 className=\"font-medium text-gray-900\">\n                Your Account Manager\n              </h5>\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                    <User className=\"h-5 w-5 text-blue-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h6 className=\"font-medium\">\n                      {support.accountManager?.name}\n                    </h6>\n                    <div className=\"text-sm text-gray-600 space-y-1 mt-1\">\n                      <div className=\"flex items-center\">\n                        <Mail className=\"h-3 w-3 mr-1\" />\n                        {support.accountManager?.email}\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Phone className=\"h-3 w-3 mr-1\" />\n                        {support.accountManager?.phone}\n                      </div>\n                    </div>\n                    <Badge variant=\"outline\" className=\"mt-2 text-xs\">\n                      Priority Support\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":22436},"client/src/components/BookingModal.jsx":{"content":"import { useState, useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  ChevronLeft,\n  ChevronRight,\n  Calendar,\n  Clock,\n  User,\n  Building,\n  Star,\n  X,\n  Loader2,\n  CheckCircle,\n  Mail,\n  Lock,\n  Crown,\n  AlertCircle,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nconst BookingModal = ({ isOpen, onClose, decisionMaker, onConfirm }) => {\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [agenda, setAgenda] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  const [bookingSuccess, setBookingSuccess] = useState(false);\n  const [bookingData, setBookingData] = useState(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n\n  // Check calendar connection status\n  const { data: calendarStatus, isLoading: calendarStatusLoading } = useQuery({\n    queryKey: [\"/api/calendar/status\"],\n    retry: false,\n    enabled: isOpen, // Only fetch when modal is open\n  });\n\n  // Fetch decision maker's calendar availability when date is selected\n  const { data: dmAvailability, isLoading: availabilityLoading } = useQuery({\n    queryKey: [\"/api/calendar/availability\", decisionMaker?.id, selectedDate],\n    queryFn: async () => {\n      if (!selectedDate || !decisionMaker?.id) return null;\n\n      // Create start and end dates in UTC to avoid timezone issues\n      const startDate = new Date(\n        selectedDate.getFullYear(),\n        selectedDate.getMonth(),\n        selectedDate.getDate(),\n      );\n      const endDate = new Date(\n        selectedDate.getFullYear(),\n        selectedDate.getMonth(),\n        selectedDate.getDate() + 1,\n      );\n      endDate.setMilliseconds(-1); // End of the day\n\n      console.log(\"Fetching availability for:\", {\n        dmId: decisionMaker.id,\n        selectedDate: selectedDate.toISOString(),\n        startDate: startDate.toISOString(),\n        endDate: endDate.toISOString(),\n      });\n\n      const response = await apiRequest(\n        `/api/calendar/availability/${decisionMaker.id}?startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}&duration=15`,\n      );\n\n      console.log(\"Availability response:\", {\n        totalSlots: response?.availableSlots?.length || 0,\n        firstFewSlots:\n          response?.availableSlots?.slice(0, 5)?.map((slot) => ({\n            start: slot.start,\n            isAvailable: slot.isAvailable,\n            conflicts: slot.conflicts?.length || 0,\n          })) || [],\n      });\n\n      return response;\n    },\n    enabled: !!(isOpen && selectedDate && decisionMaker?.id),\n    retry: false,\n  });\n\n  // Determine if user has email access\n  const hasEmailAccess =\n    user?.packageType === \"enterprise\" || user?.hasEmailAddon;\n\n  // Check if calendar is connected\n  const isCalendarConnected = calendarStatus?.connected;\n\n  // Generate available time slots (9 AM to 5 PM in 15-minute intervals)\n  const generateTimeSlots = (date) => {\n    const slots = [];\n    const today = new Date();\n    const selectedDay = new Date(date);\n    const isToday = selectedDay.toDateString() === today.toDateString();\n\n    // Get available slots from DM's calendar\n    const availableSlots = dmAvailability?.availableSlots || [];\n\n    console.log(\"GenerateTimeSlots Debug:\", {\n      selectedDate: selectedDay.toISOString(),\n      availableSlotsCount: availableSlots.length,\n      availableSlots: availableSlots.map((slot) => ({\n        start: slot.start,\n        end: slot.end,\n      })),\n    });\n\n    for (let hour = 9; hour < 17; hour++) {\n      for (let minute = 0; minute < 60; minute += 15) {\n        const slotTime = new Date(selectedDay);\n        slotTime.setHours(hour, minute, 0, 0);\n        const slotEnd = new Date(slotTime.getTime() + 15 * 60 * 1000); // 15 minutes later\n\n        // Skip past time slots if it's today\n        const isPast = isToday && slotTime <= today;\n\n        // Check if this slot conflicts with DM's scheduled calls\n        let isDMUnavailable = false;\n\n        if (dmAvailability && dmAvailability.availableSlots !== undefined) {\n          // Look for this specific time slot in the availability data\n          const matchingSlot = availableSlots.find((availableSlot) => {\n            const availableStart = new Date(availableSlot.start);\n            const availableEnd = new Date(availableSlot.end);\n\n            // Check if this is the same time slot (within 1 minute tolerance)\n            return (\n              Math.abs(slotTime.getTime() - availableStart.getTime()) < 60000 &&\n              Math.abs(slotEnd.getTime() - availableEnd.getTime()) < 60000\n            );\n          });\n\n          if (matchingSlot) {\n            // We found the exact slot in the availability data\n            isDMUnavailable = !matchingSlot.isAvailable;\n\n            const indianTime = slotTime.toLocaleString(\"en-IN\", {\n              timeZone: \"Asia/Kolkata\",\n              hour12: true,\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n            });\n\n            console.log(\"Slot availability check:\", {\n              time: slotTime.toISOString(),\n              indianTime: indianTime,\n              matchingSlot: {\n                start: matchingSlot.start,\n                end: matchingSlot.end,\n                isAvailable: matchingSlot.isAvailable,\n                conflicts: matchingSlot.conflicts?.length || 0,\n              },\n              isDMUnavailable,\n            });\n          } else {\n            // If no exact match found, assume available (default behavior)\n            isDMUnavailable = false;\n          }\n        }\n\n        const timeString = slotTime.toLocaleTimeString(\"en-US\", {\n          hour: \"numeric\",\n          minute: \"2-digit\",\n          hour12: true,\n        });\n\n        const slotData = {\n          time: timeString,\n          value: slotTime,\n          disabled: isPast || isDMUnavailable,\n          unavailableReason: isDMUnavailable\n            ? \"DM has another meeting\"\n            : isPast\n              ? \"Time has passed\"\n              : null,\n          debugInfo: {\n            utc: slotTime.toISOString(),\n            slotEnd: slotEnd.toISOString(),\n            isDMUnavailable,\n            isPast,\n          },\n        };\n\n        slots.push(slotData);\n      }\n    }\n\n    console.log(\n      \"Generated slots sample:\",\n      slots.slice(0, 5).map((s) => ({\n        time: s.time,\n        utc: s.debugInfo.utc,\n        disabled: s.disabled,\n        reason: s.unavailableReason,\n      })),\n    );\n\n    return slots;\n  };\n\n  // Get days in month for calendar\n  const getDaysInMonth = (date) => {\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const startDate = new Date(firstDay);\n    startDate.setDate(startDate.getDate() - firstDay.getDay());\n\n    const days = [];\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    for (let i = 0; i < 42; i++) {\n      const currentDate = new Date(startDate);\n      currentDate.setDate(startDate.getDate() + i);\n\n      const isCurrentMonth = currentDate.getMonth() === month;\n      const isPast = currentDate < today;\n      const isToday = currentDate.toDateString() === today.toDateString();\n\n      days.push({\n        date: currentDate,\n        day: currentDate.getDate(),\n        isCurrentMonth,\n        isPast,\n        isToday,\n        disabled: isPast || !isCurrentMonth,\n      });\n    }\n    return days;\n  };\n\n  const handleDateSelect = (day) => {\n    if (day.disabled) return;\n    setSelectedDate(day.date);\n    setSelectedTimeSlot(null); // Reset time slot when date changes\n  };\n\n  const handleTimeSlotSelect = (slot) => {\n    if (slot.disabled) return;\n    setSelectedTimeSlot(slot);\n  };\n\n  // Booking mutation\n  const bookingMutation = useMutation({\n    mutationFn: async (bookingData) => {\n      // First check if current user can book calls\n      const userCanBook = await apiRequest(\"/api/user/can-book-calls\");\n      if (!userCanBook.canBook) {\n        throw new Error(\n          `You have reached your monthly call limit: ${userCanBook.message}`,\n        );\n      }\n\n      const response = await apiRequest(\"/api/calendar/book-slot\", {\n        method: \"POST\",\n        body: JSON.stringify(bookingData),\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      setBookingSuccess(true);\n\n      // Store booking data for success display\n      setBookingData(data.booking);\n\n      toast({\n        title: \"Call Booked Successfully!\",\n        description: data.calendarIntegrated\n          ? `Your call with ${decisionMaker.name} is scheduled and added to your Google Calendar with Google Meet link`\n          : `Your call with ${decisionMaker.name} is scheduled for ${selectedDate.toLocaleDateString(\n              \"en-US\",\n              {\n                weekday: \"long\",\n                year: \"numeric\",\n                month: \"long\",\n                day: \"numeric\",\n              },\n            )} at ${selectedTimeSlot.time}`,\n        duration: 5000,\n      });\n\n      // Invalidate relevant queries to refresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales-rep/calls\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales-rep/metrics\"] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/calendar/upcoming-meetings\"],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/sales-rep/available-dms-gated\"],\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/can-book-calls\"] });\n\n      // Close modal after 3 seconds to show booking details\n      setTimeout(() => {\n        handleClose();\n      }, 3000);\n    },\n    onError: (error) => {\n      console.error(\"Booking error:\", error);\n      toast({\n        title: \"Booking Failed\",\n        description:\n          error.message || \"Unable to book the call. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleConfirm = () => {\n    // Check if calendar is connected first\n    if (!isCalendarConnected) {\n      toast({\n        title: \"Calendar Required\",\n        description:\n          \"Please connect your Google Calendar first to book calls. You can connect it from your dashboard.\",\n        variant: \"destructive\",\n        duration: 5000,\n      });\n      return;\n    }\n\n    if (selectedDate && selectedTimeSlot) {\n      // Calculate start and end times\n      const startTime = new Date(selectedDate);\n      startTime.setHours(\n        selectedTimeSlot.value.getHours(),\n        selectedTimeSlot.value.getMinutes(),\n        0,\n        0,\n      );\n\n      const endTime = new Date(startTime);\n      endTime.setMinutes(endTime.getMinutes() + 15); // 15-minute meetings\n\n      const bookingData = {\n        dmId: decisionMaker.id,\n        startTime: startTime.toISOString(),\n        endTime: endTime.toISOString(),\n        agenda: agenda || \"Business discussion\",\n        notes: notes || \"\",\n      };\n\n      bookingMutation.mutate(bookingData);\n    }\n  };\n\n  const handleClose = () => {\n    setSelectedDate(null);\n    setSelectedTimeSlot(null);\n    setAgenda(\"\");\n    setNotes(\"\");\n    setBookingSuccess(false);\n    setBookingData(null);\n    onClose();\n  };\n\n  const navigateMonth = (direction) => {\n    const newMonth = new Date(currentMonth);\n    newMonth.setMonth(currentMonth.getMonth() + direction);\n    setCurrentMonth(newMonth);\n  };\n\n  const days = getDaysInMonth(currentMonth);\n  const timeSlots = selectedDate ? generateTimeSlots(selectedDate) : [];\n\n  const monthNames = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent\n        className=\"max-w-4xl max-h-[90vh] overflow-y-auto bg-white border border-gray-200\"\n        aria-describedby=\"booking-dialog-description\"\n      >\n        <DialogHeader className=\"border-b border-gray-100 pb-4\">\n          <DialogTitle className=\"text-2xl font-bold text-gray-900\">\n            Book a Call\n          </DialogTitle>\n          <div id=\"booking-dialog-description\" className=\"sr-only\">\n            Schedule a meeting with {decisionMaker?.name} by selecting a date\n            and time slot.\n          </div>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 py-6\">\n          {/* Decision Maker Info */}\n          <div className=\"space-y-6\">\n            <Card className=\"border border-gray-200 bg-white shadow-sm\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-2 mb-4\">\n                  <User className=\"w-5 h-5 text-blue-600\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900\">\n                    Decision Maker\n                  </h3>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div>\n                    <h4 className=\"text-xl font-bold text-gray-900\">\n                      {decisionMaker?.name}\n                    </h4>\n                    <p className=\"text-gray-600\">{decisionMaker?.jobTitle}</p>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Building className=\"w-4 h-4 text-gray-500\" />\n                    <span className=\"text-gray-700\">\n                      {decisionMaker?.company}\n                    </span>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n                    <span className=\"text-gray-700\">\n                      {decisionMaker?.engagementScore}% engagement\n                    </span>\n                  </div>\n\n                  {/* Email Access Section */}\n                  <div className=\"mt-3 pt-3 border-t border-gray-100\">\n                    {user?.packageType === \"enterprise\" ? (\n                      // Enterprise users - always show email\n                      <div className=\"flex items-center space-x-2 p-3 bg-green-50 rounded-lg border border-green-200\">\n                        <Mail className=\"w-4 h-4 text-green-600\" />\n                        <div>\n                          <div className=\"text-sm font-medium text-green-800\">\n                            Email: {decisionMaker?.email || \"Not available\"}\n                          </div>\n                          <div className=\"text-xs text-green-600 flex items-center gap-1\">\n                            <Crown className=\"w-3 h-3\" />\n                            Enterprise Access\n                          </div>\n                        </div>\n                      </div>\n                    ) : user?.packageType === \"basic\" ||\n                      user?.packageType === \"pro\" ||\n                      user?.packageType === \"pro-team\" ? (\n                      // Basic/Pro users - show email if addon purchased\n                      hasEmailAccess ? (\n                        <div className=\"flex items-center space-x-2 p-3 bg-green-50 rounded-lg border border-green-200\">\n                          <Mail className=\"w-4 h-4 text-green-600\" />\n                          <div>\n                            <div className=\"text-sm font-medium text-green-800\">\n                              Email: {decisionMaker?.email || \"Not available\"}\n                            </div>\n                            <div className=\"text-xs text-green-600\">\n                              Email Addon Active\n                            </div>\n                          </div>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center space-x-2 p-3 bg-amber-50 rounded-lg border border-amber-200\">\n                          <Lock className=\"w-4 h-4 text-amber-600\" />\n                          <div>\n                            <div className=\"text-sm font-medium text-amber-800\">\n                              Email: Hidden\n                            </div>\n                            <div className=\"text-xs text-amber-600\">\n                              Purchase $5 addon to unlock email access\n                            </div>\n                          </div>\n                        </div>\n                      )\n                    ) : (\n                      // Free users - no email access\n                      <div className=\"flex items-center space-x-2 p-3 bg-gray-50 rounded-lg border border-gray-200\">\n                        <Lock className=\"w-4 h-4 text-gray-500\" />\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-700\">\n                            Email: Not Available\n                          </div>\n                          <div className=\"text-xs text-gray-500\">\n                            Upgrade to Basic or higher for email access\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"mt-4 p-3 bg-blue-50 rounded-lg border border-blue-100\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Clock className=\"w-4 h-4 text-blue-600\" />\n                    <span className=\"text-sm font-medium text-blue-900\">\n                      15 Minutes\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-blue-700\">\n                    This will be a brief introduction call to discuss potential\n                    collaboration opportunities.\n                  </p>\n                </div>\n\n                {/* Call Limits Display */}\n                <div className=\"mt-4 p-3 bg-green-50 rounded-lg border border-green-200\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div className=\"flex items-center space-x-2\">\n                      <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                      <span className=\"text-green-900 font-medium\">\n                        Call Availability\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"mt-2 space-y-1 text-xs text-green-700\">\n                    <div>\n                      DM: {decisionMaker?.remainingCalls || 3} /{\" \"}\n                      {decisionMaker?.maxCalls || 3} calls remaining\n                    </div>\n                    <div>\n                      You:{\" \"}\n                      {decisionMaker?.canBookCalls\n                        ? \"Available\"\n                        : \"Limit reached\"}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Agenda and Notes */}\n                <div className=\"mt-4 space-y-3\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Meeting Agenda (Optional)\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={agenda}\n                      onChange={(e) => setAgenda(e.target.value)}\n                      placeholder=\"e.g., Product demo, Partnership discussion\"\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Notes (Optional)\n                    </label>\n                    <textarea\n                      value={notes}\n                      onChange={(e) => setNotes(e.target.value)}\n                      placeholder=\"Any additional information or preparation notes...\"\n                      rows=\"3\"\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Calendar and Time Selection */}\n          <div className=\"space-y-6\">\n            {/* Calendar */}\n            <Card className=\"border border-gray-200 bg-white shadow-sm\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-2 mb-4\">\n                  <Calendar className=\"w-5 h-5 text-blue-600\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900\">\n                    Select Date\n                  </h3>\n                </div>\n\n                {/* Month Navigation */}\n                <div className=\"flex items-center justify-between mb-4\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => navigateMonth(-1)}\n                    className=\"p-2 hover:bg-gray-100\"\n                  >\n                    <ChevronLeft className=\"w-4 h-4\" />\n                  </Button>\n                  <h4 className=\"text-lg font-semibold text-gray-900\">\n                    {monthNames[currentMonth.getMonth()]}{\" \"}\n                    {currentMonth.getFullYear()}\n                  </h4>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => navigateMonth(1)}\n                    className=\"p-2 hover:bg-gray-100\"\n                  >\n                    <ChevronRight className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n\n                {/* Calendar Grid */}\n                <div className=\"grid grid-cols-7 gap-1\">\n                  {[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].map(\n                    (day) => (\n                      <div\n                        key={day}\n                        className=\"text-center text-sm font-medium text-gray-500 py-2\"\n                      >\n                        {day}\n                      </div>\n                    ),\n                  )}\n                  {days.map((day, index) => (\n                    <button\n                      key={index}\n                      onClick={() => handleDateSelect(day)}\n                      disabled={day.disabled}\n                      className={`\n                        text-center py-2 px-1 text-sm rounded-lg transition-colors\n                        ${\n                          day.disabled\n                            ? \"text-gray-300 cursor-not-allowed\"\n                            : \"text-gray-700 hover:bg-blue-50 cursor-pointer\"\n                        }\n                        ${day.isToday ? \"font-bold text-blue-600\" : \"\"}\n                        ${\n                          selectedDate &&\n                          selectedDate.toDateString() ===\n                            day.date.toDateString()\n                            ? \"bg-blue-600 text-white hover:bg-blue-700\"\n                            : \"\"\n                        }\n                      `}\n                    >\n                      {day.day}\n                    </button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Time Slots */}\n            {selectedDate && (\n              <Card className=\"border border-gray-200 bg-white shadow-sm\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-2 mb-4\">\n                    <Clock className=\"w-5 h-5 text-blue-600\" />\n                    <h3 className=\"text-lg font-semibold text-gray-900\">\n                      Select Time\n                    </h3>\n                  </div>\n\n                  <div className=\"text-sm text-gray-600 mb-4\">\n                    {selectedDate.toLocaleDateString(\"en-US\", {\n                      weekday: \"long\",\n                      year: \"numeric\",\n                      month: \"long\",\n                      day: \"numeric\",\n                    })}\n                  </div>\n\n                  {availabilityLoading ? (\n                    <div className=\"flex items-center justify-center py-8\">\n                      <Loader2 className=\"w-6 h-6 animate-spin text-blue-600\" />\n                      <span className=\"ml-2 text-gray-600\">\n                        Checking availability...\n                      </span>\n                    </div>\n                  ) : (\n                    <div className=\"grid grid-cols-3 gap-2 max-h-64 overflow-y-auto\">\n                      {timeSlots.map((slot, index) => (\n                        <button\n                          key={index}\n                          onClick={() => handleTimeSlotSelect(slot)}\n                          disabled={slot.disabled}\n                          title={slot.unavailableReason || \"\"}\n                          className={`\n                            py-2 px-3 text-sm rounded-lg border transition-colors relative\n                            ${\n                              slot.disabled\n                                ? slot.unavailableReason ===\n                                  \"DM has another meeting\"\n                                  ? \"text-red-400 bg-red-50 border-red-200 cursor-not-allowed\"\n                                  : \"text-gray-400 bg-gray-50 border-gray-200 cursor-not-allowed\"\n                                : \"text-gray-700 bg-white border-gray-300 hover:bg-blue-50 hover:border-blue-300 cursor-pointer\"\n                            }\n                            ${\n                              selectedTimeSlot &&\n                              selectedTimeSlot.time === slot.time\n                                ? \"bg-blue-600 text-white border-blue-600\"\n                                : \"\"\n                            }\n                          `}\n                        >\n                          <div className=\"flex flex-col items-center\">\n                            <span>{slot.time}</span>\n                            {slot.unavailableReason ===\n                              \"DM has another meeting\" && (\n                              <span className=\"text-xs text-red-600 mt-1\">\n                                Unavailable\n                              </span>\n                            )}\n                          </div>\n                        </button>\n                      ))}\n                    </div>\n                  )}\n\n                  {/* Legend for time slot colors */}\n                  <div className=\"mt-4 flex flex-wrap gap-4 text-xs text-gray-600\">\n                    <div className=\"flex items-center gap-1\">\n                      <div className=\"w-3 h-3 bg-white border border-gray-300 rounded\"></div>\n                      <span>Available</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <div className=\"w-3 h-3 bg-red-50 border border-red-200 rounded\"></div>\n                      <span>DM Unavailable</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <div className=\"w-3 h-3 bg-gray-50 border border-gray-200 rounded\"></div>\n                      <span>Past Time</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"border-t border-gray-100 pt-4\">\n          {bookingSuccess ? (\n            <div className=\"space-y-4 text-center\">\n              <div className=\"flex items-center justify-center space-x-2 text-green-600\">\n                <CheckCircle className=\"w-5 h-5\" />\n                <span className=\"font-medium\">Call booked successfully!</span>\n              </div>\n\n              {bookingData && (\n                <div className=\"space-y-3 p-4 bg-green-50 rounded-lg border border-green-200\">\n                  <div className=\"text-sm text-gray-600\">\n                    <strong>Confirmation:</strong>{\" \"}\n                    {bookingData.confirmationCode}\n                  </div>\n\n                  {bookingData.calendarIntegrated && (\n                    <div className=\"text-sm text-gray-600\">\n                      <strong>Calendar:</strong> Added to your Google Calendar\n                    </div>\n                  )}\n\n                  {bookingData.googleMeetLink && (\n                    <div className=\"space-y-2\">\n                      <div className=\"text-sm text-gray-600\">\n                        <strong>Google Meet Link:</strong>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                        onClick={() =>\n                          window.open(bookingData.googleMeetLink, \"_blank\")\n                        }\n                      >\n                        Open Google Meet\n                      </Button>\n                    </div>\n                  )}\n\n                  {/* DM Contact Information */}\n                  <div className=\"space-y-2\">\n                    <div className=\"text-sm text-gray-600\">\n                      <strong>Decision Maker Contact:</strong>\n                    </div>\n                    {hasEmailAccess ? (\n                      <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <Mail className=\"w-4 h-4 text-green-600\" />\n                          <span className=\"text-sm font-medium text-green-800\">\n                            Email Access Available\n                          </span>\n                        </div>\n                        <div className=\"text-sm text-gray-700\">\n                          <strong>Email:</strong>{\" \"}\n                          {decisionMaker?.email || \"Not available\"}\n                        </div>\n                        <div className=\"text-sm text-gray-700\">\n                          <strong>Name:</strong> {decisionMaker?.name}\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"p-3 bg-amber-50 border border-amber-200 rounded-lg\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <Lock className=\"w-4 h-4 text-amber-600\" />\n                          <span className=\"text-sm font-medium text-amber-800\">\n                            Email Access Limited\n                          </span>\n                        </div>\n                        <div className=\"text-sm text-amber-700 mb-2\">\n                          {user?.packageType === \"basic\" ||\n                          user?.packageType === \"pro\" ? (\n                            <>\n                              Purchase the $5 Email Access addon to see contact\n                              details\n                            </>\n                          ) : (\n                            <>Upgrade to Enterprise for full contact access</>\n                          )}\n                        </div>\n                        <div className=\"text-sm text-gray-700\">\n                          <strong>Name:</strong> {decisionMaker?.name}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"flex justify-end space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={handleClose}\n                disabled={bookingMutation.isPending}\n                className=\"border-gray-300 text-gray-700 hover:bg-gray-50\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleConfirm}\n                disabled={\n                  !selectedDate ||\n                  !selectedTimeSlot ||\n                  bookingMutation.isPending\n                }\n                className=\"bg-blue-600 hover:bg-blue-700 text-white disabled:bg-gray-300 disabled:cursor-not-allowed\"\n              >\n                {bookingMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Booking Call...\n                  </>\n                ) : (\n                  \"Book Call\"\n                )}\n              </Button>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default BookingModal;\n","size_bytes":33156},"client/src/components/CalendarBooking.jsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Calendar,\n  ChevronLeft,\n  ChevronRight,\n  Clock,\n  User,\n  Building,\n  Phone,\n  CheckCircle,\n  XCircle,\n  Calendar as CalendarIcon,\n  Loader2,\n  Plus,\n} from \"lucide-react\";\n\nexport default function CalendarBooking() {\n  const { toast } = useToast();\n  const [selectedDM, setSelectedDM] = useState(null);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [viewType, setViewType] = useState(\"week\"); // 'week', 'month', or 'agenda'\n  const [isMobileView, setIsMobileView] = useState(false);\n  const [selectedSlot, setSelectedSlot] = useState(null);\n  const [isBookingDialogOpen, setIsBookingDialogOpen] = useState(false);\n  const [isDMSelectionOpen, setIsDMSelectionOpen] = useState(false);\n  const [bookingForm, setBookingForm] = useState({\n    agenda: \"\",\n    notes: \"\",\n  });\n\n  // Responsive screen size detection\n  useEffect(() => {\n    const checkScreenSize = () => {\n      const isMobile = window.innerWidth < 768;\n      setIsMobileView(isMobile);\n      // Auto-switch to agenda view on mobile for better UX\n      if (isMobile && viewType === \"week\") {\n        setViewType(\"agenda\");\n      }\n    };\n\n    checkScreenSize();\n    window.addEventListener(\"resize\", checkScreenSize);\n    return () => window.removeEventListener(\"resize\", checkScreenSize);\n  }, [viewType]);\n\n  // Get available DMs\n  const { data: availableDMs = [], isLoading: dmsLoading } = useQuery({\n    queryKey: [\"/api/calendar/available-dms\"],\n    retry: false,\n  });\n\n  // Get DM availability for selected DM and date range\n  const {\n    data: availability = {},\n    isLoading: availabilityLoading,\n    refetch: refetchAvailability,\n  } = useQuery({\n    queryKey: [\"/api/calendar/dm-availability\", selectedDM?.id, getDateRange()],\n    enabled: !!selectedDM,\n    queryFn: async () => {\n      const { startDate, endDate } = getDateRange();\n      return await apiRequest(\n        `/api/calendar/dm-availability/${selectedDM.id}?startDate=${startDate}&endDate=${endDate}`,\n      );\n    },\n    retry: false,\n  });\n\n  // Get user's meetings\n  const { data: myMeetings = [], refetch: refetchMeetings } = useQuery({\n    queryKey: [\"/api/calendar/my-meetings\", getDateRange()],\n    queryFn: async () => {\n      const { startDate, endDate } = getDateRange();\n      return await apiRequest(\n        `/api/calendar/my-meetings?startDate=${startDate}&endDate=${endDate}`,\n      );\n    },\n    retry: false,\n  });\n\n  // Book meeting mutation\n  const bookMeetingMutation = useMutation({\n    mutationFn: async (bookingData) => {\n      return await apiRequest(\"/api/calendar/book-slot\", {\n        method: \"POST\",\n        body: JSON.stringify(bookingData),\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Meeting Booked Successfully\",\n        description: `Meeting with ${selectedSlot.dmName} scheduled for ${formatDateTime(selectedSlot.startTime)}`,\n      });\n      setIsBookingDialogOpen(false);\n      setSelectedSlot(null);\n      setBookingForm({ agenda: \"\", notes: \"\" });\n      refetchAvailability();\n      refetchMeetings();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to book the meeting slot\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  function getDateRange() {\n    const start = new Date(currentDate);\n    const end = new Date(currentDate);\n\n    if (viewType === \"week\") {\n      // Get start of week (Monday)\n      const dayOfWeek = start.getDay();\n      const diff = start.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);\n      start.setDate(diff);\n      start.setHours(0, 0, 0, 0);\n\n      // Get end of week (Sunday)\n      end.setDate(start.getDate() + 6);\n      end.setHours(23, 59, 59, 999);\n    } else {\n      // Get start of month\n      start.setDate(1);\n      start.setHours(0, 0, 0, 0);\n\n      // Get end of month\n      end.setMonth(end.getMonth() + 1, 0);\n      end.setHours(23, 59, 59, 999);\n    }\n\n    return {\n      startDate: start.toISOString(),\n      endDate: end.toISOString(),\n    };\n  }\n\n  function navigateDate(direction) {\n    const newDate = new Date(currentDate);\n    if (viewType === \"week\") {\n      newDate.setDate(newDate.getDate() + (direction === \"next\" ? 7 : -7));\n    } else {\n      newDate.setMonth(newDate.getMonth() + (direction === \"next\" ? 1 : -1));\n    }\n    setCurrentDate(newDate);\n  }\n\n  function formatDateTime(dateString) {\n    return new Date(dateString).toLocaleString(\"en-US\", {\n      weekday: \"long\",\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      hour12: true,\n    });\n  }\n\n  function formatTime(dateString) {\n    return new Date(dateString).toLocaleString(\"en-US\", {\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      hour12: true,\n    });\n  }\n\n  function getWeekDays() {\n    const start = new Date(currentDate);\n    const dayOfWeek = start.getDay();\n    const diff = start.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);\n    start.setDate(diff);\n\n    const days = [];\n    for (let i = 0; i < 7; i++) {\n      const day = new Date(start);\n      day.setDate(start.getDate() + i);\n      days.push(day);\n    }\n    return days;\n  }\n\n  function getTimeSlots() {\n    const slots = [];\n    for (let hour = 9; hour < 17; hour++) {\n      for (let minute = 0; minute < 60; minute += 30) {\n        const time = `${hour.toString().padStart(2, \"0\")}:${minute.toString().padStart(2, \"0\")}`;\n        slots.push(time);\n      }\n    }\n    return slots;\n  }\n\n  function getSlotForDateTime(date, time) {\n    if (!availability.availabilitySlots) return null;\n\n    const [hour, minute] = time.split(\":\").map(Number);\n    const slotDateTime = new Date(date);\n    slotDateTime.setHours(hour, minute, 0, 0);\n\n    return availability.availabilitySlots.find((slot) => {\n      const slotTime = new Date(slot.startTime);\n      return Math.abs(slotTime.getTime() - slotDateTime.getTime()) < 60000; // 1 minute tolerance\n    });\n  }\n\n  function handleSlotClick(slot) {\n    if (!slot || !slot.available) return;\n\n    setSelectedSlot(slot);\n    setIsBookingDialogOpen(true);\n  }\n\n  function handleBookingSubmit() {\n    if (!selectedSlot) return;\n\n    bookMeetingMutation.mutate({\n      dmId: selectedSlot.dmId,\n      startTime: selectedSlot.startTime,\n      endTime: selectedSlot.endTime,\n      agenda: bookingForm.agenda || \"Business Meeting\",\n      notes: bookingForm.notes,\n    });\n  }\n\n  function getSlotClassName(slot) {\n    if (!slot) return \"bg-gray-100 cursor-not-allowed\";\n    if (slot.available)\n      return \"bg-green-100 text-green-800 hover:bg-green-200 cursor-pointer border-green-300\";\n    if (slot.booked)\n      return \"bg-red-100 text-red-800 cursor-not-allowed border-red-300\";\n    return \"bg-gray-100 cursor-not-allowed\";\n  }\n\n  function getSlotContent(slot) {\n    if (!slot) return \"\";\n    if (slot.available) return \"✅\";\n    if (slot.booked) return \"❌\";\n    return \"\";\n  }\n\n  // Skip weekends\n  const weekDays = getWeekDays().filter(\n    (day) => day.getDay() !== 0 && day.getDay() !== 6,\n  );\n  const timeSlots = getTimeSlots();\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Responsive Header */}\n      <div className=\"flex flex-col space-y-4 sm:flex-row sm:items-center sm:justify-between sm:space-y-0\">\n        <div className=\"min-w-0 flex-1\">\n          <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900 flex items-center\">\n            <CalendarIcon\n              className=\"text-blue-600 mr-2 sm:mr-3 flex-shrink-0\"\n              size={isMobileView ? 20 : 28}\n            />\n            <span className=\"truncate\">Meeting Calendar</span>\n          </h2>\n          <p className=\"text-sm sm:text-base text-gray-600 mt-1\">\n            Book meetings with decision makers\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2 sm:space-x-4\">\n          <Select value={viewType} onValueChange={setViewType}>\n            <SelectTrigger className=\"w-full sm:w-32 min-w-[120px]\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"agenda\">Agenda View</SelectItem>\n              <SelectItem value=\"week\">Week View</SelectItem>\n              <SelectItem value=\"month\">Month View</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Responsive DM Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex flex-col space-y-3 sm:flex-row sm:items-center sm:justify-between sm:space-y-0\">\n            <div className=\"flex items-center min-w-0\">\n              <User className=\"text-blue-600 mr-2 flex-shrink-0\" size={20} />\n              <span className=\"truncate\">Decision Maker Selection</span>\n            </div>\n            <Dialog\n              open={isDMSelectionOpen}\n              onOpenChange={setIsDMSelectionOpen}\n            >\n              <DialogTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full sm:w-auto sm:ml-auto\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Select Decision Maker\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"w-[95vw] max-w-7xl max-h-[90vh] sm:max-h-[85vh]\">\n                <DialogHeader className=\"border-b border-gray-200 pb-4\">\n                  <DialogTitle className=\"flex items-center text-sm sm:text-lg font-mono\">\n                    <div className=\"flex items-center space-x-1 sm:space-x-2\">\n                      <div className=\"w-2 h-2 sm:w-3 sm:h-3 bg-green-500 rounded-full\"></div>\n                      <span className=\"text-gray-600 text-xs sm:text-sm\">\n                        DATABASE:\n                      </span>\n                      <span className=\"text-blue-600 text-xs sm:text-sm\">\n                        decision_makers\n                      </span>\n                    </div>\n                  </DialogTitle>\n                  <DialogDescription className=\"text-xs sm:text-sm font-mono text-gray-500 break-all\">\n                    SELECT * FROM decision_makers WHERE status = 'available'\n                    ORDER BY engagement_score DESC;\n                  </DialogDescription>\n                </DialogHeader>\n\n                <div className=\"py-4 max-h-[65vh] overflow-auto\">\n                  {dmsLoading ? (\n                    <div className=\"flex items-center justify-center py-12\">\n                      <Loader2 className=\"animate-spin h-6 w-6 text-blue-600\" />\n                      <span className=\"ml-3 font-mono text-sm\">\n                        Executing query...\n                      </span>\n                    </div>\n                  ) : availableDMs.length > 0 ? (\n                    <div className=\"border border-gray-300 rounded-lg overflow-hidden bg-white\">\n                      {/* Mobile View - Stacked Cards */}\n                      <div className=\"block md:hidden\">\n                        <div className=\"bg-gray-100 border-b border-gray-300 p-3\">\n                          <div className=\"font-mono text-xs font-semibold text-gray-700 uppercase\">\n                            {availableDMs.length} RECORDS FOUND\n                          </div>\n                        </div>\n                        <div className=\"divide-y divide-gray-200\">\n                          {availableDMs.map((dm, index) => (\n                            <div\n                              key={dm.id}\n                              onClick={() => {\n                                setSelectedDM(dm);\n                                setIsDMSelectionOpen(false);\n                              }}\n                              className={`p-4 cursor-pointer transition-colors hover:bg-blue-50 ${\n                                selectedDM?.id === dm.id\n                                  ? \"bg-blue-100 border-l-4 border-l-blue-500\"\n                                  : \"\"\n                              }`}\n                            >\n                              <div className=\"space-y-2\">\n                                <div className=\"flex items-center justify-between\">\n                                  <div className=\"font-mono text-xs text-gray-500\">\n                                    ID: {String(index + 1).padStart(3, \"0\")}\n                                  </div>\n                                  {selectedDM?.id === dm.id ? (\n                                    <CheckCircle className=\"h-4 w-4 text-blue-600\" />\n                                  ) : (\n                                    <div className=\"w-4 h-4 border border-gray-300 rounded\"></div>\n                                  )}\n                                </div>\n                                <div className=\"font-mono text-sm font-semibold text-gray-900\">\n                                  {dm.name}\n                                </div>\n                                <div className=\"grid grid-cols-2 gap-2 text-xs font-mono\">\n                                  <div>\n                                    <span className=\"text-gray-500\">\n                                      TITLE:\n                                    </span>\n                                    <div className=\"text-gray-700 truncate\">\n                                      {dm.title}\n                                    </div>\n                                  </div>\n                                  <div>\n                                    <span className=\"text-gray-500\">\n                                      SCORE:\n                                    </span>\n                                    <div className=\"text-green-600 font-semibold\">\n                                      {dm.engagementScore || 0}\n                                    </div>\n                                  </div>\n                                </div>\n                                <div className=\"grid grid-cols-2 gap-2 text-xs font-mono\">\n                                  <div>\n                                    <span className=\"text-gray-500\">\n                                      COMPANY:\n                                    </span>\n                                    <div className=\"text-gray-700 truncate\">\n                                      {dm.company}\n                                    </div>\n                                  </div>\n                                  <div>\n                                    <span className=\"text-gray-500\">\n                                      INDUSTRY:\n                                    </span>\n                                    <div className=\"text-gray-600 truncate\">\n                                      {dm.industry || \"NULL\"}\n                                    </div>\n                                  </div>\n                                </div>\n                                <div className=\"flex items-center justify-between\">\n                                  <div className=\"inline-flex items-center\">\n                                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                                    <span className=\"ml-1 font-mono text-xs text-green-600\">\n                                      ACTIVE\n                                    </span>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Desktop View - Table */}\n                      <div className=\"hidden md:block\">\n                        {/* Database Table Header */}\n                        <div className=\"bg-gray-100 border-b border-gray-300\">\n                          <div className=\"grid grid-cols-12 gap-0 text-xs font-mono font-semibold text-gray-700 uppercase tracking-wide\">\n                            <div className=\"col-span-1 p-2 lg:p-3 border-r border-gray-300 text-center\">\n                              ID\n                            </div>\n                            <div className=\"col-span-2 p-2 lg:p-3 border-r border-gray-300\">\n                              NAME\n                            </div>\n                            <div className=\"col-span-2 p-2 lg:p-3 border-r border-gray-300\">\n                              TITLE\n                            </div>\n                            <div className=\"col-span-2 p-2 lg:p-3 border-r border-gray-300\">\n                              COMPANY\n                            </div>\n                            <div className=\"col-span-2 p-2 lg:p-3 border-r border-gray-300\">\n                              INDUSTRY\n                            </div>\n                            <div className=\"col-span-1 p-2 lg:p-3 border-r border-gray-300 text-center\">\n                              SCORE\n                            </div>\n                            <div className=\"col-span-1 p-2 lg:p-3 border-r border-gray-300 text-center\">\n                              STATUS\n                            </div>\n                            <div className=\"col-span-1 p-2 lg:p-3 text-center\">\n                              ACTION\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Database Table Body */}\n                        <div className=\"divide-y divide-gray-200\">\n                          {availableDMs.map((dm, index) => (\n                            <div\n                              key={dm.id}\n                              onClick={() => {\n                                setSelectedDM(dm);\n                                setIsDMSelectionOpen(false);\n                              }}\n                              className={`grid grid-cols-12 gap-0 cursor-pointer transition-colors hover:bg-blue-50 ${\n                                selectedDM?.id === dm.id\n                                  ? \"bg-blue-100 border-l-4 border-l-blue-500\"\n                                  : \"\"\n                              }`}\n                            >\n                              <div className=\"col-span-1 p-2 lg:p-3 border-r border-gray-200 text-center\">\n                                <span className=\"font-mono text-xs text-gray-600\">\n                                  {String(index + 1).padStart(3, \"0\")}\n                                </span>\n                              </div>\n                              <div className=\"col-span-2 p-2 lg:p-3 border-r border-gray-200\">\n                                <div className=\"font-mono text-xs lg:text-sm text-gray-900 truncate\">\n                                  {dm.name}\n                                </div>\n                              </div>\n                              <div className=\"col-span-2 p-2 lg:p-3 border-r border-gray-200\">\n                                <div className=\"font-mono text-xs lg:text-sm text-gray-700 truncate\">\n                                  {dm.title}\n                                </div>\n                              </div>\n                              <div className=\"col-span-2 p-2 lg:p-3 border-r border-gray-200\">\n                                <div className=\"font-mono text-xs lg:text-sm text-gray-700 truncate\">\n                                  {dm.company}\n                                </div>\n                              </div>\n                              <div className=\"col-span-2 p-2 lg:p-3 border-r border-gray-200\">\n                                <div className=\"font-mono text-xs lg:text-sm text-gray-600 truncate\">\n                                  {dm.industry || \"NULL\"}\n                                </div>\n                              </div>\n                              <div className=\"col-span-1 p-2 lg:p-3 border-r border-gray-200 text-center\">\n                                <div className=\"font-mono text-xs lg:text-sm font-semibold text-green-600\">\n                                  {dm.engagementScore || 0}\n                                </div>\n                              </div>\n                              <div className=\"col-span-1 p-2 lg:p-3 border-r border-gray-200 text-center\">\n                                <div className=\"inline-flex items-center\">\n                                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                                  <span className=\"ml-1 font-mono text-xs text-green-600 hidden lg:inline\">\n                                    ACTIVE\n                                  </span>\n                                </div>\n                              </div>\n                              <div className=\"col-span-1 p-2 lg:p-3 text-center\">\n                                {selectedDM?.id === dm.id ? (\n                                  <CheckCircle className=\"h-3 w-3 lg:h-4 lg:w-4 text-blue-600 mx-auto\" />\n                                ) : (\n                                  <div className=\"w-3 h-3 lg:w-4 lg:h-4 border border-gray-300 rounded mx-auto cursor-pointer hover:border-blue-500\"></div>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Database Footer */}\n                      <div className=\"bg-gray-50 border-t border-gray-300 p-3\">\n                        <div className=\"flex items-center justify-between text-xs font-mono text-gray-600\">\n                          <span>Query executed successfully</span>\n                          <span>{availableDMs.length} rows returned</span>\n                        </div>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-12 border border-gray-300 rounded-lg bg-gray-50\">\n                      <div className=\"font-mono text-sm text-gray-600 mb-2\">\n                        Query result: 0 rows\n                      </div>\n                      <div className=\"font-mono text-xs text-gray-500\">\n                        No records found in decision_makers table\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </DialogContent>\n            </Dialog>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {selectedDM ? (\n            <div className=\"border border-gray-300 rounded-lg overflow-hidden bg-white\">\n              {/* Database Query Header */}\n              <div className=\"bg-gray-100 border-b border-gray-300 p-2 sm:p-3\">\n                <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0\">\n                  <div className=\"flex items-center space-x-1 sm:space-x-2 font-mono text-xs sm:text-sm\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <span className=\"text-gray-600\">SELECTED:</span>\n                    <span className=\"text-blue-600 truncate\">\n                      id = {selectedDM.id}\n                    </span>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setIsDMSelectionOpen(true)}\n                    className=\"font-mono text-xs bg-white hover:bg-gray-50 border-gray-400 w-full sm:w-auto\"\n                  >\n                    MODIFY\n                  </Button>\n                </div>\n              </div>\n\n              {/* Mobile View - Stacked Layout */}\n              <div className=\"block md:hidden p-3 space-y-3\">\n                <div className=\"space-y-2\">\n                  <div className=\"font-mono text-xs text-gray-500 uppercase\">\n                    NAME\n                  </div>\n                  <div className=\"font-mono text-sm text-gray-900\">\n                    {selectedDM.name}\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"space-y-2\">\n                    <div className=\"font-mono text-xs text-gray-500 uppercase\">\n                      TITLE\n                    </div>\n                    <div className=\"font-mono text-sm text-gray-900\">\n                      {selectedDM.title}\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"font-mono text-xs text-gray-500 uppercase\">\n                      SCORE\n                    </div>\n                    <div className=\"font-mono text-sm font-semibold text-green-600\">\n                      {selectedDM.engagementScore || 0}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"space-y-2\">\n                    <div className=\"font-mono text-xs text-gray-500 uppercase\">\n                      COMPANY\n                    </div>\n                    <div className=\"font-mono text-sm text-gray-900\">\n                      {selectedDM.company}\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"font-mono text-xs text-gray-500 uppercase\">\n                      INDUSTRY\n                    </div>\n                    <div className=\"font-mono text-sm text-gray-700\">\n                      {selectedDM.industry || \"NULL\"}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"font-mono text-xs text-gray-500 uppercase\">\n                    STATUS\n                  </div>\n                  <div className=\"inline-flex items-center\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <span className=\"ml-2 font-mono text-sm text-green-600\">\n                      ACTIVE\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Desktop View - Table Layout */}\n              <div className=\"hidden md:block\">\n                <div className=\"divide-y divide-gray-200\">\n                  <div className=\"grid grid-cols-4 gap-0\">\n                    <div className=\"p-2 lg:p-3 bg-gray-50 border-r border-gray-200 font-mono text-xs font-semibold text-gray-700 uppercase\">\n                      NAME\n                    </div>\n                    <div className=\"p-2 lg:p-3 font-mono text-xs lg:text-sm text-gray-900\">\n                      {selectedDM.name}\n                    </div>\n                    <div className=\"p-2 lg:p-3 bg-gray-50 border-r border-gray-200 font-mono text-xs font-semibold text-gray-700 uppercase\">\n                      TITLE\n                    </div>\n                    <div className=\"p-2 lg:p-3 font-mono text-xs lg:text-sm text-gray-900\">\n                      {selectedDM.title}\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-4 gap-0\">\n                    <div className=\"p-2 lg:p-3 bg-gray-50 border-r border-gray-200 font-mono text-xs font-semibold text-gray-700 uppercase\">\n                      COMPANY\n                    </div>\n                    <div className=\"p-2 lg:p-3 font-mono text-xs lg:text-sm text-gray-900\">\n                      {selectedDM.company}\n                    </div>\n                    <div className=\"p-2 lg:p-3 bg-gray-50 border-r border-gray-200 font-mono text-xs font-semibold text-gray-700 uppercase\">\n                      INDUSTRY\n                    </div>\n                    <div className=\"p-2 lg:p-3 font-mono text-xs lg:text-sm text-gray-700\">\n                      {selectedDM.industry || \"NULL\"}\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-4 gap-0\">\n                    <div className=\"p-2 lg:p-3 bg-gray-50 border-r border-gray-200 font-mono text-xs font-semibold text-gray-700 uppercase\">\n                      SCORE\n                    </div>\n                    <div className=\"p-2 lg:p-3 font-mono text-xs lg:text-sm font-semibold text-green-600\">\n                      {selectedDM.engagementScore || 0}\n                    </div>\n                    <div className=\"p-2 lg:p-3 bg-gray-50 border-r border-gray-200 font-mono text-xs font-semibold text-gray-700 uppercase\">\n                      STATUS\n                    </div>\n                    <div className=\"p-2 lg:p-3\">\n                      <div className=\"inline-flex items-center\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                        <span className=\"ml-2 font-mono text-xs lg:text-sm text-green-600\">\n                          ACTIVE\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Database Footer */}\n              <div className=\"bg-gray-50 border-t border-gray-300 p-2 sm:p-3\">\n                <div className=\"font-mono text-xs text-gray-600\">\n                  Record loaded successfully • Ready for calendar operations\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-8 border border-gray-300 rounded-lg bg-gray-50\">\n              <div className=\"font-mono text-sm text-gray-600 mb-2\">\n                No active selection\n              </div>\n              <div className=\"font-mono text-xs text-gray-500 mb-4\">\n                Please execute a SELECT query to choose a decision maker\n              </div>\n              <Button\n                onClick={() => setIsDMSelectionOpen(true)}\n                className=\"bg-blue-600 hover:bg-blue-700 font-mono text-sm\"\n              >\n                EXECUTE QUERY\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Calendar View */}\n      {selectedDM && (\n        <Card>\n          <CardHeader className=\"border-b border-gray-200 p-3 sm:p-4 lg:p-6\">\n            {/* Mobile Layout (up to md) */}\n            <div className=\"block lg:hidden\">\n              <div className=\"flex flex-col space-y-3\">\n                {/* Header row with table info and navigation */}\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-1 font-mono text-xs sm:text-sm\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                    <span className=\"text-gray-600\">TABLE:</span>\n                    <span className=\"text-blue-600 hidden sm:inline\">\n                      availability_slots\n                    </span>\n                    <span className=\"text-blue-600 sm:hidden\">slots</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => navigateDate(\"prev\")}\n                      className=\"font-mono text-xs px-2 py-1.5 h-8\"\n                    >\n                      <ChevronLeft className=\"h-3 w-3\" />\n                      <span className=\"hidden md:inline ml-1\">PREV</span>\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => navigateDate(\"next\")}\n                      className=\"font-mono text-xs px-2 py-1.5 h-8\"\n                    >\n                      <span className=\"hidden md:inline mr-1\">NEXT</span>\n                      <ChevronRight className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Date display */}\n                <div className=\"text-center\">\n                  <span className=\"font-mono text-sm md:text-base font-semibold text-gray-700\">\n                    <span className=\"md:hidden\">\n                      {viewType === \"week\" || viewType === \"agenda\"\n                        ? `WEEK: ${currentDate.toLocaleDateString(\"en-US\", { month: \"short\", day: \"numeric\" })}`\n                        : `MONTH: ${currentDate.toLocaleDateString(\"en-US\", { month: \"short\", year: \"numeric\" })}`}\n                    </span>\n                    <span className=\"hidden md:block\">\n                      {viewType === \"week\" || viewType === \"agenda\"\n                        ? `WEEK: ${currentDate.toLocaleDateString(\"en-US\", { month: \"short\", day: \"numeric\", year: \"numeric\" })}`\n                        : `MONTH: ${currentDate.toLocaleDateString(\"en-US\", { month: \"long\", year: \"numeric\" })}`}\n                    </span>\n                  </span>\n                </div>\n\n                {/* SQL Query */}\n                <div className=\"font-mono text-xs md:text-sm text-gray-500 break-all bg-gray-50 p-2 md:p-3 rounded border\">\n                  <span className=\"block sm:hidden\">\n                    SELECT * FROM availability_slots WHERE dm_id = '\n                    {selectedDM.id}';\n                  </span>\n                  <span className=\"hidden sm:block\">\n                    SELECT * FROM availability_slots WHERE dm_id = '\n                    {selectedDM.id}' AND date_range = '\n                    {viewType === \"week\" || viewType === \"agenda\"\n                      ? \"current_week\"\n                      : \"current_month\"}\n                    ';\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Desktop Layout (lg and above) */}\n            <div className=\"hidden lg:block\">\n              <div className=\"space-y-5\">\n                {/* Header with table info and navigation */}\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center font-mono text-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-4 h-4 bg-blue-500 rounded-full shadow-sm\"></div>\n                      <span className=\"text-gray-500 text-base\">\n                        CONNECTION:\n                      </span>\n                      <span className=\"text-blue-600 font-semibold\">\n                        availability_slots\n                      </span>\n                    </div>\n                  </CardTitle>\n\n                  <div className=\"flex items-center bg-gray-50 rounded-lg p-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => navigateDate(\"prev\")}\n                      className=\"font-mono text-sm px-4 py-2 hover:bg-white transition-colors\"\n                    >\n                      <ChevronLeft className=\"h-4 w-4 mr-2\" />\n                      PREVIOUS\n                    </Button>\n\n                    <div className=\"mx-4 px-6 py-2 bg-white rounded border shadow-sm\">\n                      <span className=\"font-mono text-lg font-bold text-gray-800 tracking-wide\">\n                        {viewType === \"week\" || viewType === \"agenda\"\n                          ? `${currentDate.toLocaleDateString(\"en-US\", { month: \"short\", day: \"numeric\" }).toUpperCase()} - ${new Date(currentDate.getTime() + 6 * 24 * 60 * 60 * 1000).toLocaleDateString(\"en-US\", { month: \"short\", day: \"numeric\" }).toUpperCase()}`\n                          : `${currentDate.toLocaleDateString(\"en-US\", { month: \"long\", year: \"numeric\" }).toUpperCase()}`}\n                      </span>\n                    </div>\n\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => navigateDate(\"next\")}\n                      className=\"font-mono text-sm px-4 py-2 hover:bg-white transition-colors\"\n                    >\n                      NEXT\n                      <ChevronRight className=\"h-4 w-4 ml-2\" />\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Query section */}\n                <div className=\"bg-gradient-to-r from-gray-50 to-gray-100 border border-gray-200 rounded-lg p-4\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <span className=\"font-mono text-xs text-gray-600 uppercase tracking-wide\">\n                      Active Query\n                    </span>\n                  </div>\n                  <div className=\"font-mono text-sm text-gray-700 leading-relaxed\">\n                    <span className=\"text-blue-600 font-semibold\">SELECT</span>{\" \"}\n                    * <span className=\"text-blue-600 font-semibold\">FROM</span>{\" \"}\n                    availability_slots\n                    <br />\n                    <span className=\"text-blue-600 font-semibold\">\n                      WHERE\n                    </span>{\" \"}\n                    dm_id = '\n                    <span className=\"text-green-600\">{selectedDM.id}</span>'\n                    <span className=\"text-blue-600 font-semibold\">AND</span>{\" \"}\n                    date_range = '\n                    <span className=\"text-green-600\">\n                      {viewType === \"week\" || viewType === \"agenda\"\n                        ? \"current_week\"\n                        : \"current_month\"}\n                    </span>\n                    ';\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {availabilityLoading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader2 className=\"animate-spin h-8 w-8 text-blue-600\" />\n                <span className=\"ml-2\">Loading availability...</span>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {/* Database Schema Legend */}\n                <div className=\"border border-gray-300 rounded-lg bg-white overflow-hidden\">\n                  <div className=\"bg-gray-100 border-b border-gray-300 p-2 sm:p-3\">\n                    <div className=\"font-mono text-xs sm:text-sm font-semibold text-gray-700\">\n                      SCHEMA: slot_status\n                    </div>\n                  </div>\n                  <div className=\"p-2 sm:p-3 grid grid-cols-1 sm:grid-cols-3 gap-2 sm:gap-4 text-xs font-mono\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-green-100 border border-green-300 rounded\"></div>\n                      <span className=\"text-gray-700\">\n                        STATUS = 'AVAILABLE'\n                      </span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-red-100 border border-red-300 rounded\"></div>\n                      <span className=\"text-gray-700\">STATUS = 'BOOKED'</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-gray-100 border border-gray-300 rounded\"></div>\n                      <span className=\"text-gray-700\">\n                        STATUS = 'UNAVAILABLE'\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Database Table Views */}\n                {viewType === \"agenda\" ? (\n                  <div className=\"space-y-3\">\n                    {weekDays.map((day, dayIndex) => (\n                      <div\n                        key={day.toISOString()}\n                        className=\"border border-gray-300 rounded-lg overflow-hidden bg-white\"\n                      >\n                        <div className=\"bg-gray-100 border-b border-gray-300 p-3\">\n                          <div className=\"font-mono text-sm font-semibold text-gray-700\">\n                            DATE:{\" \"}\n                            {day.toLocaleDateString(\"en-US\", {\n                              weekday: \"long\",\n                              month: \"short\",\n                              day: \"numeric\",\n                              year: \"numeric\",\n                            })}\n                          </div>\n                        </div>\n                        <div className=\"p-3\">\n                          <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2\">\n                            {timeSlots.map((time, timeIndex) => {\n                              const slot = getSlotForDateTime(day, time);\n                              return (\n                                <button\n                                  key={`${day.toISOString()}-${time}`}\n                                  onClick={() => handleSlotClick(slot)}\n                                  disabled={!slot || !slot.available}\n                                  className={`p-3 border border-gray-300 font-mono text-xs transition-all duration-200 min-h-[48px] flex items-center justify-center ${getSlotClassName(slot)} ${slot && slot.available ? \"hover:border-blue-500 cursor-pointer\" : \"cursor-not-allowed\"}`}\n                                >\n                                  <div className=\"text-center\">\n                                    <div className=\"text-xs mb-1\">{time}</div>\n                                    <div className=\"text-sm font-semibold\">\n                                      {getSlotContent(slot)}\n                                    </div>\n                                  </div>\n                                </button>\n                              );\n                            })}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"border border-gray-300 rounded-lg overflow-hidden bg-white\">\n                    <div className=\"overflow-x-auto\">\n                      <div className=\"min-w-[640px] lg:min-w-0\">\n                        {/* Database Table Header */}\n                        <div\n                          className={`grid ${isMobileView ? \"grid-cols-3\" : \"grid-cols-6\"} gap-0 bg-gray-100 border-b border-gray-300`}\n                        >\n                          <div className=\"p-2 sm:p-3 border-r border-gray-300 font-mono text-xs font-semibold text-gray-700 uppercase text-center\">\n                            TIME_SLOT\n                          </div>\n                          {(isMobileView ? weekDays.slice(0, 2) : weekDays).map(\n                            (day) => (\n                              <div\n                                key={day.toISOString()}\n                                className=\"p-2 sm:p-3 border-r border-gray-300 font-mono text-xs font-semibold text-gray-700 uppercase text-center\"\n                              >\n                                <div>\n                                  {day\n                                    .toLocaleDateString(\"en-US\", {\n                                      weekday: \"short\",\n                                    })\n                                    .toUpperCase()}\n                                </div>\n                                <div className=\"text-sm font-bold\">\n                                  {String(day.getDate()).padStart(2, \"0\")}\n                                </div>\n                              </div>\n                            ),\n                          )}\n                        </div>\n\n                        {/* Database Table Body */}\n                        <div className=\"divide-y divide-gray-200\">\n                          {timeSlots.map((time) => (\n                            <div key={time} className=\"contents\">\n                              <div className=\"p-1 sm:p-2 border-r border-gray-300 bg-gray-50 font-mono text-xs font-medium text-center flex items-center justify-center\">\n                                {time}\n                              </div>\n                              {(isMobileView\n                                ? weekDays.slice(0, 2)\n                                : weekDays\n                              ).map((day) => {\n                                const slot = getSlotForDateTime(day, time);\n                                return (\n                                  <div\n                                    key={`${day.toISOString()}-${time}`}\n                                    onClick={() => handleSlotClick(slot)}\n                                    className={`p-1 sm:p-2 border-r border-gray-300 h-10 sm:h-12 flex items-center justify-center font-mono text-xs font-medium transition-all duration-200 ${getSlotClassName(slot)} ${slot && slot.available ? \"hover:border-blue-500 cursor-pointer\" : \"cursor-not-allowed\"}`}\n                                  >\n                                    {getSlotContent(slot)}\n                                  </div>\n                                );\n                              })}\n                            </div>\n                          ))}\n                        </div>\n\n                        {/* Database Table Footer */}\n                        <div className=\"bg-gray-50 border-t border-gray-300 p-2 sm:p-3\">\n                          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between text-xs font-mono text-gray-600 space-y-1 sm:space-y-0\">\n                            <span>\n                              Query: {timeSlots.length} slots ×{\" \"}\n                              {isMobileView ? 2 : weekDays.length} days\n                            </span>\n                            <span>\n                              {timeSlots.length *\n                                (isMobileView ? 2 : weekDays.length)}{\" \"}\n                              records\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Responsive Booking Confirmation Dialog */}\n      <Dialog open={isBookingDialogOpen} onOpenChange={setIsBookingDialogOpen}>\n        <DialogContent className=\"w-[95vw] max-w-md sm:max-w-lg mx-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              <Plus className=\"text-blue-600 mr-2\" size={20} />\n              Book Meeting Slot\n            </DialogTitle>\n            <DialogDescription>\n              Confirm your meeting details with {selectedSlot?.dmName}\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedSlot && (\n            <div className=\"space-y-4 py-4\">\n              <div className=\"bg-blue-50 p-4 rounded-lg space-y-2\">\n                <div className=\"flex items-center text-sm\">\n                  <User className=\"h-4 w-4 mr-2 text-blue-600\" />\n                  <span className=\"font-medium\">{selectedSlot.dmName}</span>\n                </div>\n                <div className=\"flex items-center text-sm\">\n                  <Clock className=\"h-4 w-4 mr-2 text-blue-600\" />\n                  <span>{formatDateTime(selectedSlot.startTime)}</span>\n                </div>\n                <div className=\"flex items-center text-sm\">\n                  <Calendar className=\"h-4 w-4 mr-2 text-blue-600\" />\n                  <span>30 minutes</span>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"agenda\">Meeting Agenda</Label>\n                  <Input\n                    id=\"agenda\"\n                    placeholder=\"e.g., Product Demo, Partnership Discussion\"\n                    value={bookingForm.agenda}\n                    onChange={(e) =>\n                      setBookingForm((prev) => ({\n                        ...prev,\n                        agenda: e.target.value,\n                      }))\n                    }\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"notes\">Additional Notes (Optional)</Label>\n                  <Textarea\n                    id=\"notes\"\n                    placeholder=\"Any additional information or preparation notes\"\n                    rows={3}\n                    value={bookingForm.notes}\n                    onChange={(e) =>\n                      setBookingForm((prev) => ({\n                        ...prev,\n                        notes: e.target.value,\n                      }))\n                    }\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setIsBookingDialogOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleBookingSubmit}\n              disabled={bookMeetingMutation.isPending}\n            >\n              {bookMeetingMutation.isPending ? (\n                <>\n                  <Loader2 className=\"animate-spin h-4 w-4 mr-2\" />\n                  Booking...\n                </>\n              ) : (\n                \"Confirm Booking\"\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":50202},"client/src/components/CalendarDemo.jsx":{"content":"import { useState } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Calendar,\n  Clock,\n  Users,\n  Video,\n  CheckCircle,\n  Loader2,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Demo data for available time slots\nconst generateDemoSlots = () => {\n  const slots = [];\n  const today = new Date();\n\n  for (let day = 1; day <= 7; day++) {\n    const date = new Date(today);\n    date.setDate(today.getDate() + day);\n\n    // Skip weekends for demo\n    if (date.getDay() === 0 || date.getDay() === 6) continue;\n\n    // Generate 3-4 slots per day\n    const startTimes = [9, 11, 14, 16]; // 9 AM, 11 AM, 2 PM, 4 PM\n\n    startTimes.forEach((hour) => {\n      if (Math.random() > 0.3) {\n        // Randomly skip some slots to show realistic availability\n        const start = new Date(date);\n        start.setHours(hour, 0, 0, 0);\n        const end = new Date(start);\n        end.setMinutes(start.getMinutes() + 30);\n\n        slots.push({ start, end });\n      }\n    });\n  }\n\n  return slots;\n};\n\nexport default function CalendarDemo({ decisionMakers = [] }) {\n  const { toast } = useToast();\n  const [selectedDecisionMaker, setSelectedDecisionMaker] = useState(null);\n  const [selectedSlot, setSelectedSlot] = useState(null);\n  const [isBookingOpen, setIsBookingOpen] = useState(false);\n  const [isScheduling, setIsScheduling] = useState(false);\n  const [meetingDetails, setMeetingDetails] = useState({\n    title: \"\",\n    description: \"\",\n    duration: 30,\n  });\n\n  // Demo availability data\n  const demoAvailability = selectedDecisionMaker ? generateDemoSlots() : [];\n\n  const handleScheduleMeeting = async () => {\n    if (!selectedSlot || !selectedDecisionMaker) return;\n\n    setIsScheduling(true);\n\n    // Simulate API call delay\n    setTimeout(() => {\n      toast({\n        title: \"Demo Meeting Scheduled!\",\n        description: `Meeting with ${selectedDecisionMaker.firstName} ${selectedDecisionMaker.lastName} scheduled for ${formatTimeSlot(selectedSlot).day} at ${formatTimeSlot(selectedSlot).timeRange}`,\n      });\n\n      setIsScheduling(false);\n      setIsBookingOpen(false);\n      setSelectedSlot(null);\n      setMeetingDetails({ title: \"\", description: \"\", duration: 30 });\n    }, 2000);\n  };\n\n  const formatTimeSlot = (slot) => {\n    const start = new Date(slot.start);\n    const end = new Date(slot.end);\n    const day = start.toLocaleDateString(\"en-US\", {\n      weekday: \"short\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n    const timeRange = `${start.toLocaleTimeString(\"en-US\", {\n      hour: \"numeric\",\n      minute: \"2-digit\",\n    })} - ${end.toLocaleTimeString(\"en-US\", {\n      hour: \"numeric\",\n      minute: \"2-digit\",\n    })}`;\n\n    return { day, timeRange };\n  };\n\n  const groupSlotsByDay = (slots) => {\n    if (!slots) return {};\n\n    return slots.reduce((groups, slot) => {\n      const date = new Date(slot.start).toDateString();\n      if (!groups[date]) {\n        groups[date] = [];\n      }\n      groups[date].push(slot);\n      return groups;\n    }, {});\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Calendar Status - Demo Mode */}\n      <Card className=\"shadow-lg border-blue-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Calendar className=\"text-blue-500 mr-3\" size={20} />\n              Calendar Integration (Demo Mode)\n            </div>\n            <Badge className=\"bg-blue-100 text-blue-800\">\n              <CheckCircle className=\"mr-1 h-3 w-3\" />\n              Demo Active\n            </Badge>\n          </CardTitle>\n          <CardDescription>\n            This is a demonstration of the Google Calendar integration. In\n            production, this would connect to real Google Calendar accounts.\n          </CardDescription>\n        </CardHeader>\n      </Card>\n\n      {/* Decision Maker Selection */}\n      <Card className=\"shadow-lg\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Users className=\"text-purple-500 mr-3\" size={20} />\n            Schedule Meeting\n          </CardTitle>\n          <CardDescription>\n            Select a decision maker to view their demo availability\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"decision-maker\">Decision Maker</Label>\n              <Select\n                onValueChange={(value) => {\n                  const dm = decisionMakers.find((dm) => dm.id === value);\n                  setSelectedDecisionMaker(dm);\n                  setSelectedSlot(null);\n                }}\n              >\n                <SelectTrigger id=\"decision-maker\">\n                  <SelectValue placeholder=\"Select a decision maker\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {decisionMakers.length > 0 ? (\n                    decisionMakers.map((dm) => (\n                      <SelectItem key={dm.id} value={dm.id}>\n                        {dm.firstName} {dm.lastName} - {dm.company}\n                      </SelectItem>\n                    ))\n                  ) : (\n                    <SelectItem value=\"demo\" disabled>\n                      No decision makers available - Send some invitations first\n                    </SelectItem>\n                  )}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {selectedDecisionMaker && (\n              <div className=\"p-4 bg-blue-50 rounded-lg\">\n                <h4 className=\"font-medium text-blue-900\">\n                  {selectedDecisionMaker.firstName}{\" \"}\n                  {selectedDecisionMaker.lastName}\n                </h4>\n                <p className=\"text-sm text-blue-700\">\n                  {selectedDecisionMaker.jobTitle} at{\" \"}\n                  {selectedDecisionMaker.company}\n                </p>\n                <Badge className=\"mt-2 bg-blue-200 text-blue-800\">\n                  Demo User\n                </Badge>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Available Time Slots */}\n      {selectedDecisionMaker && (\n        <Card className=\"shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Clock className=\"text-blue-500 mr-3\" size={20} />\n              Available Times (Demo)\n            </CardTitle>\n            <CardDescription>\n              These are simulated available time slots. In production, these\n              would come from real Google Calendar data.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {demoAvailability.length > 0 ? (\n              <div className=\"space-y-4\">\n                {Object.entries(groupSlotsByDay(demoAvailability)).map(\n                  ([date, slots]) => (\n                    <div key={date} className=\"space-y-2\">\n                      <h4 className=\"font-medium text-gray-900\">\n                        {new Date(date).toLocaleDateString(\"en-US\", {\n                          weekday: \"long\",\n                          month: \"long\",\n                          day: \"numeric\",\n                        })}\n                      </h4>\n                      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                        {slots.map((slot, index) => {\n                          const { timeRange } = formatTimeSlot(slot);\n                          const isSelected = selectedSlot === slot;\n\n                          return (\n                            <Button\n                              key={index}\n                              variant={isSelected ? \"default\" : \"outline\"}\n                              size=\"sm\"\n                              onClick={() => setSelectedSlot(slot)}\n                              className={`text-xs ${isSelected ? \"bg-blue-600 hover:bg-blue-700\" : \"\"}`}\n                            >\n                              {timeRange}\n                            </Button>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  ),\n                )}\n\n                {selectedSlot && (\n                  <Dialog open={isBookingOpen} onOpenChange={setIsBookingOpen}>\n                    <DialogTrigger asChild>\n                      <Button className=\"w-full bg-green-600 hover:bg-green-700\">\n                        <Video className=\"mr-2 h-4 w-4\" />\n                        Book Selected Time (Demo)\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Schedule Demo Meeting</DialogTitle>\n                        <DialogDescription>\n                          This will simulate scheduling a meeting. In\n                          production, this would create a real calendar event.\n                        </DialogDescription>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div className=\"p-4 bg-gray-50 rounded-lg\">\n                          <p className=\"font-medium\">\n                            {selectedDecisionMaker.firstName}{\" \"}\n                            {selectedDecisionMaker.lastName}\n                          </p>\n                          <p className=\"text-sm text-gray-600\">\n                            {formatTimeSlot(selectedSlot).day} at{\" \"}\n                            {formatTimeSlot(selectedSlot).timeRange}\n                          </p>\n                          <Badge className=\"mt-1 bg-yellow-100 text-yellow-800\">\n                            Demo Mode\n                          </Badge>\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"meeting-title\">Meeting Title</Label>\n                          <Input\n                            id=\"meeting-title\"\n                            value={meetingDetails.title}\n                            onChange={(e) =>\n                              setMeetingDetails((prev) => ({\n                                ...prev,\n                                title: e.target.value,\n                              }))\n                            }\n                            placeholder=\"Sales Discussion\"\n                          />\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"meeting-description\">\n                            Description (Optional)\n                          </Label>\n                          <Input\n                            id=\"meeting-description\"\n                            value={meetingDetails.description}\n                            onChange={(e) =>\n                              setMeetingDetails((prev) => ({\n                                ...prev,\n                                description: e.target.value,\n                              }))\n                            }\n                            placeholder=\"Discuss partnership opportunities...\"\n                          />\n                        </div>\n\n                        <Button\n                          onClick={handleScheduleMeeting}\n                          disabled={isScheduling}\n                          className=\"w-full\"\n                        >\n                          {isScheduling ? (\n                            <>\n                              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                              Scheduling Demo Meeting...\n                            </>\n                          ) : (\n                            \"Schedule Demo Meeting\"\n                          )}\n                        </Button>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                )}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Clock className=\"text-gray-300 mx-auto mb-4\" size={48} />\n                <p className=\"text-gray-500\">\n                  Demo availability will appear here when you select a decision\n                  maker\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Demo Notice */}\n      <Card className=\"shadow-lg border-yellow-200 bg-yellow-50\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"bg-yellow-100 p-2 rounded-full\">\n              <Calendar className=\"text-yellow-600\" size={16} />\n            </div>\n            <div>\n              <h4 className=\"font-medium text-yellow-800 mb-1\">\n                Demo Mode Active\n              </h4>\n              <p className=\"text-sm text-yellow-700\">\n                This is a demonstration of the Google Calendar integration. In\n                production, users would connect their real Google Calendar\n                accounts to view actual availability and schedule real meetings.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13675},"client/src/components/CallActivityLog.jsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Phone,\n  PhoneOff,\n  Calendar,\n  Clock,\n  Star,\n  Flag,\n  Search,\n  Filter,\n  MoreHorizontal,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  ExternalLink,\n  PlayCircle,\n  Loader2,\n  ArrowUpDown,\n  TrendingUp,\n  Users,\n} from \"lucide-react\";\n\nexport default function CallActivityLog() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedRep, setSelectedRep] = useState(\"all_reps\");\n  const [selectedDM, setSelectedDM] = useState(\"all_dms\");\n  const [selectedOutcome, setSelectedOutcome] = useState(\"all_outcomes\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [selectedCall, setSelectedCall] = useState(null);\n  const [isFlagDialogOpen, setIsFlagDialogOpen] = useState(false);\n  const [flagReason, setFlagReason] = useState(\"\");\n  const [flagSeverity, setFlagSeverity] = useState(\"medium\");\n  const [sortField, setSortField] = useState(\"scheduledAt\");\n  const [sortDirection, setSortDirection] = useState(\"desc\");\n\n  // Build query params for filtering\n  const queryParams = useMemo(() => {\n    const params = new URLSearchParams();\n    if (selectedRep && selectedRep !== \"all_reps\")\n      params.append(\"rep\", selectedRep);\n    if (selectedDM && selectedDM !== \"all_dms\") params.append(\"dm\", selectedDM);\n    if (selectedOutcome && selectedOutcome !== \"all_outcomes\")\n      params.append(\"outcome\", selectedOutcome);\n    if (startDate) params.append(\"startDate\", startDate);\n    if (endDate) params.append(\"endDate\", endDate);\n    if (searchTerm) params.append(\"search\", searchTerm);\n    return params.toString();\n  }, [\n    selectedRep,\n    selectedDM,\n    selectedOutcome,\n    startDate,\n    endDate,\n    searchTerm,\n  ]);\n\n  // Fetch call logs with filters\n  const {\n    data: callLogs = [],\n    isLoading: loadingCalls,\n    refetch: refetchCalls,\n  } = useQuery({\n    queryKey: [\"/api/company-calls\", queryParams],\n    queryFn: () => apiRequest(`/api/company-calls?${queryParams}`),\n    retry: false,\n  });\n\n  // Fetch call analytics\n  const { data: analytics = {}, isLoading: loadingAnalytics } = useQuery({\n    queryKey: [\"/api/company-calls/analytics\"],\n    retry: false,\n  });\n\n  // Flag call mutation\n  const flagCallMutation = useMutation({\n    mutationFn: async ({ callId, reason, severity }) => {\n      return await apiRequest(`/api/company-calls/${callId}/flag`, {\n        method: \"POST\",\n        body: JSON.stringify({ reason, severity }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Call flagged for review successfully\",\n      });\n      setIsFlagDialogOpen(false);\n      setFlagReason(\"\");\n      setSelectedCall(null);\n      refetchCalls();\n      queryClient.invalidateQueries({ queryKey: [\"/api/company-calls\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to flag call\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Sort call logs\n  const sortedCalls = useMemo(() => {\n    if (!callLogs.length) return [];\n\n    return [...callLogs].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (sortField === \"scheduledAt\" || sortField === \"completedAt\") {\n        aValue = new Date(aValue);\n        bValue = new Date(bValue);\n      }\n\n      if (sortField === \"feedback.rating\") {\n        aValue = a.feedback?.rating || 0;\n        bValue = b.feedback?.rating || 0;\n      }\n\n      if (sortDirection === \"asc\") {\n        return aValue > bValue ? 1 : -1;\n      } else {\n        return aValue < bValue ? 1 : -1;\n      }\n    });\n  }, [callLogs, sortField, sortDirection]);\n\n  // Get unique values for filters\n  const uniqueReps = useMemo(() => {\n    const reps = new Set();\n    callLogs.forEach((call) => {\n      if (call.repDetails?.name) reps.add(call.repDetails.name);\n    });\n    return Array.from(reps).sort();\n  }, [callLogs]);\n\n  const uniqueDMs = useMemo(() => {\n    const dms = new Set();\n    callLogs.forEach((call) => {\n      if (call.dmDetails?.name) dms.add(call.dmDetails.name);\n    });\n    return Array.from(dms).sort();\n  }, [callLogs]);\n\n  const handleSort = (field) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      setSortField(field);\n      setSortDirection(\"desc\");\n    }\n  };\n\n  const handleFlagCall = () => {\n    if (!selectedCall || !flagReason.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide a reason for flagging\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    flagCallMutation.mutate({\n      callId: selectedCall.id,\n      reason: flagReason,\n      severity: flagSeverity,\n    });\n  };\n\n  const clearFilters = () => {\n    setSearchTerm(\"\");\n    setSelectedRep(\"all_reps\");\n    setSelectedDM(\"all_dms\");\n    setSelectedOutcome(\"all_outcomes\");\n    setStartDate(\"\");\n    setEndDate(\"\");\n  };\n\n  const getOutcomeBadge = (status, flagged) => {\n    if (flagged) {\n      return (\n        <Badge variant=\"destructive\">\n          <Flag className=\"mr-1 h-3 w-3\" />\n          Flagged\n        </Badge>\n      );\n    }\n\n    switch (status) {\n      case \"completed\":\n        return (\n          <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n            <CheckCircle className=\"mr-1 h-3 w-3\" />\n            Completed\n          </Badge>\n        );\n      case \"missed\":\n        return (\n          <Badge variant=\"destructive\">\n            <XCircle className=\"mr-1 h-3 w-3\" />\n            Missed\n          </Badge>\n        );\n      case \"cancelled\":\n        return (\n          <Badge variant=\"secondary\">\n            <XCircle className=\"mr-1 h-3 w-3\" />\n            Cancelled\n          </Badge>\n        );\n      case \"scheduled\":\n        return (\n          <Badge variant=\"outline\">\n            <Calendar className=\"mr-1 h-3 w-3\" />\n            Scheduled\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getRatingStars = (rating) => {\n    if (!rating) return <span className=\"text-gray-400\">No rating</span>;\n\n    return (\n      <div className=\"flex items-center space-x-1\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <Star\n            key={star}\n            className={`h-4 w-4 ${\n              star <= rating ? \"text-yellow-400 fill-current\" : \"text-gray-300\"\n            }`}\n          />\n        ))}\n        <span className=\"text-sm text-gray-600 ml-1\">({rating})</span>\n      </div>\n    );\n  };\n\n  const formatDateTime = (dateString) => {\n    const date = new Date(dateString);\n    return {\n      date: date.toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n      }),\n      time: date.toLocaleTimeString(\"en-US\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      }),\n    };\n  };\n\n  const formatDuration = (minutes) => {\n    if (!minutes) return \"N/A\";\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;\n  };\n\n  if (loadingCalls || loadingAnalytics) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <Loader2 className=\"animate-spin h-8 w-8 text-blue-600\" />\n        <span className=\"ml-2 text-gray-600\">Loading call activity...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Analytics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Phone className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Calls</p>\n                <p className=\"text-2xl font-bold\">\n                  {analytics.totalCalls || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <CheckCircle className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Completed</p>\n                <p className=\"text-2xl font-bold\">\n                  {analytics.completedCalls || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <XCircle className=\"h-8 w-8 text-red-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Missed</p>\n                <p className=\"text-2xl font-bold\">\n                  {analytics.missedCalls || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Star className=\"h-8 w-8 text-yellow-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Avg Rating</p>\n                <p className=\"text-2xl font-bold\">\n                  {analytics.averageRating\n                    ? analytics.averageRating.toFixed(1)\n                    : \"0.0\"}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Filter className=\"text-blue-600 mr-3\" size={20} />\n            Filters & Search\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"search\">Search</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search calls...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Sales Rep</Label>\n              <Select value={selectedRep} onValueChange={setSelectedRep}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All reps\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all_reps\">All reps</SelectItem>\n                  {uniqueReps.map((rep) => (\n                    <SelectItem key={rep} value={rep}>\n                      {rep}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Decision Maker</Label>\n              <Select value={selectedDM} onValueChange={setSelectedDM}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All DMs\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all_dms\">All DMs</SelectItem>\n                  {uniqueDMs.map((dm) => (\n                    <SelectItem key={dm} value={dm}>\n                      {dm}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Outcome</Label>\n              <Select\n                value={selectedOutcome}\n                onValueChange={setSelectedOutcome}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All outcomes\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all_outcomes\">All outcomes</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"missed\">Missed</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                  <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"startDate\">Start Date</Label>\n              <Input\n                id=\"startDate\"\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"endDate\">End Date</Label>\n              <Input\n                id=\"endDate\"\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n              />\n            </div>\n          </div>\n\n          <div className=\"flex justify-between items-center mt-4\">\n            <Button variant=\"outline\" onClick={clearFilters}>\n              Clear Filters\n            </Button>\n            <div className=\"text-sm text-gray-600\">\n              Showing {sortedCalls.length} of {analytics.totalCalls || 0} calls\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Call Activity Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Phone className=\"text-blue-600 mr-3\" size={24} />\n            Call Activity Log\n          </CardTitle>\n          <CardDescription>\n            Monitor all call activities with detailed outcomes and feedback\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {sortedCalls.length > 0 ? (\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead\n                      className=\"cursor-pointer\"\n                      onClick={() => handleSort(\"repToDM\")}\n                    >\n                      <div className=\"flex items-center\">\n                        Rep ↔ DM\n                        <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                      </div>\n                    </TableHead>\n                    <TableHead\n                      className=\"cursor-pointer\"\n                      onClick={() => handleSort(\"scheduledAt\")}\n                    >\n                      <div className=\"flex items-center\">\n                        Date/Time\n                        <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                      </div>\n                    </TableHead>\n                    <TableHead>Outcome</TableHead>\n                    <TableHead\n                      className=\"cursor-pointer\"\n                      onClick={() => handleSort(\"feedback.rating\")}\n                    >\n                      <div className=\"flex items-center\">\n                        Rating\n                        <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                      </div>\n                    </TableHead>\n                    <TableHead>Feedback Summary</TableHead>\n                    <TableHead>Duration</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedCalls.map((call) => {\n                    const dateTime = formatDateTime(call.scheduledAt);\n                    return (\n                      <TableRow key={call.id}>\n                        <TableCell className=\"font-medium\">\n                          <div className=\"space-y-1\">\n                            <div className=\"font-medium\">{call.repToDM}</div>\n                            <div className=\"text-xs text-gray-500\">\n                              <div>{call.repDetails.email}</div>\n                              <div>{call.dmDetails.email}</div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"space-y-1\">\n                            <div className=\"font-medium\">{dateTime.date}</div>\n                            <div className=\"text-sm text-gray-500\">\n                              {dateTime.time}\n                            </div>\n                            {call.completedAt && (\n                              <div className=\"text-xs text-green-600\">\n                                Completed:{\" \"}\n                                {formatDateTime(call.completedAt).time}\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {getOutcomeBadge(call.status, call.flagged)}\n                          {call.flagged && call.flagReason && (\n                            <div className=\"text-xs text-red-600 mt-1\">\n                              {call.flagReason}\n                            </div>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {getRatingStars(call.feedback?.rating)}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"max-w-xs\">\n                            <div\n                              className=\"text-sm truncate\"\n                              title={call.feedback?.summary}\n                            >\n                              {call.feedback?.summary || \"No feedback provided\"}\n                            </div>\n                            {call.feedback?.nextSteps && (\n                              <div className=\"text-xs text-blue-600 mt-1\">\n                                Next: {call.feedback.nextSteps}\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            {formatDuration(call.duration)}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                                <MoreHorizontal className=\"h-4 w-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              {!call.flagged && (\n                                <DropdownMenuItem\n                                  onClick={() => {\n                                    setSelectedCall(call);\n                                    setIsFlagDialogOpen(true);\n                                  }}\n                                >\n                                  <Flag className=\"mr-2 h-4 w-4\" />\n                                  Flag for Review\n                                </DropdownMenuItem>\n                              )}\n                              {call.meetingUrl && (\n                                <DropdownMenuItem\n                                  onClick={() =>\n                                    window.open(call.meetingUrl, \"_blank\")\n                                  }\n                                >\n                                  <ExternalLink className=\"mr-2 h-4 w-4\" />\n                                  Join Meeting\n                                </DropdownMenuItem>\n                              )}\n                              {call.recordingUrl && (\n                                <DropdownMenuItem\n                                  onClick={() =>\n                                    window.open(call.recordingUrl, \"_blank\")\n                                  }\n                                >\n                                  <PlayCircle className=\"mr-2 h-4 w-4\" />\n                                  View Recording\n                                </DropdownMenuItem>\n                              )}\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Phone className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <h3 className=\"mt-2 text-sm font-semibold text-gray-900\">\n                No call activity\n              </h3>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                Call activity will appear here when your team starts scheduling\n                meetings.\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Flag Call Dialog */}\n      <Dialog open={isFlagDialogOpen} onOpenChange={setIsFlagDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Flag Call for Review</DialogTitle>\n            <DialogDescription>\n              Report issues with this call between {selectedCall?.repToDM}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"flagReason\">Reason for Flag *</Label>\n              <Input\n                id=\"flagReason\"\n                placeholder=\"e.g., Inappropriate behavior, technical issues, quality concerns...\"\n                value={flagReason}\n                onChange={(e) => setFlagReason(e.target.value)}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"flagSeverity\">Severity</Label>\n              <Select value={flagSeverity} onValueChange={setFlagSeverity}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                  <SelectItem value=\"critical\">Critical</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsFlagDialogOpen(false);\n                setFlagReason(\"\");\n                setSelectedCall(null);\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleFlagCall}\n              disabled={flagCallMutation.isPending}\n              variant=\"destructive\"\n            >\n              {flagCallMutation.isPending ? (\n                <>\n                  <Loader2 className=\"animate-spin h-4 w-4 mr-2\" />\n                  Flagging...\n                </>\n              ) : (\n                \"Flag Call\"\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":24524},"client/src/components/CreditsOverview.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  CreditCard,\n  TrendingUp,\n  TrendingDown,\n  Users,\n  Calendar,\n  MessageSquare,\n  AlertTriangle,\n  Settings,\n  RotateCcw,\n  Loader2,\n  Star,\n  Flag,\n} from \"lucide-react\";\n\nexport default function CreditsOverview() {\n  const { toast } = useToast();\n  const [isLimitsDialogOpen, setIsLimitsDialogOpen] = useState(false);\n  const [limitsForm, setLimitsForm] = useState({\n    maxCallsPerMonth: \"\",\n    maxDMsPerMonth: \"\",\n  });\n\n  // Fetch credits summary\n  const {\n    data: creditsData,\n    isLoading: loadingCredits,\n    refetch: refetchCredits,\n  } = useQuery({\n    queryKey: [\"/api/company-credits/summary\"],\n    retry: false,\n  });\n\n  // Update credit limits mutation\n  const updateLimitsMutation = useMutation({\n    mutationFn: async (limits) => {\n      return await apiRequest(\"/api/company-credits/rep-limit\", {\n        method: \"PATCH\",\n        body: JSON.stringify(limits),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Credit limits updated successfully\",\n      });\n      setIsLimitsDialogOpen(false);\n      refetchCredits();\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/company-credits/summary\"],\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update credit limits\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Reset credits mutation\n  const resetCreditsMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"/api/company-credits/reset\", {\n        method: \"POST\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Credits reset successfully\",\n      });\n      refetchCredits();\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/company-credits/summary\"],\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reset credits\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateLimits = (e) => {\n    e.preventDefault();\n    const limits = {\n      maxCallsPerMonth: limitsForm.maxCallsPerMonth\n        ? parseInt(limitsForm.maxCallsPerMonth)\n        : null,\n      maxDMsPerMonth: limitsForm.maxDMsPerMonth\n        ? parseInt(limitsForm.maxDMsPerMonth)\n        : null,\n    };\n    updateLimitsMutation.mutate(limits);\n  };\n\n  const handleResetCredits = () => {\n    if (\n      window.confirm(\n        \"Are you sure you want to reset all credits and usage statistics? This action cannot be undone.\",\n      )\n    ) {\n      resetCreditsMutation.mutate();\n    }\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const getUsageStatus = (used, limit) => {\n    if (!limit) return \"unlimited\";\n    const percentage = (used / limit) * 100;\n    if (percentage >= 90) return \"critical\";\n    if (percentage >= 75) return \"warning\";\n    return \"normal\";\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case \"critical\":\n        return \"text-red-600 bg-red-100\";\n      case \"warning\":\n        return \"text-yellow-600 bg-yellow-100\";\n      case \"unlimited\":\n        return \"text-blue-600 bg-blue-100\";\n      default:\n        return \"text-green-600 bg-green-100\";\n    }\n  };\n\n  if (loadingCredits) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <Loader2 className=\"animate-spin h-8 w-8 text-blue-600\" />\n        <span className=\"ml-2 text-gray-600\">Loading credits data...</span>\n      </div>\n    );\n  }\n\n  const credits = creditsData || {};\n  const {\n    planType = \"enterprise\",\n    monthlyCredits = 1000,\n    usedCredits = 0,\n    remainingCredits = 1000,\n    utilizationRate = 0,\n    currentPeriodStart,\n    currentPeriodEnd,\n    perRepLimits = {},\n    totalCallsBooked = 0,\n    totalDMsUnlocked = 0,\n    activeReps = 0,\n    repUsage = [],\n  } = credits;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Credits Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <CreditCard className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">\n                  Monthly Credits\n                </p>\n                <p className=\"text-2xl font-bold\">\n                  {monthlyCredits.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <TrendingUp className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">\n                  Used Credits\n                </p>\n                <p className=\"text-2xl font-bold\">\n                  {usedCredits.toLocaleString()}\n                </p>\n                <p className=\"text-xs text-gray-500\">\n                  {utilizationRate.toFixed(1)}% utilized\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <TrendingDown className=\"h-8 w-8 text-orange-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Remaining</p>\n                <p className=\"text-2xl font-bold\">\n                  {remainingCredits.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Users className=\"h-8 w-8 text-purple-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Active Reps</p>\n                <p className=\"text-2xl font-bold\">{activeReps}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Usage Progress */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Credit Usage Overview</CardTitle>\n              <CardDescription>\n                Current billing period:{\" \"}\n                {currentPeriodStart && formatDate(currentPeriodStart)} -{\" \"}\n                {currentPeriodEnd && formatDate(currentPeriodEnd)}\n              </CardDescription>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Dialog\n                open={isLimitsDialogOpen}\n                onOpenChange={setIsLimitsDialogOpen}\n              >\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Settings className=\"h-4 w-4 mr-2\" />\n                    Set Limits\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <form onSubmit={handleUpdateLimits}>\n                    <DialogHeader>\n                      <DialogTitle>Set Per-Rep Credit Limits</DialogTitle>\n                      <DialogDescription>\n                        Set monthly limits for each sales representative. Leave\n                        empty for unlimited access.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-4 py-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"maxCalls\">Max Calls Per Month</Label>\n                        <Input\n                          id=\"maxCalls\"\n                          type=\"number\"\n                          placeholder=\"Unlimited\"\n                          value={limitsForm.maxCallsPerMonth}\n                          onChange={(e) =>\n                            setLimitsForm((prev) => ({\n                              ...prev,\n                              maxCallsPerMonth: e.target.value,\n                            }))\n                          }\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"maxDMs\">\n                          Max Decision Makers Per Month\n                        </Label>\n                        <Input\n                          id=\"maxDMs\"\n                          type=\"number\"\n                          placeholder=\"Unlimited\"\n                          value={limitsForm.maxDMsPerMonth}\n                          onChange={(e) =>\n                            setLimitsForm((prev) => ({\n                              ...prev,\n                              maxDMsPerMonth: e.target.value,\n                            }))\n                          }\n                        />\n                      </div>\n                    </div>\n                    <DialogFooter>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setIsLimitsDialogOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={updateLimitsMutation.isPending}\n                      >\n                        {updateLimitsMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"animate-spin h-4 w-4 mr-2\" />\n                            Updating...\n                          </>\n                        ) : (\n                          \"Update Limits\"\n                        )}\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </DialogContent>\n              </Dialog>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleResetCredits}\n                disabled={resetCreditsMutation.isPending}\n              >\n                {resetCreditsMutation.isPending ? (\n                  <Loader2 className=\"animate-spin h-4 w-4 mr-2\" />\n                ) : (\n                  <RotateCcw className=\"h-4 w-4 mr-2\" />\n                )}\n                Reset Period\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span>Credit Utilization</span>\n              <span>{utilizationRate.toFixed(1)}%</span>\n            </div>\n            <Progress value={utilizationRate} className=\"h-2\" />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\n              <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n                <Calendar className=\"h-6 w-6 text-blue-600 mx-auto mb-2\" />\n                <p className=\"text-2xl font-bold\">{totalCallsBooked}</p>\n                <p className=\"text-sm text-gray-600\">Total Calls Booked</p>\n              </div>\n              <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n                <Users className=\"h-6 w-6 text-green-600 mx-auto mb-2\" />\n                <p className=\"text-2xl font-bold\">{totalDMsUnlocked}</p>\n                <p className=\"text-sm text-gray-600\">\n                  Decision Makers Unlocked\n                </p>\n              </div>\n              <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n                <CreditCard className=\"h-6 w-6 text-purple-600 mx-auto mb-2\" />\n                <p className=\"text-2xl font-bold\">{usedCredits}</p>\n                <p className=\"text-sm text-gray-600\">Credits Consumed</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Per-Rep Usage Breakdown */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Users className=\"text-blue-600 mr-3\" size={24} />\n            Per-Rep Usage Breakdown\n          </CardTitle>\n          <CardDescription>\n            Detailed usage statistics for each sales representative\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {repUsage.length > 0 ? (\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Sales Rep</TableHead>\n                    <TableHead>Calls Booked</TableHead>\n                    <TableHead>DMs Unlocked</TableHead>\n                    <TableHead>Credits Used</TableHead>\n                    <TableHead>Avg Rating</TableHead>\n                    <TableHead>Feedback</TableHead>\n                    <TableHead>Flags</TableHead>\n                    <TableHead>Status</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {repUsage.map((rep) => {\n                    const callsStatus = getUsageStatus(\n                      rep.callsBooked,\n                      perRepLimits.maxCallsPerMonth,\n                    );\n                    const dmsStatus = getUsageStatus(\n                      rep.dmsUnlocked,\n                      perRepLimits.maxDMsPerMonth,\n                    );\n\n                    return (\n                      <TableRow key={rep.repId}>\n                        <TableCell className=\"font-medium\">\n                          <div>\n                            <div>{rep.repName}</div>\n                            <div className=\"text-sm text-gray-500\">\n                              {rep.repEmail}\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <span>{rep.callsBooked}</span>\n                            {perRepLimits.maxCallsPerMonth && (\n                              <Badge\n                                variant=\"outline\"\n                                className={getStatusColor(callsStatus)}\n                              >\n                                /{perRepLimits.maxCallsPerMonth}\n                              </Badge>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <span>{rep.dmsUnlocked}</span>\n                            {perRepLimits.maxDMsPerMonth && (\n                              <Badge\n                                variant=\"outline\"\n                                className={getStatusColor(dmsStatus)}\n                              >\n                                /{perRepLimits.maxDMsPerMonth}\n                              </Badge>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>{rep.creditsUsed}</TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-1\">\n                            <Star\n                              className=\"h-4 w-4 text-yellow-500\"\n                              fill=\"currentColor\"\n                            />\n                            <span>{rep.averageRating.toFixed(1)}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-1\">\n                            <MessageSquare className=\"h-4 w-4 text-blue-500\" />\n                            <span>{rep.feedbacksReceived}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-1\">\n                            <Flag className=\"h-4 w-4 text-red-500\" />\n                            <span>{rep.flagsReceived}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {callsStatus === \"critical\" ||\n                          dmsStatus === \"critical\" ? (\n                            <Badge variant=\"destructive\">Limit Reached</Badge>\n                          ) : callsStatus === \"warning\" ||\n                            dmsStatus === \"warning\" ? (\n                            <Badge\n                              variant=\"outline\"\n                              className=\"text-yellow-600 bg-yellow-100\"\n                            >\n                              Near Limit\n                            </Badge>\n                          ) : (\n                            <Badge\n                              variant=\"outline\"\n                              className=\"text-green-600 bg-green-100\"\n                            >\n                              Active\n                            </Badge>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Users className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <h3 className=\"mt-2 text-sm font-semibold text-gray-900\">\n                No usage data\n              </h3>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                Usage statistics will appear here once your sales reps start\n                booking calls.\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":18796},"client/src/components/DMTracking.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Users,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Clock,\n  MoreHorizontal,\n  Flag,\n  UserMinus,\n  UserPlus,\n  Star,\n  TrendingUp,\n  Shield,\n  Loader2,\n  ExternalLink,\n} from \"lucide-react\";\n\nexport default function DMTracking() {\n  const { toast } = useToast();\n  const [selectedDM, setSelectedDM] = useState(null);\n  const [isRemovalDialogOpen, setIsRemovalDialogOpen] = useState(false);\n  const [isReplaceDialogOpen, setIsReplaceDialogOpen] = useState(false);\n  const [isFlagDialogOpen, setIsFlagDialogOpen] = useState(false);\n  const [removalReason, setRemovalReason] = useState(\"\");\n  const [replacementDMId, setReplacementDMId] = useState(\"\");\n  const [flagForm, setFlagForm] = useState({\n    flagType: \"\",\n    description: \"\",\n    severity: \"medium\",\n  });\n\n  // Fetch company DMs\n  const {\n    data: companyDMs = [],\n    isLoading: loadingDMs,\n    refetch: refetchDMs,\n  } = useQuery({\n    queryKey: [\"/api/company-dms\"],\n    retry: false,\n  });\n\n  // Remove DM mutation\n  const removeDMMutation = useMutation({\n    mutationFn: async ({ dmId, reason }) => {\n      return await apiRequest(\"/api/company-dms/remove\", {\n        method: \"POST\",\n        body: JSON.stringify({ dmId, reason }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"DM removal request submitted successfully\",\n      });\n      setIsRemovalDialogOpen(false);\n      setRemovalReason(\"\");\n      setSelectedDM(null);\n      refetchDMs();\n      queryClient.invalidateQueries({ queryKey: [\"/api/company-dms\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to request DM removal\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Replace DM mutation\n  const replaceDMMutation = useMutation({\n    mutationFn: async ({ originalDMId, replacementDMId }) => {\n      return await apiRequest(\"/api/company-dms/replace\", {\n        method: \"POST\",\n        body: JSON.stringify({ originalDMId, replacementDMId }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"DM replaced successfully\",\n      });\n      setIsReplaceDialogOpen(false);\n      setReplacementDMId(\"\");\n      setSelectedDM(null);\n      refetchDMs();\n      queryClient.invalidateQueries({ queryKey: [\"/api/company-dms\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to replace DM\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Flag DM mutation\n  const flagDMMutation = useMutation({\n    mutationFn: async (flagData) => {\n      return await apiRequest(\"/api/company-dms/flag\", {\n        method: \"POST\",\n        body: JSON.stringify(flagData),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"DM flagged successfully\",\n      });\n      setIsFlagDialogOpen(false);\n      setFlagForm({ flagType: \"\", description: \"\", severity: \"medium\" });\n      setSelectedDM(null);\n      refetchDMs();\n      queryClient.invalidateQueries({ queryKey: [\"/api/company-dms\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to flag DM\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update verification status mutation\n  const updateVerificationMutation = useMutation({\n    mutationFn: async ({ dmId, verificationStatus }) => {\n      return await apiRequest(`/api/company-dms/${dmId}/verification`, {\n        method: \"PATCH\",\n        body: JSON.stringify({ verificationStatus }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Verification status updated successfully\",\n      });\n      refetchDMs();\n      queryClient.invalidateQueries({ queryKey: [\"/api/company-dms\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update verification status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRemovalRequest = () => {\n    if (!selectedDM || !removalReason.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide a reason for removal\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    removeDMMutation.mutate({ dmId: selectedDM.dmId, reason: removalReason });\n  };\n\n  const handleReplaceDM = () => {\n    if (!selectedDM || !replacementDMId) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a replacement DM\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    replaceDMMutation.mutate({\n      originalDMId: selectedDM.dmId,\n      replacementDMId,\n    });\n  };\n\n  const handleFlagDM = () => {\n    if (!selectedDM || !flagForm.flagType || !flagForm.description) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    flagDMMutation.mutate({\n      dmId: selectedDM.dmId,\n      ...flagForm,\n    });\n  };\n\n  const getVerificationBadge = (status) => {\n    switch (status) {\n      case \"verified\":\n        return (\n          <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n            <CheckCircle className=\"mr-1 h-3 w-3\" />\n            Verified\n          </Badge>\n        );\n      case \"rejected\":\n        return (\n          <Badge variant=\"destructive\">\n            <XCircle className=\"mr-1 h-3 w-3\" />\n            Rejected\n          </Badge>\n        );\n      case \"suspended\":\n        return (\n          <Badge variant=\"secondary\" className=\"bg-red-100 text-red-800\">\n            <AlertTriangle className=\"mr-1 h-3 w-3\" />\n            Suspended\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"outline\">\n            <Clock className=\"mr-1 h-3 w-3\" />\n            Pending\n          </Badge>\n        );\n    }\n  };\n\n  const getEngagementColor = (score) => {\n    if (score >= 80) return \"text-green-600\";\n    if (score >= 60) return \"text-yellow-600\";\n    if (score >= 40) return \"text-orange-600\";\n    return \"text-red-600\";\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  if (loadingDMs) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <Loader2 className=\"animate-spin h-8 w-8 text-blue-600\" />\n        <span className=\"ml-2 text-gray-600\">Loading decision makers...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Users className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total DMs</p>\n                <p className=\"text-2xl font-bold\">{companyDMs.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <CheckCircle className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Verified</p>\n                <p className=\"text-2xl font-bold\">\n                  {\n                    companyDMs.filter(\n                      (dm) => dm.verificationStatus === \"verified\",\n                    ).length\n                  }\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Flag className=\"h-8 w-8 text-red-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Flagged</p>\n                <p className=\"text-2xl font-bold\">\n                  {companyDMs.filter((dm) => dm.flagCount > 0).length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <TrendingUp className=\"h-8 w-8 text-purple-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">\n                  Avg Engagement\n                </p>\n                <p className=\"text-2xl font-bold\">\n                  {companyDMs.length > 0\n                    ? Math.round(\n                        companyDMs.reduce(\n                          (sum, dm) => sum + dm.engagementScore,\n                          0,\n                        ) / companyDMs.length,\n                      )\n                    : 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* DM Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Users className=\"text-blue-600 mr-3\" size={24} />\n            Decision Maker Tracking\n          </CardTitle>\n          <CardDescription>\n            Manage and monitor decision makers referred by your sales team\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {companyDMs.length > 0 ? (\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Title</TableHead>\n                    <TableHead>Verification</TableHead>\n                    <TableHead>Flags</TableHead>\n                    <TableHead>Engagement</TableHead>\n                    <TableHead>Linked Rep</TableHead>\n                    <TableHead>Referred</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {companyDMs.map((dm) => (\n                    <TableRow key={dm.id}>\n                      <TableCell className=\"font-medium\">\n                        <div className=\"flex items-center space-x-2\">\n                          <div>\n                            <div className=\"font-medium\">{dm.name}</div>\n                            <div className=\"text-sm text-gray-500\">\n                              {dm.email}\n                            </div>\n                            <div className=\"text-xs text-gray-400\">\n                              {dm.company}\n                            </div>\n                          </div>\n                          {dm.linkedinUrl && (\n                            <a\n                              href={dm.linkedinUrl}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"text-blue-600 hover:text-blue-800\"\n                            >\n                              <ExternalLink className=\"h-4 w-4\" />\n                            </a>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>{dm.title}</TableCell>\n                      <TableCell>\n                        {getVerificationBadge(dm.verificationStatus)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          {dm.flagCount > 0 ? (\n                            <Badge\n                              variant=\"destructive\"\n                              className=\"flex items-center\"\n                            >\n                              <Flag className=\"mr-1 h-3 w-3\" />\n                              {dm.flagCount}\n                            </Badge>\n                          ) : (\n                            <Badge variant=\"outline\" className=\"text-green-600\">\n                              <Shield className=\"mr-1 h-3 w-3\" />\n                              Clean\n                            </Badge>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Star\n                            className={`h-4 w-4 ${getEngagementColor(dm.engagementScore)}`}\n                            fill=\"currentColor\"\n                          />\n                          <span\n                            className={`font-medium ${getEngagementColor(dm.engagementScore)}`}\n                          >\n                            {dm.engagementScore}\n                          </span>\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          {dm.totalInteractions} interactions\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{dm.linkedRep.name}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            {dm.linkedRep.email}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm\">\n                          {formatDate(dm.referralDate)}\n                        </div>\n                        {dm.lastInteraction && (\n                          <div className=\"text-xs text-gray-500\">\n                            Last: {formatDate(dm.lastInteraction)}\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem\n                              onClick={() =>\n                                updateVerificationMutation.mutate({\n                                  dmId: dm.dmId,\n                                  verificationStatus:\n                                    dm.verificationStatus === \"verified\"\n                                      ? \"pending\"\n                                      : \"verified\",\n                                })\n                              }\n                            >\n                              {dm.verificationStatus === \"verified\" ? (\n                                <>\n                                  <XCircle className=\"mr-2 h-4 w-4\" />\n                                  Unverify\n                                </>\n                              ) : (\n                                <>\n                                  <CheckCircle className=\"mr-2 h-4 w-4\" />\n                                  Verify\n                                </>\n                              )}\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                              onClick={() => {\n                                setSelectedDM(dm);\n                                setIsFlagDialogOpen(true);\n                              }}\n                            >\n                              <Flag className=\"mr-2 h-4 w-4\" />\n                              Flag Issues\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                              onClick={() => {\n                                setSelectedDM(dm);\n                                setIsRemovalDialogOpen(true);\n                              }}\n                              className=\"text-red-600\"\n                            >\n                              <UserMinus className=\"mr-2 h-4 w-4\" />\n                              Request Removal\n                            </DropdownMenuItem>\n                            {dm.verificationStatus === \"suspended\" && (\n                              <DropdownMenuItem\n                                onClick={() => {\n                                  setSelectedDM(dm);\n                                  setIsReplaceDialogOpen(true);\n                                }}\n                              >\n                                <UserPlus className=\"mr-2 h-4 w-4\" />\n                                Replace DM\n                              </DropdownMenuItem>\n                            )}\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Users className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <h3 className=\"mt-2 text-sm font-semibold text-gray-900\">\n                No decision makers\n              </h3>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                Decision makers will appear here when your sales reps start\n                making referrals.\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Removal Dialog */}\n      <Dialog open={isRemovalDialogOpen} onOpenChange={setIsRemovalDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Request DM Removal</DialogTitle>\n            <DialogDescription>\n              Provide a reason for requesting the removal of {selectedDM?.name}.\n              This action will be reviewed.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"reason\">Reason for Removal *</Label>\n              <Input\n                id=\"reason\"\n                placeholder=\"e.g., Inappropriate behavior, fake profile, unresponsive...\"\n                value={removalReason}\n                onChange={(e) => setRemovalReason(e.target.value)}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsRemovalDialogOpen(false);\n                setRemovalReason(\"\");\n                setSelectedDM(null);\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={handleRemovalRequest}\n              disabled={removeDMMutation.isPending}\n            >\n              {removeDMMutation.isPending ? (\n                <>\n                  <Loader2 className=\"animate-spin h-4 w-4 mr-2\" />\n                  Requesting...\n                </>\n              ) : (\n                \"Request Removal\"\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Replace Dialog */}\n      <Dialog open={isReplaceDialogOpen} onOpenChange={setIsReplaceDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Replace Suspended DM</DialogTitle>\n            <DialogDescription>\n              Replace {selectedDM?.name} with a new decision maker. Enter the ID\n              of the replacement DM.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"replacementId\">Replacement DM ID *</Label>\n              <Input\n                id=\"replacementId\"\n                placeholder=\"Enter decision maker ID\"\n                value={replacementDMId}\n                onChange={(e) => setReplacementDMId(e.target.value)}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsReplaceDialogOpen(false);\n                setReplacementDMId(\"\");\n                setSelectedDM(null);\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleReplaceDM}\n              disabled={replaceDMMutation.isPending}\n            >\n              {replaceDMMutation.isPending ? (\n                <>\n                  <Loader2 className=\"animate-spin h-4 w-4 mr-2\" />\n                  Replacing...\n                </>\n              ) : (\n                \"Replace DM\"\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Flag Dialog */}\n      <Dialog open={isFlagDialogOpen} onOpenChange={setIsFlagDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Flag Decision Maker</DialogTitle>\n            <DialogDescription>\n              Report quality or behavior issues with {selectedDM?.name}.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"flagType\">Issue Type *</Label>\n              <Select\n                value={flagForm.flagType}\n                onValueChange={(value) =>\n                  setFlagForm((prev) => ({ ...prev, flagType: value }))\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select issue type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"inappropriate_behavior\">\n                    Inappropriate Behavior\n                  </SelectItem>\n                  <SelectItem value=\"unresponsive\">Unresponsive</SelectItem>\n                  <SelectItem value=\"fake_profile\">Fake Profile</SelectItem>\n                  <SelectItem value=\"low_engagement\">Low Engagement</SelectItem>\n                  <SelectItem value=\"scheduling_issues\">\n                    Scheduling Issues\n                  </SelectItem>\n                  <SelectItem value=\"quality_concern\">\n                    Quality Concern\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description *</Label>\n              <Input\n                id=\"description\"\n                placeholder=\"Describe the issue in detail...\"\n                value={flagForm.description}\n                onChange={(e) =>\n                  setFlagForm((prev) => ({\n                    ...prev,\n                    description: e.target.value,\n                  }))\n                }\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"severity\">Severity</Label>\n              <Select\n                value={flagForm.severity}\n                onValueChange={(value) =>\n                  setFlagForm((prev) => ({ ...prev, severity: value }))\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                  <SelectItem value=\"critical\">Critical</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsFlagDialogOpen(false);\n                setFlagForm({\n                  flagType: \"\",\n                  description: \"\",\n                  severity: \"medium\",\n                });\n                setSelectedDM(null);\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleFlagDM}\n              disabled={flagDMMutation.isPending}\n              variant=\"destructive\"\n            >\n              {flagDMMutation.isPending ? (\n                <>\n                  <Loader2 className=\"animate-spin h-4 w-4 mr-2\" />\n                  Flagging...\n                </>\n              ) : (\n                \"Submit Flag\"\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":25862},"client/src/components/EmailAddonModal.jsx":{"content":"import { useState } from \"react\";\nimport {\n  useStripe,\n  useElements,\n  PaymentElement,\n} from \"@stripe/react-stripe-js\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, Mail, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function EmailAddonModal({ isOpen, onClose, onSuccess }) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const { error, paymentIntent } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: window.location.origin,\n        },\n        redirect: \"if_required\",\n      });\n\n      if (error) {\n        toast({\n          title: \"Payment Failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      } else if (paymentIntent && paymentIntent.status === \"succeeded\") {\n        // Payment succeeded - now confirm with backend\n        try {\n          console.log(\n            \"Confirming payment with backend, PaymentIntent ID:\",\n            paymentIntent.id,\n          );\n          \n          // First test authentication\n          const authResponse = await fetch(\"/api/test-auth\", {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n            },\n          });\n          console.log(\"Auth test response status:\", authResponse.status);\n          if (authResponse.ok) {\n            const authData = await authResponse.json();\n            console.log(\"Auth test data:\", authData);\n          } else {\n            console.log(\"Auth test failed\");\n          }\n\n          const confirmResponse = await fetch(\"/api/confirm-email-addon-purchase\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n            },\n            body: JSON.stringify({\n              paymentIntentId: paymentIntent.id,\n            }),\n          });\n          \n          console.log(\"Confirm response status:\", confirmResponse.status);\n          console.log(\"Confirm response headers:\", confirmResponse.headers);\n          \n          if (!confirmResponse.ok) {\n            const errorText = await confirmResponse.text();\n            console.log(\"Error response text:\", errorText);\n            throw new Error(`HTTP error! status: ${confirmResponse.status}, response: ${errorText}`);\n          }\n          \n          const confirmData = await confirmResponse.json();\n          console.log(\"Confirmation response:\", confirmData);\n\n          toast({\n            title: \"Payment Successful\",\n            description:\n              \"Email addon activated! You can now see DM emails after booking calls.\",\n          });\n          onSuccess();\n          onClose();\n        } catch (confirmError) {\n          console.error(\"Confirmation error:\", confirmError);\n          toast({\n            title: \"Payment Processed\",\n            description:\n              \"Payment successful but confirmation failed. Please contact support.\",\n            variant: \"destructive\",\n          });\n        }\n      }\n    } catch (error) {\n      toast({\n        title: \"Payment Error\",\n        description: \"An unexpected error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Mail className=\"w-5 h-5 text-amber-600\" />\n            Email Access Addon - $5\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"p-4 bg-amber-50 border border-amber-200 rounded-lg\">\n            <div className=\"flex items-start gap-3\">\n              <CheckCircle className=\"w-5 h-5 text-amber-600 mt-0.5\" />\n              <div>\n                <h4 className=\"font-medium text-amber-900 mb-2\">\n                  What you'll get:\n                </h4>\n                <ul className=\"text-sm text-amber-700 space-y-1\">\n                  <li>• Access to DM email addresses after booking calls</li>\n                  <li>• Direct contact information for follow-ups</li>\n                  <li>• One-time payment, permanent access</li>\n                  <li>• Immediate activation</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <PaymentElement />\n\n            <div className=\"flex gap-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                className=\"flex-1\"\n                disabled={isProcessing}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={!stripe || isProcessing}\n                className=\"flex-1 bg-amber-600 hover:bg-amber-700\"\n              >\n                {isProcessing ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Processing...\n                  </>\n                ) : (\n                  \"Pay $5\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5908},"client/src/components/EnterpriseProtectedRoute.jsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function EnterpriseProtectedRoute({ children }) {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading) {\n      if (!isAuthenticated) {\n        toast({\n          title: \"Authentication Required\",\n          description: \"Please sign in to access this page\",\n          variant: \"destructive\",\n        });\n        setLocation(\"/login\");\n        return;\n      }\n\n      // Check for enterprise admin role\n      if (user?.role !== \"enterprise_admin\") {\n        toast({\n          title: \"Access Denied\",\n          description:\n            \"Enterprise admin privileges required to access this page\",\n          variant: \"destructive\",\n        });\n\n        // Redirect based on user role\n        if (user?.role === \"sales_rep\") {\n          setLocation(\"/sales-dashboard\");\n        } else if (user?.role === \"decision_maker\") {\n          setLocation(\"/decision-dashboard\");\n        } else if (user?.role === \"super_admin\") {\n          setLocation(\"/super-admin-dashboard\");\n        } else {\n          setLocation(\"/\");\n        }\n        return;\n      }\n\n      // Verify company domain (additional security check)\n      if (!user?.companyDomain || !user?.domainVerified) {\n        toast({\n          title: \"Domain Verification Required\",\n          description:\n            \"Your company domain must be verified for enterprise access\",\n          variant: \"destructive\",\n        });\n        setLocation(\"/\");\n        return;\n      }\n    }\n  }, [isAuthenticated, isLoading, user, setLocation, toast]);\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Verifying enterprise access...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Only render children if all checks pass\n  if (\n    isAuthenticated &&\n    user?.role === \"enterprise_admin\" &&\n    user?.domainVerified\n  ) {\n    return children;\n  }\n\n  // Return null while redirecting\n  return null;\n}\n","size_bytes":2408},"client/src/components/FlagsBadge.jsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Flag } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function FlagsBadge() {\n  const { data: flagData, isLoading } = useQuery({\n    queryKey: [\"/api/user/flags-count\"],\n    retry: false,\n  });\n\n  if (isLoading) {\n    return null; // Don't show anything while loading\n  }\n\n  const flagCount = flagData?.flags || 0;\n\n  // Determine badge color based on flag count\n  const getBadgeColor = (count) => {\n    if (count === 0) {\n      return \"bg-green-100 text-green-600 border-green-200 hover:bg-green-200\";\n    } else if (count >= 1 && count <= 2) {\n      return \"bg-yellow-100 text-yellow-600 border-yellow-200 hover:bg-yellow-200\";\n    } else {\n      return \"bg-red-100 text-red-600 border-red-200 hover:bg-red-200\";\n    }\n  };\n\n  const badgeContent = (\n    <Badge\n      className={`${getBadgeColor(flagCount)} cursor-pointer transition-colors`}\n    >\n      <Flag className=\"w-3 h-3 mr-1\" />\n      {flagCount} Flag{flagCount > 1 ? \"s\" : \"\"}\n    </Badge>\n  );\n\n  // Only wrap in Link if there are flags to show\n  if (flagCount === 0) {\n    return badgeContent;\n  }\n\n  return <Link href=\"/flags\">{badgeContent}</Link>;\n}\n","size_bytes":1244},"client/src/components/PerformanceAnalytics.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport {\n  TrendingUp,\n  Download,\n  Star,\n  Users,\n  Phone,\n  Target,\n  Award,\n  Calendar,\n  BarChart3,\n  FileText,\n  Loader2,\n  Trophy,\n  AlertTriangle,\n  CheckCircle,\n} from \"lucide-react\";\n\nexport default function PerformanceAnalytics() {\n  const { toast } = useToast();\n  const [exportType, setExportType] = useState(\"overview\");\n  const [isExporting, setIsExporting] = useState(false);\n\n  // Fetch comprehensive analytics data\n  const { data: analytics = {}, isLoading } = useQuery({\n    queryKey: [\"/api/company-analytics\"],\n    retry: false,\n  });\n\n  const {\n    overview = {},\n    topPerformers = {},\n    trends = {},\n    distributions = {},\n    repPerformance = [],\n  } = analytics;\n\n  const handleExport = async () => {\n    setIsExporting(true);\n    try {\n      const response = await fetch(\n        `/api/company-analytics/export?type=${exportType}`,\n        {\n          credentials: \"include\",\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Export failed\");\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.style.display = \"none\";\n      a.href = url;\n\n      const contentDisposition = response.headers.get(\"content-disposition\");\n      const filename = contentDisposition\n        ? contentDisposition.split(\"filename=\")[1].replace(/\"/g, \"\")\n        : `analytics_${exportType}_${new Date().toISOString().split(\"T\")[0]}.csv`;\n\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"Export Successful\",\n        description: `Analytics data exported as ${filename}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export analytics data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  // Chart color schemes\n  const colors = {\n    primary: \"#3b82f6\",\n    secondary: \"#06b6d4\",\n    success: \"#10b981\",\n    warning: \"#f59e0b\",\n    danger: \"#ef4444\",\n    muted: \"#6b7280\",\n  };\n\n  const pieColors = [\n    colors.primary,\n    colors.secondary,\n    colors.success,\n    colors.warning,\n    colors.danger,\n  ];\n\n  // Prepare chart data\n  const callOutcomeData = distributions.callOutcomes\n    ? [\n        {\n          name: \"Completed\",\n          value: distributions.callOutcomes.completed,\n          fill: colors.success,\n        },\n        {\n          name: \"Missed\",\n          value: distributions.callOutcomes.missed,\n          fill: colors.danger,\n        },\n        {\n          name: \"Cancelled\",\n          value: distributions.callOutcomes.cancelled,\n          fill: colors.warning,\n        },\n        {\n          name: \"Scheduled\",\n          value: distributions.callOutcomes.scheduled,\n          fill: colors.secondary,\n        },\n      ]\n    : [];\n\n  const dmVerificationData = distributions.dmVerification\n    ? [\n        {\n          name: \"Verified\",\n          value: distributions.dmVerification.verified,\n          fill: colors.success,\n        },\n        {\n          name: \"Pending\",\n          value: distributions.dmVerification.pending,\n          fill: colors.warning,\n        },\n        {\n          name: \"Rejected\",\n          value: distributions.dmVerification.rejected,\n          fill: colors.danger,\n        },\n        {\n          name: \"Suspended\",\n          value: distributions.dmVerification.suspended,\n          fill: colors.muted,\n        },\n      ]\n    : [];\n\n  const getPerformanceColor = (value, type) => {\n    if (type === \"feedback\") {\n      if (value >= 4.5) return \"text-green-600\";\n      if (value >= 3.5) return \"text-yellow-600\";\n      return \"text-red-600\";\n    }\n    if (type === \"engagement\") {\n      if (value >= 80) return \"text-green-600\";\n      if (value >= 60) return \"text-yellow-600\";\n      return \"text-red-600\";\n    }\n    if (type === \"noshow\") {\n      if (value <= 10) return \"text-green-600\";\n      if (value <= 25) return \"text-yellow-600\";\n      return \"text-red-600\";\n    }\n    return \"text-gray-600\";\n  };\n\n  const getPerformanceIcon = (value, type) => {\n    if (type === \"feedback\") {\n      if (value >= 4.5)\n        return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\n      if (value >= 3.5)\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />;\n      return <AlertTriangle className=\"h-5 w-5 text-red-600\" />;\n    }\n    if (type === \"engagement\") {\n      if (value >= 80) return <TrendingUp className=\"h-5 w-5 text-green-600\" />;\n      if (value >= 60)\n        return <TrendingUp className=\"h-5 w-5 text-yellow-600\" />;\n      return <TrendingUp className=\"h-5 w-5 text-red-600\" />;\n    }\n    if (type === \"noshow\") {\n      if (value <= 10)\n        return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\n      if (value <= 25)\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />;\n      return <AlertTriangle className=\"h-5 w-5 text-red-600\" />;\n    }\n    return null;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <Loader2 className=\"animate-spin h-8 w-8 text-blue-600\" />\n        <span className=\"ml-2 text-gray-600\">\n          Loading performance analytics...\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Export */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900 flex items-center\">\n            <BarChart3 className=\"text-blue-600 mr-3\" size={28} />\n            Performance Analytics\n          </h2>\n          <p className=\"text-gray-600 mt-1\">\n            Comprehensive insights into team performance and engagement metrics\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Select value={exportType} onValueChange={setExportType}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"overview\">Overview Analytics</SelectItem>\n              <SelectItem value=\"rep_performance\">Rep Performance</SelectItem>\n              <SelectItem value=\"call_logs\">Call Logs</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button\n            onClick={handleExport}\n            disabled={isExporting}\n            className=\"flex items-center\"\n          >\n            {isExporting ? (\n              <>\n                <Loader2 className=\"animate-spin h-4 w-4 mr-2\" />\n                Exporting...\n              </>\n            ) : (\n              <>\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export CSV\n              </>\n            )}\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Performance Indicators */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">\n                  Avg Rep Feedback\n                </p>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <p\n                    className={`text-2xl font-bold ${getPerformanceColor(overview.avgRepFeedbackScore, \"feedback\")}`}\n                  >\n                    {overview.avgRepFeedbackScore || 0}/5.0\n                  </p>\n                  {getPerformanceIcon(overview.avgRepFeedbackScore, \"feedback\")}\n                </div>\n              </div>\n              <Star className=\"h-8 w-8 text-yellow-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">\n                  Avg DM Engagement\n                </p>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <p\n                    className={`text-2xl font-bold ${getPerformanceColor(overview.avgDMEngagementScore, \"engagement\")}`}\n                  >\n                    {overview.avgDMEngagementScore || 0}\n                  </p>\n                  {getPerformanceIcon(\n                    overview.avgDMEngagementScore,\n                    \"engagement\",\n                  )}\n                </div>\n              </div>\n              <Target className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">\n                  No-Show Rate\n                </p>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <p\n                    className={`text-2xl font-bold ${getPerformanceColor(overview.noShowRate, \"noshow\")}`}\n                  >\n                    {overview.noShowRate || 0}%\n                  </p>\n                  {getPerformanceIcon(overview.noShowRate, \"noshow\")}\n                </div>\n              </div>\n              <Calendar className=\"h-8 w-8 text-red-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">\n                  Completion Rate\n                </p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  {overview.completionRate || 0}%\n                </p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Performance Trends */}\n      {trends.monthly && trends.monthly.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <TrendingUp className=\"text-blue-600 mr-3\" size={20} />\n              Performance Trends (6 Months)\n            </CardTitle>\n            <CardDescription>\n              Monthly call volume, completion rates, and feedback scores\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Call Volume Trend */}\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-700 mb-3\">\n                  Call Volume & Success Rate\n                </h4>\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <BarChart data={trends.monthly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar\n                      dataKey=\"totalCalls\"\n                      fill={colors.primary}\n                      name=\"Total Calls\"\n                    />\n                    <Bar\n                      dataKey=\"completedCalls\"\n                      fill={colors.success}\n                      name=\"Completed\"\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n\n              {/* Feedback Trend */}\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-700 mb-3\">\n                  Average Feedback Score\n                </h4>\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <LineChart data={trends.monthly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis domain={[0, 5]} />\n                    <Tooltip />\n                    <Legend />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"avgFeedback\"\n                      stroke={colors.warning}\n                      strokeWidth={3}\n                      name=\"Avg Feedback\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Distribution Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Call Outcomes Distribution */}\n        {callOutcomeData.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Phone className=\"text-blue-600 mr-3\" size={20} />\n                Call Outcomes Distribution\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={callOutcomeData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={100}\n                    dataKey=\"value\"\n                    label={({ name, value }) => `${name}: ${value}`}\n                  >\n                    {callOutcomeData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.fill} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* DM Verification Status */}\n        {dmVerificationData.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Users className=\"text-blue-600 mr-3\" size={20} />\n                DM Verification Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={dmVerificationData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={100}\n                    dataKey=\"value\"\n                    label={({ name, value }) => `${name}: ${value}`}\n                  >\n                    {dmVerificationData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.fill} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Top Performers */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Top by Calls */}\n        {topPerformers.byCalls && topPerformers.byCalls.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-lg\">\n                <Trophy className=\"text-yellow-500 mr-2\" size={20} />\n                Top by Calls\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {topPerformers.byCalls.slice(0, 5).map((rep, index) => (\n                  <div\n                    key={rep.id}\n                    className=\"flex items-center justify-between\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <Badge\n                        variant={index === 0 ? \"default\" : \"secondary\"}\n                        className=\"w-6 h-6 rounded-full p-0 flex items-center justify-center text-xs\"\n                      >\n                        {index + 1}\n                      </Badge>\n                      <div>\n                        <p className=\"font-medium text-sm\">{rep.name}</p>\n                        <p className=\"text-xs text-gray-500\">{rep.email}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-blue-600\">\n                        {rep.completedCalls}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">calls</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Top by Feedback */}\n        {topPerformers.byFeedback && topPerformers.byFeedback.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-lg\">\n                <Star className=\"text-yellow-500 mr-2\" size={20} />\n                Top by Feedback\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {topPerformers.byFeedback.slice(0, 5).map((rep, index) => (\n                  <div\n                    key={rep.id}\n                    className=\"flex items-center justify-between\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <Badge\n                        variant={index === 0 ? \"default\" : \"secondary\"}\n                        className=\"w-6 h-6 rounded-full p-0 flex items-center justify-center text-xs\"\n                      >\n                        {index + 1}\n                      </Badge>\n                      <div>\n                        <p className=\"font-medium text-sm\">{rep.name}</p>\n                        <p className=\"text-xs text-gray-500\">{rep.email}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-yellow-600\">\n                        {rep.avgFeedback.toFixed(1)}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">rating</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Top by DM Invites */}\n        {topPerformers.byDMInvites && topPerformers.byDMInvites.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-lg\">\n                <Users className=\"text-green-500 mr-2\" size={20} />\n                Top by DM Invites\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {topPerformers.byDMInvites.slice(0, 5).map((rep, index) => (\n                  <div\n                    key={rep.id}\n                    className=\"flex items-center justify-between\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <Badge\n                        variant={index === 0 ? \"default\" : \"secondary\"}\n                        className=\"w-6 h-6 rounded-full p-0 flex items-center justify-center text-xs\"\n                      >\n                        {index + 1}\n                      </Badge>\n                      <div>\n                        <p className=\"font-medium text-sm\">{rep.name}</p>\n                        <p className=\"text-xs text-gray-500\">{rep.email}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-green-600\">\n                        {rep.dmInvites}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">invites</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Individual Rep Performance */}\n      {repPerformance.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Award className=\"text-blue-600 mr-3\" size={20} />\n              Individual Rep Performance\n            </CardTitle>\n            <CardDescription>\n              Comprehensive performance metrics for each sales representative\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={400}>\n              <BarChart\n                data={repPerformance}\n                margin={{ top: 20, right: 30, left: 20, bottom: 60 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey=\"name\"\n                  angle={-45}\n                  textAnchor=\"end\"\n                  height={80}\n                  interval={0}\n                />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar\n                  dataKey=\"completedCalls\"\n                  fill={colors.primary}\n                  name=\"Completed Calls\"\n                />\n                <Bar\n                  dataKey=\"dmInvites\"\n                  fill={colors.secondary}\n                  name=\"DM Invites\"\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Summary Stats */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <FileText className=\"text-blue-600 mr-3\" size={20} />\n            Summary Statistics\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-blue-600\">\n                {overview.totalCalls || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Total Calls</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-green-600\">\n                {overview.totalDMs || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Decision Makers</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-purple-600\">\n                {overview.totalReps || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Sales Reps</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-yellow-600\">\n                {overview.completionRate || 0}%\n              </p>\n              <p className=\"text-sm text-gray-600\">Success Rate</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":23385},"client/src/components/ProtectedRoute.jsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function ProtectedRoute({ children, requiredRole }) {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    console.log('ProtectedRoute effect:', { isLoading, isAuthenticated, user: user?.role, requiredRole });\n    \n    // Add a small delay to prevent premature redirects during token loading\n    const checkAuth = setTimeout(() => {\n      if (!isLoading) {\n        if (!isAuthenticated) {\n          console.log('Not authenticated, redirecting to login');\n          toast({\n            title: \"Authentication Required\",\n            description: \"Please sign in to access this page\",\n            variant: \"destructive\",\n          });\n          setLocation('/login');\n          return;\n        }\n\n        if (requiredRole && user?.role !== requiredRole) {\n          console.log('Role mismatch:', { userRole: user?.role, requiredRole });\n          toast({\n            title: \"Access Denied\",\n            description: \"You don't have permission to access this page\",\n            variant: \"destructive\",\n          });\n          \n          // Redirect to appropriate dashboard based on user role\n          if (user?.role === 'sales_rep') {\n            setLocation('/sales-dashboard');\n          } else if (user?.role === 'decision_maker') {\n            setLocation('/decision-dashboard');\n          } else {\n            setLocation('/');\n          }\n          return;\n        }\n      }\n    }, 100);\n\n    return () => clearTimeout(checkAuth);\n  }, [isAuthenticated, isLoading, user, requiredRole, setLocation, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || (requiredRole && user?.role !== requiredRole)) {\n    return null;\n  }\n\n  return children;\n}","size_bytes":2254},"client/src/components/StripeCheckout.jsx":{"content":"import { useState, useEffect } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport {\n  Elements,\n  PaymentElement,\n  useStripe,\n  useElements,\n} from \"@stripe/react-stripe-js\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error(\"Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY\");\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nconst CheckoutForm = ({ onSuccess, onError, packageInfo, userInfo }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      // For demo purposes, simulate successful payment\n      // In production, you would use proper Stripe authentication\n      console.log(\n        \"Processing payment for:\",\n        packageInfo?.name,\n        \"Amount:\",\n        packageInfo?.price,\n      );\n\n      // Simulate payment processing delay\n      await new Promise((resolve) => setTimeout(resolve, 2000));\n\n      // Simulate successful payment\n      const result = {\n        error: null,\n        paymentIntent: {\n          status: \"succeeded\",\n          id: \"pi_demo_\" + Date.now(),\n        },\n      };\n\n      const { error, paymentIntent } = result;\n\n      if (error) {\n        console.error(\"Payment failed:\", error);\n        toast({\n          title: \"Payment Failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n        onError && onError(error);\n      } else if (paymentIntent && paymentIntent.status === \"succeeded\") {\n        toast({\n          title: \"Payment Successful\",\n          description: \"Your subscription has been activated!\",\n        });\n        onSuccess && onSuccess();\n      } else {\n        // Handle other payment states like requires_action\n        console.log(\"Payment status:\", paymentIntent?.status);\n        toast({\n          title: \"Payment Processing\",\n          description: \"Your payment is being processed...\",\n        });\n      }\n    } catch (err) {\n      console.error(\"Payment error:\", err);\n      toast({\n        title: \"Payment Error\",\n        description: \"An unexpected error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n      onError && onError(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div className=\"p-4 bg-gray-50 rounded-lg\">\n        <h3 className=\"font-semibold text-gray-900 mb-2\">Order Summary</h3>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-gray-600\">{packageInfo?.name}</span>\n          <span className=\"font-semibold\">\n            ${packageInfo?.price}/{packageInfo?.period}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"font-semibold text-gray-900\">Payment Information</h3>\n        <PaymentElement />\n      </div>\n\n      <Button\n        type=\"submit\"\n        disabled={!stripe || isLoading}\n        className=\"w-full bg-blue-600 hover:bg-blue-700\"\n      >\n        {isLoading ? (\n          <>\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            Processing Payment...\n          </>\n        ) : (\n          <>\n            <CheckCircle className=\"mr-2 h-4 w-4\" />\n            Complete Payment - ${packageInfo?.price}\n          </>\n        )}\n      </Button>\n    </form>\n  );\n};\n\nexport default function StripeCheckout({\n  packageInfo,\n  userInfo,\n  onSuccess,\n  onError,\n  isRecurring = false,\n}) {\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const createPaymentIntent = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // For now, use simple payment intent for all transactions\n        // We can add subscription logic later when we have Stripe price IDs configured\n        const endpoint = \"/api/create-payment-intent\";\n        const payload = {\n          amount: parseFloat(packageInfo?.price || \"0\"),\n          packageType: packageInfo?.id,\n          userEmail: userInfo?.email,\n        };\n\n        const response = await apiRequest(endpoint, {\n          method: \"POST\",\n          body: JSON.stringify(payload),\n        });\n\n        if (response.clientSecret) {\n          setClientSecret(response.clientSecret);\n        } else {\n          throw new Error(\"No client secret received\");\n        }\n      } catch (err) {\n        console.error(\"Error creating payment intent:\", err);\n        setError(err.message || \"Failed to initialize payment\");\n        toast({\n          title: \"Payment Setup Error\",\n          description: err.message || \"Failed to initialize payment\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (packageInfo?.price && userInfo?.email) {\n      createPaymentIntent();\n    }\n  }, [packageInfo, userInfo, isRecurring]);\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent className=\"p-8\">\n          <div className=\"flex items-center justify-center space-x-2\">\n            <Loader2 className=\"h-6 w-6 animate-spin text-blue-600\" />\n            <span className=\"text-gray-600\">Setting up payment...</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardContent className=\"p-8\">\n          <div className=\"text-center space-y-4\">\n            <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto\" />\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              Payment Setup Error\n            </h3>\n            <p className=\"text-gray-600\">{error}</p>\n            <Button onClick={() => window.location.reload()} variant=\"outline\">\n              Try Again\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!clientSecret) {\n    return (\n      <Card>\n        <CardContent className=\"p-8\">\n          <div className=\"text-center\">\n            <AlertCircle className=\"h-12 w-12 text-yellow-500 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              Payment Not Ready\n            </h3>\n            <p className=\"text-gray-600\">\n              Unable to initialize payment. Please try again.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const appearance = {\n    theme: \"stripe\",\n    variables: {\n      colorPrimary: \"#2563eb\",\n    },\n  };\n\n  const options = {\n    clientSecret,\n    appearance,\n    loader: \"auto\",\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-center\">Complete Your Payment</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Elements options={options} stripe={stripePromise}>\n          <CheckoutForm\n            onSuccess={onSuccess}\n            onError={onError}\n            packageInfo={packageInfo}\n            userInfo={userInfo}\n          />\n        </Elements>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7665},"client/src/components/StripePaymentForm.jsx":{"content":"import { useState } from \"react\";\nimport {\n  useStripe,\n  useElements,\n  PaymentElement,\n} from \"@stripe/react-stripe-js\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, CheckCircle } from \"lucide-react\";\n\nexport default function StripePaymentForm({\n  packageInfo,\n  userInfo,\n  onSuccess,\n  onError,\n}) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      // Confirm payment without redirect\n      const { error, paymentIntent } = await stripe.confirmPayment({\n        elements,\n        redirect: \"if_required\",\n        confirmParams: {\n          return_url: `${window.location.origin}/payment-success`,\n          receipt_email: userInfo?.email,\n        },\n      });\n\n      if (error) {\n        console.error(\"Payment failed:\", error);\n        toast({\n          title: \"Payment Failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n        onError && onError(error);\n      } else if (paymentIntent?.status === \"succeeded\") {\n        toast({\n          title: \"Payment Successful\",\n          description: \"Your payment has been processed successfully!\",\n        });\n        onSuccess && onSuccess();\n      } else {\n        console.log(\n          \"Payment requires additional action:\",\n          paymentIntent?.status,\n        );\n        toast({\n          title: \"Payment Processing\",\n          description: \"Your payment is being processed...\",\n        });\n      }\n    } catch (err) {\n      console.error(\"Payment error:\", err);\n      toast({\n        title: \"Payment Error\",\n        description: \"An unexpected error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n      onError && onError(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div className=\"p-4 bg-gray-50 rounded-lg\">\n        <h3 className=\"font-semibold text-gray-900 mb-2\">Order Summary</h3>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-gray-600\">{packageInfo?.name}</span>\n          <span className=\"font-semibold\">\n            ${packageInfo?.price}/{packageInfo?.period}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"font-semibold text-gray-900\">Payment Information</h3>\n        <PaymentElement />\n      </div>\n\n      <Button\n        type=\"submit\"\n        disabled={!stripe || isLoading}\n        className=\"w-full bg-blue-600 hover:bg-blue-700\"\n      >\n        {isLoading ? (\n          <>\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            Processing Payment...\n          </>\n        ) : (\n          <>\n            <CheckCircle className=\"mr-2 h-4 w-4\" />\n            Complete Payment - ${packageInfo?.price}\n          </>\n        )}\n      </Button>\n    </form>\n  );\n}\n","size_bytes":3144},"client/src/components/SuspensionAlert.jsx":{"content":"import { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertTriangle, Clock, Calendar } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function SuspensionAlert({ suspension }) {\n  if (!suspension || !suspension.isActive) {\n    return null;\n  }\n\n  const endDate = new Date(suspension.endDate);\n  const daysRemaining = Math.ceil(\n    (endDate - new Date()) / (1000 * 60 * 60 * 24),\n  );\n\n  return (\n    <Alert className=\"mb-6 border-red-200 bg-red-50\">\n      <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n      <AlertDescription className=\"text-red-800\">\n        <div className=\"space-y-2\">\n          <div className=\"font-semibold\">\n            Account Suspended - {suspension.type}\n          </div>\n          <div className=\"text-sm\">\n            <p>{suspension.suspensionReason}</p>\n            <div className=\"flex items-center gap-4 mt-2\">\n              <div className=\"flex items-center gap-1\">\n                <Calendar className=\"h-3 w-3\" />\n                <span>Until: {format(endDate, \"MMM dd, yyyy\")}</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Clock className=\"h-3 w-3\" />\n                <span>{daysRemaining} days remaining</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"text-xs text-red-600 mt-2\">\n            While suspended, you cannot book meetings or invite new decision\n            makers. Your suspension will be lifted when a decision maker\n            completes a call successfully without negative feedback.\n          </div>\n        </div>\n      </AlertDescription>\n    </Alert>\n  );\n}\n","size_bytes":1657},"client/src/components/TeamManagement.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Users,\n  UserPlus,\n  MoreHorizontal,\n  CheckCircle,\n  XCircle,\n  Trash2,\n  Calendar,\n  Mail,\n  Shield,\n  Loader2,\n} from \"lucide-react\";\n\nexport default function TeamManagement() {\n  const { toast } = useToast();\n  const [isInviteDialogOpen, setIsInviteDialogOpen] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState(null);\n  const [inviteForm, setInviteForm] = useState({\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    jobTitle: \"\",\n    department: \"\",\n    permissions: [],\n  });\n\n  // Fetch company users (sales reps)\n  const {\n    data: teamMembers = [],\n    isLoading: loadingMembers,\n    refetch: refetchMembers,\n  } = useQuery({\n    queryKey: [\"/api/company-users\"],\n    retry: false,\n  });\n\n  // Fetch decision makers for permissions assignment\n  const { data: decisionMakers = [], isLoading: loadingDMs } = useQuery({\n    queryKey: [\"/api/enterprise-admin/decision-makers\"],\n    retry: false,\n  });\n\n  // Invite new sales rep mutation\n  const inviteMutation = useMutation({\n    mutationFn: async (userData) => {\n      return await apiRequest(\"/api/company-users/invite\", {\n        method: \"POST\",\n        body: JSON.stringify(userData),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Sales rep invited successfully\",\n      });\n      setIsInviteDialogOpen(false);\n      setInviteForm({\n        email: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        jobTitle: \"\",\n        department: \"\",\n        permissions: [],\n      });\n      refetchMembers();\n      queryClient.invalidateQueries({ queryKey: [\"/api/company-users\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to invite sales rep\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update user status mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ userId, status }) => {\n      return await apiRequest(`/api/company-users/${userId}`, {\n        method: \"PATCH\",\n        body: JSON.stringify({ status }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"User status updated successfully\",\n      });\n      refetchMembers();\n      queryClient.invalidateQueries({ queryKey: [\"/api/company-users\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update permissions mutation\n  const updatePermissionsMutation = useMutation({\n    mutationFn: async ({ userId, permissions }) => {\n      return await apiRequest(`/api/company-users/${userId}`, {\n        method: \"PATCH\",\n        body: JSON.stringify({ permissions }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Permissions updated successfully\",\n      });\n      refetchMembers();\n      queryClient.invalidateQueries({ queryKey: [\"/api/company-users\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update permissions\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Remove user mutation\n  const removeMutation = useMutation({\n    mutationFn: async (userId) => {\n      return await apiRequest(`/api/company-users/${userId}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"User removed successfully\",\n      });\n      refetchMembers();\n      queryClient.invalidateQueries({ queryKey: [\"/api/company-users\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to remove user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInviteSubmit = (e) => {\n    e.preventDefault();\n    if (!inviteForm.email || !inviteForm.firstName || !inviteForm.lastName) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    inviteMutation.mutate(inviteForm);\n  };\n\n  const handleStatusToggle = (userId, currentStatus) => {\n    const newStatus = currentStatus === \"active\" ? \"suspended\" : \"active\";\n    updateStatusMutation.mutate({ userId, status: newStatus });\n  };\n\n  const handlePermissionsUpdate = (userId, permissions) => {\n    updatePermissionsMutation.mutate({ userId, permissions });\n  };\n\n  const handleRemoveUser = (userId) => {\n    if (\n      window.confirm(\n        \"Are you sure you want to remove this user? This action cannot be undone.\",\n      )\n    ) {\n      removeMutation.mutate(userId);\n    }\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const getStatusBadge = (status) => {\n    switch (status) {\n      case \"active\":\n        return (\n          <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n            Active\n          </Badge>\n        );\n      case \"suspended\":\n        return (\n          <Badge variant=\"secondary\" className=\"bg-red-100 text-red-800\">\n            Suspended\n          </Badge>\n        );\n      case \"invited\":\n        return (\n          <Badge variant=\"outline\" className=\"bg-yellow-100 text-yellow-800\">\n            Invited\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  if (loadingMembers) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <Loader2 className=\"animate-spin h-8 w-8 text-blue-600\" />\n        <span className=\"ml-2 text-gray-600\">Loading team members...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center\">\n                <Users className=\"text-blue-600 mr-3\" size={24} />\n                Team Management\n              </CardTitle>\n              <CardDescription>\n                Manage your internal sales representatives and their permissions\n              </CardDescription>\n            </div>\n            <Dialog\n              open={isInviteDialogOpen}\n              onOpenChange={setIsInviteDialogOpen}\n            >\n              <DialogTrigger asChild>\n                <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                  <UserPlus className=\"mr-2 h-4 w-4\" />\n                  Invite Sales Rep\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-md\">\n                <form onSubmit={handleInviteSubmit}>\n                  <DialogHeader>\n                    <DialogTitle>Invite New Sales Representative</DialogTitle>\n                    <DialogDescription>\n                      Add a new sales rep to your team. They must use a\n                      techize.com email address.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4 py-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"firstName\">First Name *</Label>\n                        <Input\n                          id=\"firstName\"\n                          value={inviteForm.firstName}\n                          onChange={(e) =>\n                            setInviteForm((prev) => ({\n                              ...prev,\n                              firstName: e.target.value,\n                            }))\n                          }\n                          placeholder=\"John\"\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"lastName\">Last Name *</Label>\n                        <Input\n                          id=\"lastName\"\n                          value={inviteForm.lastName}\n                          onChange={(e) =>\n                            setInviteForm((prev) => ({\n                              ...prev,\n                              lastName: e.target.value,\n                            }))\n                          }\n                          placeholder=\"Doe\"\n                          required\n                        />\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Email Address *</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={inviteForm.email}\n                        onChange={(e) =>\n                          setInviteForm((prev) => ({\n                            ...prev,\n                            email: e.target.value,\n                          }))\n                        }\n                        placeholder=\"john.doe@techize.com\"\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"jobTitle\">Job Title</Label>\n                      <Input\n                        id=\"jobTitle\"\n                        value={inviteForm.jobTitle}\n                        onChange={(e) =>\n                          setInviteForm((prev) => ({\n                            ...prev,\n                            jobTitle: e.target.value,\n                          }))\n                        }\n                        placeholder=\"Sales Representative\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"department\">Department</Label>\n                      <Input\n                        id=\"department\"\n                        value={inviteForm.department}\n                        onChange={(e) =>\n                          setInviteForm((prev) => ({\n                            ...prev,\n                            department: e.target.value,\n                          }))\n                        }\n                        placeholder=\"Sales\"\n                      />\n                    </div>\n                  </div>\n                  <DialogFooter>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setIsInviteDialogOpen(false)}\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={inviteMutation.isPending}\n                      className=\"bg-blue-600 hover:bg-blue-700\"\n                    >\n                      {inviteMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"animate-spin h-4 w-4 mr-2\" />\n                          Inviting...\n                        </>\n                      ) : (\n                        <>\n                          <Mail className=\"h-4 w-4 mr-2\" />\n                          Send Invite\n                        </>\n                      )}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {teamMembers.length > 0 ? (\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Job Title</TableHead>\n                    <TableHead>Join Date</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Permissions</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {teamMembers.map((member) => (\n                    <TableRow key={member.id}>\n                      <TableCell className=\"font-medium\">\n                        {member.firstName} {member.lastName}\n                      </TableCell>\n                      <TableCell>{member.email}</TableCell>\n                      <TableCell>{member.jobTitle || \"N/A\"}</TableCell>\n                      <TableCell>{formatDate(member.createdAt)}</TableCell>\n                      <TableCell>{getStatusBadge(member.status)}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Shield className=\"h-4 w-4 text-gray-400\" />\n                          <span className=\"text-sm text-gray-600\">\n                            {member.permissions?.length || 0} DMs\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem\n                              onClick={() =>\n                                handleStatusToggle(member.id, member.status)\n                              }\n                              disabled={updateStatusMutation.isPending}\n                            >\n                              {member.status === \"active\" ? (\n                                <>\n                                  <XCircle className=\"mr-2 h-4 w-4\" />\n                                  Suspend\n                                </>\n                              ) : (\n                                <>\n                                  <CheckCircle className=\"mr-2 h-4 w-4\" />\n                                  Activate\n                                </>\n                              )}\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                              onClick={() => setSelectedUserId(member.id)}\n                            >\n                              <Shield className=\"mr-2 h-4 w-4\" />\n                              Manage Permissions\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                              onClick={() => handleRemoveUser(member.id)}\n                              disabled={removeMutation.isPending}\n                              className=\"text-red-600\"\n                            >\n                              <Trash2 className=\"mr-2 h-4 w-4\" />\n                              Remove\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Users className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <h3 className=\"mt-2 text-sm font-semibold text-gray-900\">\n                No team members\n              </h3>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                Get started by inviting your first sales representative.\n              </p>\n              <div className=\"mt-6\">\n                <Button\n                  onClick={() => setIsInviteDialogOpen(true)}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <UserPlus className=\"mr-2 h-4 w-4\" />\n                  Invite Sales Rep\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Permissions Management Dialog */}\n      {selectedUserId && (\n        <Dialog\n          open={!!selectedUserId}\n          onOpenChange={() => setSelectedUserId(null)}\n        >\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Manage Permissions</DialogTitle>\n              <DialogDescription>\n                Select which decision makers this sales rep can access\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"py-4\">\n              {loadingDMs ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Loader2 className=\"animate-spin h-6 w-6\" />\n                  <span className=\"ml-2\">Loading decision makers...</span>\n                </div>\n              ) : decisionMakers.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {decisionMakers.map((dm) => {\n                    const member = teamMembers.find(\n                      (m) => m.id === selectedUserId,\n                    );\n                    const hasPermission =\n                      member?.permissions?.includes(dm.id) || false;\n\n                    return (\n                      <div key={dm.id} className=\"flex items-center space-x-3\">\n                        <Checkbox\n                          id={`dm-${dm.id}`}\n                          checked={hasPermission}\n                          onCheckedChange={(checked) => {\n                            const currentPermissions =\n                              member?.permissions || [];\n                            const newPermissions = checked\n                              ? [...currentPermissions, dm.id]\n                              : currentPermissions.filter((p) => p !== dm.id);\n                            handlePermissionsUpdate(\n                              selectedUserId,\n                              newPermissions,\n                            );\n                          }}\n                        />\n                        <Label htmlFor={`dm-${dm.id}`} className=\"flex-1\">\n                          <div>\n                            <div className=\"font-medium\">\n                              {dm.firstName} {dm.lastName}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">\n                              {dm.email}\n                            </div>\n                            <div className=\"text-xs text-gray-400\">\n                              {dm.jobTitle}\n                            </div>\n                          </div>\n                        </Label>\n                      </div>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Shield className=\"mx-auto h-8 w-8 text-gray-400\" />\n                  <p className=\"mt-2 text-sm text-gray-500\">\n                    No decision makers found in your domain\n                  </p>\n                </div>\n              )}\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setSelectedUserId(null)}>\n                Done\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}\n","size_bytes":20521},"client/src/components/navigation.jsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport {\n  Handshake,\n  LogOut,\n  User,\n  Menu,\n  X,\n  Home,\n  BarChart3,\n  Users,\n  Settings,\n  HelpCircle,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useState } from \"react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const authData = useAuth();\n  const { user, isAuthenticated, logout, isLoggingOut } = authData;\n\n  console.log(\"Navigation authData:\", {\n    isAuthenticated: authData.isAuthenticated,\n    hasUser: !!authData.user,\n    hasLogout: typeof authData.logout === \"function\",\n    isLoading: authData.isLoading,\n  });\n\n  return (\n    <nav className=\"fixed top-0 left-0 right-0 z-50 bg-white shadow-sm border-b border-gray-100\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-blue-600 to-blue-700 rounded-lg flex items-center justify-center\">\n              <Handshake className=\"text-white text-sm\" size={16} />\n            </div>\n            <span className=\"text-xl font-bold text-gray-900\">Naeborly</span>\n          </Link>\n\n          <div className=\"hidden md:flex items-center space-x-6\">\n            <Link href=\"/\">\n              <Button\n                variant={location === \"/\" ? \"default\" : \"ghost\"}\n                className={\n                  location === \"/\"\n                    ? \"bg-blue-600 hover:bg-blue-700\"\n                    : \"text-gray-600 hover:text-blue-600\"\n                }\n              >\n                Home\n              </Button>\n            </Link>\n\n            {isAuthenticated ? (\n              <>\n                {/* Show dashboard based on user role */}\n                {user?.role === \"sales_rep\" && (\n                  <Link href=\"/sales-dashboard\">\n                    <Button\n                      variant={\n                        location === \"/sales-dashboard\" ? \"default\" : \"ghost\"\n                      }\n                      className={\n                        location === \"/sales-dashboard\"\n                          ? \"bg-blue-600 hover:bg-blue-700\"\n                          : \"text-gray-600 hover:text-blue-600\"\n                      }\n                    >\n                      Sales Dashboard\n                    </Button>\n                  </Link>\n                )}\n\n                {user?.role === \"decision_maker\" && (\n                  <Link href=\"/decision-dashboard\">\n                    <Button\n                      variant={\n                        location === \"/decision-dashboard\" ? \"default\" : \"ghost\"\n                      }\n                      className={\n                        location === \"/decision-dashboard\"\n                          ? \"bg-blue-600 hover:bg-blue-700\"\n                          : \"text-gray-600 hover:text-blue-600\"\n                      }\n                    >\n                      Decision Dashboard\n                    </Button>\n                  </Link>\n                )}\n\n                {user?.role === \"admin\" && (\n                  <Link href=\"/admin\">\n                    <Button\n                      variant={location === \"/admin\" ? \"default\" : \"ghost\"}\n                      className={\n                        location === \"/admin\"\n                          ? \"bg-red-600 hover:bg-red-700\"\n                          : \"text-gray-600 hover:text-red-600\"\n                      }\n                    >\n                      Admin Panel\n                    </Button>\n                  </Link>\n                )}\n\n                {user?.role === \"enterprise_admin\" && (\n                  <Link href=\"/enterprise-admin\">\n                    <Button\n                      variant={\n                        location === \"/enterprise-admin\" ? \"default\" : \"ghost\"\n                      }\n                      className={\n                        location === \"/enterprise-admin\"\n                          ? \"bg-blue-600 hover:bg-blue-700\"\n                          : \"text-gray-600 hover:text-blue-600\"\n                      }\n                    >\n                      Enterprise Admin\n                    </Button>\n                  </Link>\n                )}\n\n                {/* User dropdown menu */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      className=\"flex items-center space-x-2\"\n                    >\n                      <User size={16} />\n                      <span className=\"text-gray-700\">\n                        {user?.firstName} {user?.lastName}\n                      </span>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-56\">\n                    <DropdownMenuLabel>My Account</DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem className=\"text-gray-600\">\n                      {user?.email}\n                    </DropdownMenuItem>\n                    <DropdownMenuItem className=\"text-gray-600 capitalize\">\n                      {user?.role?.replace(\"_\", \" \")}\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/analytics\" className=\"w-full cursor-pointer\">\n                        <BarChart3 className=\"mr-2 h-4 w-4\" />\n                        View Analytics\n                      </Link>\n                    </DropdownMenuItem>\n                    {user?.role === \"sales_rep\" && (\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/profile\" className=\"w-full cursor-pointer\">\n                          <User className=\"mr-2 h-4 w-4\" />\n                          Account Settings\n                        </Link>\n                      </DropdownMenuItem>\n                    )}\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/help\" className=\"w-full cursor-pointer\">\n                        <HelpCircle className=\"mr-2 h-4 w-4\" />\n                        Help & Support\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem\n                      onClick={(e) => {\n                        e.preventDefault();\n                        // Direct logout implementation\n                        localStorage.removeItem(\"naeborly_token\");\n                        localStorage.clear();\n                        sessionStorage.clear();\n                        window.location.replace(\"/\");\n                      }}\n                      className=\"text-red-600 cursor-pointer\"\n                    >\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      {isLoggingOut ? \"Signing out...\" : \"Sign out\"}\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>\n            ) : (\n              /* Show Sign In button when not authenticated */\n              <Link href=\"/login\">\n                <Button className=\"bg-blue-600 text-white hover:bg-blue-700\">\n                  Sign In\n                </Button>\n              </Link>\n            )}\n          </div>\n\n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Menu className=\"h-6 w-6\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent\n                side=\"right\"\n                className=\"w-[320px] sm:w-[400px] bg-gradient-to-br from-slate-50 to-blue-50\"\n              >\n                <SheetHeader className=\"pb-6\">\n                  <SheetTitle className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-gradient-to-r from-blue-600 to-blue-700 rounded-xl flex items-center justify-center shadow-lg\">\n                      <Handshake className=\"text-white\" size={20} />\n                    </div>\n                    <span className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-blue-700 bg-clip-text text-transparent\">\n                      Naeborly\n                    </span>\n                  </SheetTitle>\n                  <SheetDescription className=\"text-slate-600 text-sm\">\n                    Professional networking made simple\n                  </SheetDescription>\n                </SheetHeader>\n\n                <div className=\"flex flex-col space-y-3\">\n                  {/* Navigation Links */}\n                  <div className=\"space-y-2\">\n                    <Link href=\"/\" onClick={() => setIsMobileMenuOpen(false)}>\n                      <Button\n                        variant={location === \"/\" ? \"default\" : \"ghost\"}\n                        className={`w-full justify-start h-12 rounded-xl transition-all duration-200 ${\n                          location === \"/\"\n                            ? \"bg-gradient-to-r from-blue-600 to-blue-700 text-white shadow-lg transform scale-[1.02]\"\n                            : \"text-slate-700 hover:bg-white/60 hover:text-blue-600 hover:shadow-md\"\n                        }`}\n                      >\n                        <Home className=\"mr-3\" size={18} />\n                        <span className=\"font-medium\">Home</span>\n                      </Button>\n                    </Link>\n\n                    {isAuthenticated ? (\n                      <>\n                        {/* Dashboard Links with Icons */}\n                        {user?.role === \"sales_rep\" && (\n                          <>\n                            <Link\n                              href=\"/sales-dashboard\"\n                              onClick={() => setIsMobileMenuOpen(false)}\n                            >\n                              <Button\n                                variant={\n                                  location === \"/sales-dashboard\"\n                                    ? \"default\"\n                                    : \"ghost\"\n                                }\n                                className={`w-full justify-start h-12 rounded-xl transition-all duration-200 ${\n                                  location === \"/sales-dashboard\"\n                                    ? \"bg-gradient-to-r from-blue-600 to-blue-700 text-white shadow-lg transform scale-[1.02]\"\n                                    : \"text-slate-700 hover:bg-white/60 hover:text-blue-600 hover:shadow-md\"\n                                }`}\n                              >\n                                <BarChart3 className=\"mr-3\" size={18} />\n                                <span className=\"font-medium\">\n                                  Sales Dashboard\n                                </span>\n                              </Button>\n                            </Link>\n\n                            <Link\n                              href=\"/profile\"\n                              onClick={() => setIsMobileMenuOpen(false)}\n                            >\n                              <Button\n                                variant={\n                                  location === \"/profile\" ? \"default\" : \"ghost\"\n                                }\n                                className={`w-full justify-start h-12 rounded-xl transition-all duration-200 ${\n                                  location === \"/profile\"\n                                    ? \"bg-gradient-to-r from-blue-600 to-blue-700 text-white shadow-lg transform scale-[1.02]\"\n                                    : \"text-slate-700 hover:bg-white/60 hover:text-blue-600 hover:shadow-md\"\n                                }`}\n                              >\n                                <User className=\"mr-3\" size={18} />\n                                <span className=\"font-medium\">Profile</span>\n                              </Button>\n                            </Link>\n                          </>\n                        )}\n\n                        {user?.role === \"decision_maker\" && (\n                          <Link\n                            href=\"/decision-dashboard\"\n                            onClick={() => setIsMobileMenuOpen(false)}\n                          >\n                            <Button\n                              variant={\n                                location === \"/decision-dashboard\"\n                                  ? \"default\"\n                                  : \"ghost\"\n                              }\n                              className={`w-full justify-start h-12 rounded-xl transition-all duration-200 ${\n                                location === \"/decision-dashboard\"\n                                  ? \"bg-gradient-to-r from-blue-600 to-blue-700 text-white shadow-lg transform scale-[1.02]\"\n                                  : \"text-slate-700 hover:bg-white/60 hover:text-blue-600 hover:shadow-md\"\n                              }`}\n                            >\n                              <Users className=\"mr-3\" size={18} />\n                              <span className=\"font-medium\">\n                                Decision Dashboard\n                              </span>\n                            </Button>\n                          </Link>\n                        )}\n\n                        {user?.role === \"admin\" && (\n                          <Link\n                            href=\"/admin\"\n                            onClick={() => setIsMobileMenuOpen(false)}\n                          >\n                            <Button\n                              variant={\n                                location === \"/admin\" ? \"default\" : \"ghost\"\n                              }\n                              className={`w-full justify-start h-12 rounded-xl transition-all duration-200 ${\n                                location === \"/admin\"\n                                  ? \"bg-gradient-to-r from-red-600 to-red-700 text-white shadow-lg transform scale-[1.02]\"\n                                  : \"text-slate-700 hover:bg-red-50 hover:text-red-600 hover:shadow-md\"\n                              }`}\n                            >\n                              <Settings className=\"mr-3\" size={18} />\n                              <span className=\"font-medium\">Admin Panel</span>\n                            </Button>\n                          </Link>\n                        )}\n\n                        {user?.role === \"enterprise_admin\" && (\n                          <Link\n                            href=\"/enterprise-admin\"\n                            onClick={() => setIsMobileMenuOpen(false)}\n                          >\n                            <Button\n                              variant={\n                                location === \"/enterprise-admin\"\n                                  ? \"default\"\n                                  : \"ghost\"\n                              }\n                              className={`w-full justify-start h-12 rounded-xl transition-all duration-200 ${\n                                location === \"/enterprise-admin\"\n                                  ? \"bg-gradient-to-r from-blue-600 to-blue-700 text-white shadow-lg transform scale-[1.02]\"\n                                  : \"text-slate-700 hover:bg-white/60 hover:text-blue-600 hover:shadow-md\"\n                              }`}\n                            >\n                              <Users className=\"mr-3\" size={18} />\n                              <span className=\"font-medium\">\n                                Enterprise Admin\n                              </span>\n                            </Button>\n                          </Link>\n                        )}\n                      </>\n                    ) : (\n                      /* Attractive Sign In button for unauthenticated users */\n                      <div className=\"pt-4\">\n                        <Link\n                          href=\"/login\"\n                          onClick={() => setIsMobileMenuOpen(false)}\n                        >\n                          <Button className=\"w-full justify-start h-12 bg-gradient-to-r from-blue-600 to-blue-700 text-white hover:from-blue-700 hover:to-blue-800 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-[1.02]\">\n                            <User className=\"mr-3\" size={18} />\n                            <span className=\"font-semibold\">Sign In</span>\n                          </Button>\n                        </Link>\n\n                        <div className=\"mt-4 p-4 bg-white/50 rounded-xl backdrop-blur-sm border border-white/20\">\n                          <p className=\"text-sm text-slate-600 text-center leading-relaxed\">\n                            Connect with decision makers and grow your business\n                            network\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* User Profile Section for authenticated users */}\n                  {isAuthenticated && (\n                    <div className=\"border-t border-white/30 pt-6 mt-6\">\n                      <div className=\"bg-white/60 rounded-xl p-4 backdrop-blur-sm border border-white/20 shadow-sm\">\n                        <div className=\"flex items-center space-x-3 mb-4\">\n                          <div className=\"w-12 h-12 bg-gradient-to-r from-blue-100 to-blue-200 rounded-full flex items-center justify-center shadow-inner\">\n                            <User className=\"text-blue-600\" size={24} />\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"font-semibold text-slate-900 truncate\">\n                              {user?.firstName} {user?.lastName}\n                            </p>\n                            <p className=\"text-sm text-slate-600 truncate\">\n                              {user?.email}\n                            </p>\n                            <p className=\"text-xs text-slate-500 capitalize font-medium\">\n                              {user?.role?.replace(\"_\", \" \")}\n                            </p>\n                          </div>\n                        </div>\n\n                        <Button\n                          variant=\"ghost\"\n                          className=\"w-full justify-start h-10 text-red-600 hover:text-red-700 hover:bg-red-50 rounded-lg transition-all duration-200\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            localStorage.removeItem(\"naeborly_token\");\n                            localStorage.clear();\n                            sessionStorage.clear();\n                            setIsMobileMenuOpen(false);\n                            window.location.replace(\"/\");\n                          }}\n                        >\n                          <LogOut className=\"mr-2 h-4 w-4\" />\n                          <span className=\"font-medium\">\n                            {isLoggingOut ? \"Signing out...\" : \"Sign out\"}\n                          </span>\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":20090},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\";\n\nimport type { ToastActionElement, ToastProps } from \"@/components/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n","size_bytes":3953},"client/src/hooks/useAuth.jsx":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { removeToken, getToken, isTokenExpired } from \"@/lib/auth\";\nimport { useState, useEffect } from \"react\";\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n  const [isLoggingOut, setIsLoggingOut] = useState(false);\n  const [tokenState, setTokenState] = useState(() => {\n    const token = getToken();\n    return { token, isValid: token && !isTokenExpired(token) };\n  });\n\n  // Update token state when localStorage changes\n  useEffect(() => {\n    const checkToken = () => {\n      const token = getToken();\n      const isValid = token && !isTokenExpired(token);\n      setTokenState({ token, isValid });\n    };\n    \n    // Check immediately\n    checkToken();\n    \n    // Listen for storage changes\n    window.addEventListener('storage', checkToken);\n    \n    // Also check periodically\n    const interval = setInterval(checkToken, 1000);\n    \n    return () => {\n      window.removeEventListener('storage', checkToken);\n      clearInterval(interval);\n    };\n  }, []);\n  \n  const { data: user, isLoading, error } = useQuery({\n    queryKey: ['/api/current-user'],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    refetchOnWindowFocus: false,\n    enabled: tokenState.isValid, // Only fetch if token exists and is valid\n  });\n  \n  // Remove expired tokens immediately\n  useEffect(() => {\n    if (tokenState.token && isTokenExpired(tokenState.token)) {\n      removeToken();\n      queryClient.clear();\n      setTokenState({ token: null, isValid: false });\n    }\n  }, [tokenState.token, queryClient]);\n  \n  console.log('Auth state:', { \n    hasToken: !!token, \n    tokenValid: isTokenValid,\n    hasUser: !!user, \n    hasError: !!error,\n    errorMsg: error?.message \n  });\n\n  const logout = () => {\n    console.log('Logout function called');\n    setIsLoggingOut(true);\n    \n    try {\n      // Remove JWT token from localStorage\n      removeToken();\n      \n      // Clear all cached data\n      queryClient.clear();\n      \n      // Clear all local storage\n      localStorage.clear();\n      sessionStorage.clear();\n      \n      console.log('Logout complete, redirecting...');\n      \n      // Force immediate redirect to home page\n      window.location.replace('/');\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Force cleanup even on error\n      removeToken();\n      localStorage.clear();\n      window.location.replace('/');\n    }\n  };\n\n  const isAuthenticated = !!user && !error && tokenState.isValid;\n  const isLoading401 = error?.message?.includes('401');\n\n  const authResult = {\n    user,\n    isLoading: isLoading && !isLoading401,\n    isAuthenticated,\n    logout: logout,\n    isLoggingOut,\n  };\n  \n  console.log('useAuth returning:', { \n    hasUser: !!user, \n    isAuthenticated, \n    hasToken: !!token,\n    tokenValid: isTokenValid\n  });\n  return authResult;\n}","size_bytes":2888},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getQueryFn } from \"@/lib/queryClient\";\nimport { getToken, isTokenExpired } from \"@/lib/auth\";\n\nexport function useAuth() {\n  const token = getToken();\n  const isValidToken = token && !isTokenExpired(token);\n\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/current-user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    enabled: !!isValidToken,\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading: isValidToken ? isLoading : false,\n    isAuthenticated: !!user && !!isValidToken,\n  };\n}","size_bytes":578},"client/src/lib/auth.ts":{"content":"// Token management utilities\nconst TOKEN_KEY = \"naeborly_token\";\n\nexport function getToken(): string | null {\n  return localStorage.getItem(TOKEN_KEY);\n}\n\nexport function setToken(token: string): void {\n  localStorage.setItem(TOKEN_KEY, token);\n}\n\nexport function removeToken(): void {\n  localStorage.removeItem(TOKEN_KEY);\n  console.log(\"Token removed from localStorage\");\n}\n\nexport function isTokenExpired(token: string): boolean {\n  try {\n    const payload = JSON.parse(atob(token.split(\".\")[1]));\n    const currentTime = Date.now() / 1000;\n    return payload.exp < currentTime;\n  } catch {\n    return true;\n  }\n}\n\nexport function getTokenPayload(token: string): any {\n  try {\n    return JSON.parse(atob(token.split(\".\")[1]));\n  } catch {\n    return null;\n  }\n}\n","size_bytes":766},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { getToken, removeToken, isTokenExpired } from \"./auth\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    let errorMessage = res.statusText;\n    try {\n      const text = await res.text();\n      if (text) {\n        // Try to parse as JSON first to get structured error\n        try {\n          const errorData = JSON.parse(text);\n          errorMessage = errorData.message || errorData.error || text;\n        } catch {\n          // If not JSON, use the text as is\n          errorMessage = text;\n        }\n      }\n    } catch {\n      // If we can't read the response, use status text\n      errorMessage = res.statusText;\n    }\n    \n    const error = new Error(errorMessage);\n    (error as any).status = res.status;\n    throw error;\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options: {\n    method?: string;\n    body?: string;\n    headers?: Record<string, string>;\n  } = {}\n): Promise<any> {\n  const { method = \"GET\", body, headers = {} } = options;\n  const token = getToken();\n  \n  console.log('apiRequest - URL:', url, 'Method:', method);\n  console.log('apiRequest - Token exists:', !!token);\n  console.log('apiRequest - Token expired:', token ? isTokenExpired(token) : 'N/A');\n  \n  const requestHeaders: Record<string, string> = {\n    \"Content-Type\": \"application/json\",\n    ...headers,\n  };\n\n  // Add authorization header if token exists and is valid\n  if (token && !isTokenExpired(token)) {\n    requestHeaders.Authorization = `Bearer ${token}`;\n    console.log('apiRequest - Authorization header added');\n  } else {\n    console.log('apiRequest - No valid token available');\n  }\n  \n  const res = await fetch(url, {\n    method,\n    headers: requestHeaders,\n    body,\n  });\n\n  console.log('apiRequest - Response status:', res.status);\n\n  // Check if this is a feedback endpoint that shouldn't require authentication\n  const isFeedbackEndpoint = url.includes('/initial-feedback/');\n  \n  if ((res.status === 401 || res.status === 403) && !isFeedbackEndpoint) {\n    // For explicit API calls (mutations), throw error instead of redirecting\n    await throwIfResNotOk(res);\n  }\n\n  await throwIfResNotOk(res);\n  const text = await res.text();\n  try {\n    return JSON.parse(text);\n  } catch (error) {\n    console.error('Failed to parse JSON response:', text);\n    throw new Error(`Invalid JSON response: ${text.substring(0, 100)}...`);\n  }\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = getToken();\n    const headers: Record<string, string> = {};\n    \n    if (token && !isTokenExpired(token)) {\n      headers.Authorization = `Bearer ${token}`;\n    } else if (token && isTokenExpired(token)) {\n      // Remove expired token immediately\n      removeToken();\n    }\n    \n    const res = await fetch(queryKey[0] as string, { headers });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      removeToken();\n      return null;\n    }\n\n    if (res.status === 401 || res.status === 403) {\n      // Token is invalid or expired, remove it\n      removeToken();\n      throw new Error(`${res.status}: Unauthorized`);\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":3690},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-panel.jsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { \n  Users, \n  Phone, \n  TrendingUp, \n  DollarSign, \n  Shield, \n  Settings, \n  UserCheck, \n  UserX, \n  Eye,\n  Edit,\n  Trash2,\n  Search,\n  Filter,\n  Download,\n  BarChart3,\n  Activity,\n  AlertTriangle\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function AdminPanel() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterRole, setFilterRole] = useState('all');\n  const [selectedUser, setSelectedUser] = useState(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch admin statistics\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/admin/stats'],\n  });\n\n  // Fetch all users\n  const { data: users, isLoading: usersLoading } = useQuery({\n    queryKey: ['/api/admin/users'],\n  });\n\n  // Fetch all calls\n  const { data: calls, isLoading: callsLoading } = useQuery({\n    queryKey: ['/api/admin/calls'],\n  });\n\n  // Fetch all invitations\n  const { data: invitations, isLoading: invitationsLoading } = useQuery({\n    queryKey: ['/api/admin/invitations'],\n  });\n\n  // Update user status mutation\n  const updateUserStatus = useMutation({\n    mutationFn: async ({ userId, status }) => {\n      const response = await fetch(`/api/admin/users/${userId}/status`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status }),\n      });\n      if (!response.ok) throw new Error('Failed to update user status');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries(['/api/admin/users']);\n      queryClient.invalidateQueries(['/api/admin/stats']);\n      toast({\n        title: \"Status Updated\",\n        description: \"User status has been successfully updated.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUser = useMutation({\n    mutationFn: async (userId) => {\n      const response = await fetch(`/api/admin/users/${userId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete user');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries(['/api/admin/users']);\n      queryClient.invalidateQueries(['/api/admin/stats']);\n      toast({\n        title: \"User Deleted\",\n        description: \"User has been successfully deleted.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter users based on search and role\n  const filteredUsers = users?.filter(user => {\n    const matchesSearch = user.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.lastName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.email?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesRole = filterRole === 'all' || user.role === filterRole;\n    return matchesSearch && matchesRole;\n  }) || [];\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'inactive': return 'bg-red-100 text-red-800';\n      case 'suspended': return 'bg-orange-100 text-orange-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getRoleColor = (role) => {\n    switch (role) {\n      case 'sales_rep': return 'bg-blue-100 text-blue-800';\n      case 'decision_maker': return 'bg-blue-100 text-blue-800';\n      case 'admin': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (statsLoading || usersLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading admin panel...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-blue-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Admin Panel</h1>\n              <p className=\"text-gray-600 mt-1\">Platform Management & Analytics</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Badge className=\"bg-red-100 text-red-800\">\n                <Shield className=\"mr-1\" size={12} />\n                Administrator\n              </Badge>\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"mr-2\" size={16} />\n                Export Data\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-blue-100 text-sm font-medium\">Total Users</p>\n                  <p className=\"text-3xl font-bold\">{stats?.totalUsers || 0}</p>\n                </div>\n                <Users className=\"text-blue-200\" size={32} />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-green-100 text-sm font-medium\">Total Calls</p>\n                  <p className=\"text-3xl font-bold\">{stats?.totalCalls || 0}</p>\n                </div>\n                <Phone className=\"text-green-200\" size={32} />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-blue-100 text-sm font-medium\">Active Sales Reps</p>\n                  <p className=\"text-3xl font-bold\">{stats?.activeSalesReps || 0}</p>\n                </div>\n                <TrendingUp className=\"text-blue-200\" size={32} />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-orange-100 text-sm font-medium\">Revenue</p>\n                  <p className=\"text-3xl font-bold\">${stats?.totalRevenue || 0}</p>\n                </div>\n                <DollarSign className=\"text-orange-200\" size={32} />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"users\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"users\">User Management</TabsTrigger>\n            <TabsTrigger value=\"calls\">Call Analytics</TabsTrigger>\n            <TabsTrigger value=\"invitations\">Invitations</TabsTrigger>\n            <TabsTrigger value=\"settings\">System Settings</TabsTrigger>\n          </TabsList>\n\n          {/* Users Tab */}\n          <TabsContent value=\"users\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <CardTitle className=\"flex items-center\">\n                    <Users className=\"mr-2\" size={20} />\n                    User Management\n                  </CardTitle>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n                      <Input\n                        placeholder=\"Search users...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10 w-64\"\n                      />\n                    </div>\n                    <Select value={filterRole} onValueChange={setFilterRole}>\n                      <SelectTrigger className=\"w-40\">\n                        <SelectValue placeholder=\"Filter by role\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Roles</SelectItem>\n                        <SelectItem value=\"sales_rep\">Sales Rep</SelectItem>\n                        <SelectItem value=\"decision_maker\">Decision Maker</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>User</TableHead>\n                      <TableHead>Role</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Package</TableHead>\n                      <TableHead>Joined</TableHead>\n                      <TableHead>Last Active</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredUsers.map((user) => (\n                      <TableRow key={user._id || user.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-sm font-bold\">\n                              {user.firstName?.[0]}{user.lastName?.[0]}\n                            </div>\n                            <div>\n                              <p className=\"font-medium text-gray-900\">\n                                {user.firstName} {user.lastName}\n                              </p>\n                              <p className=\"text-sm text-gray-500\">{user.email}</p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={getRoleColor(user.role)}>\n                            {user.role?.replace('_', ' ')}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={getStatusColor(user.isActive ? 'active' : 'inactive')}>\n                            {user.isActive ? 'Active' : 'Inactive'}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm font-medium\">\n                            {user.packageType || 'N/A'}\n                          </span>\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-600\">\n                          {formatDate(user.createdAt)}\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-600\">\n                          {formatDate(user.updatedAt)}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => setSelectedUser(user)}\n                                >\n                                  <Eye className=\"mr-1\" size={12} />\n                                  View\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent className=\"max-w-2xl\">\n                                <DialogHeader>\n                                  <DialogTitle>User Details</DialogTitle>\n                                </DialogHeader>\n                                {selectedUser && (\n                                  <div className=\"space-y-4\">\n                                    <div className=\"grid grid-cols-2 gap-4\">\n                                      <div>\n                                        <h4 className=\"font-semibold text-gray-900\">Personal Information</h4>\n                                        <div className=\"mt-2 space-y-2\">\n                                          <p><span className=\"font-medium\">Name:</span> {selectedUser.firstName} {selectedUser.lastName}</p>\n                                          <p><span className=\"font-medium\">Email:</span> {selectedUser.email}</p>\n                                          <p><span className=\"font-medium\">Role:</span> {selectedUser.role?.replace('_', ' ')}</p>\n                                        </div>\n                                      </div>\n                                      <div>\n                                        <h4 className=\"font-semibold text-gray-900\">Professional Information</h4>\n                                        <div className=\"mt-2 space-y-2\">\n                                          <p><span className=\"font-medium\">Company:</span> {selectedUser.company || 'N/A'}</p>\n                                          <p><span className=\"font-medium\">Job Title:</span> {selectedUser.jobTitle || 'N/A'}</p>\n                                          <p><span className=\"font-medium\">Industry:</span> {selectedUser.industry || 'N/A'}</p>\n                                        </div>\n                                      </div>\n                                    </div>\n                                    <div className=\"flex items-center space-x-2 pt-4\">\n                                      <Button\n                                        variant={selectedUser.isActive ? \"destructive\" : \"default\"}\n                                        onClick={() => updateUserStatus.mutate({ \n                                          userId: selectedUser._id || selectedUser.id, \n                                          status: selectedUser.isActive ? 'inactive' : 'active' \n                                        })}\n                                        disabled={updateUserStatus.isPending}\n                                      >\n                                        {selectedUser.isActive ? 'Deactivate' : 'Activate'}\n                                      </Button>\n                                      <Button\n                                        variant=\"destructive\"\n                                        onClick={() => deleteUser.mutate(selectedUser._id || selectedUser.id)}\n                                        disabled={deleteUser.isPending}\n                                      >\n                                        <Trash2 className=\"mr-1\" size={12} />\n                                        Delete User\n                                      </Button>\n                                    </div>\n                                  </div>\n                                )}\n                              </DialogContent>\n                            </Dialog>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Calls Tab */}\n          <TabsContent value=\"calls\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <BarChart3 className=\"mr-2\" size={20} />\n                    Call Statistics\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600\">Total Calls</span>\n                      <span className=\"font-bold\">{stats?.totalCalls || 0}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600\">Completed Calls</span>\n                      <span className=\"font-bold text-green-600\">{stats?.completedCalls || 0}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600\">Scheduled Calls</span>\n                      <span className=\"font-bold text-blue-600\">{stats?.scheduledCalls || 0}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600\">Average Rating</span>\n                      <span className=\"font-bold text-yellow-600\">{stats?.avgRating || 0}/5</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Activity className=\"mr-2\" size={20} />\n                    Recent Activity\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {calls?.slice(0, 5).map((call) => (\n                      <div key={call._id || call.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div>\n                          <p className=\"font-medium text-sm\">{call.salesRepName} → {call.decisionMakerName}</p>\n                          <p className=\"text-xs text-gray-500\">{formatDate(call.scheduledAt)}</p>\n                        </div>\n                        <Badge className={call.status === 'completed' ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'}>\n                          {call.status}\n                        </Badge>\n                      </div>\n                    )) || (\n                      <p className=\"text-gray-500 text-center py-4\">No recent calls</p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Invitations Tab */}\n          <TabsContent value=\"invitations\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Users className=\"mr-2\" size={20} />\n                  Invitation Management\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Sales Rep</TableHead>\n                      <TableHead>Decision Maker</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Created</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {invitations?.map((invitation) => (\n                      <TableRow key={invitation._id || invitation.id}>\n                        <TableCell className=\"font-medium\">\n                          {invitation.salesRepName || 'Unknown'}\n                        </TableCell>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-medium\">{invitation.decisionMakerName}</p>\n                            <p className=\"text-sm text-gray-500\">{invitation.decisionMakerEmail}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={\n                            invitation.status === 'accepted' ? 'bg-green-100 text-green-800' :\n                            invitation.status === 'declined' ? 'bg-red-100 text-red-800' :\n                            'bg-yellow-100 text-yellow-800'\n                          }>\n                            {invitation.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-600\">\n                          {formatDate(invitation.createdAt)}\n                        </TableCell>\n                        <TableCell>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Eye className=\"mr-1\" size={12} />\n                            View Details\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    )) || (\n                      <TableRow>\n                        <TableCell colSpan={5} className=\"text-center py-4 text-gray-500\">\n                          No invitations found\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Settings Tab */}\n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Settings className=\"mr-2\" size={20} />\n                    System Configuration\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Shield className=\"mr-2\" size={16} />\n                    Security Settings\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Users className=\"mr-2\" size={16} />\n                    User Permissions\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <DollarSign className=\"mr-2\" size={16} />\n                    Package Management\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Activity className=\"mr-2\" size={16} />\n                    System Monitoring\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <AlertTriangle className=\"mr-2\" size={20} />\n                    System Alerts\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                      <div className=\"flex items-center\">\n                        <AlertTriangle className=\"text-yellow-600 mr-2\" size={16} />\n                        <span className=\"text-sm font-medium text-yellow-800\">\n                          System maintenance scheduled for this weekend\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                      <div className=\"flex items-center\">\n                        <Activity className=\"text-blue-600 mr-2\" size={16} />\n                        <span className=\"text-sm font-medium text-blue-800\">\n                          Database backup completed successfully\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":25811},"client/src/pages/analytics.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  TrendingUp,\n  TrendingDown,\n  Users,\n  Phone,\n  Calendar,\n  Award,\n  Target,\n  Clock,\n  ArrowLeft,\n  BarChart3,\n  PieChart,\n  Activity,\n  Star,\n  CheckCircle,\n  AlertCircle,\n} from \"lucide-react\";\n\nexport default function Analytics() {\n  const [timeRange, setTimeRange] = useState(\"30d\");\n\n  // Fetch analytics data\n  const { data: metrics } = useQuery({\n    queryKey: [\"/api/sales-rep/metrics\"],\n  });\n\n  const { data: calls } = useQuery({\n    queryKey: [\"/api/sales-rep/calls\"],\n  });\n\n  const { data: credits } = useQuery({\n    queryKey: [\"/api/sales-rep/credits\"],\n  });\n\n  const { data: invitations } = useQuery({\n    queryKey: [\"/api/sales-rep/invitations\"],\n  });\n\n  // Calculate analytics\n  const totalCalls = calls?.length || 0;\n  const completedCalls =\n    calls?.filter((call) => call.status === \"completed\").length || 0;\n  const upcomingCalls =\n    calls?.filter((call) => call.status === \"scheduled\").length || 0;\n  const cancelledCalls =\n    calls?.filter((call) => call.status === \"cancelled\").length || 0;\n\n  const totalInvitations = invitations?.length || 0;\n  const acceptedInvitations =\n    invitations?.filter((inv) => inv.status === \"accepted\").length || 0;\n  const pendingInvitations =\n    invitations?.filter((inv) => inv.status === \"pending\").length || 0;\n\n  const completionRate =\n    totalCalls > 0 ? Math.round((completedCalls / totalCalls) * 100) : 0;\n  const acceptanceRate =\n    totalInvitations > 0\n      ? Math.round((acceptedInvitations / totalInvitations) * 100)\n      : 0;\n\n  const totalCredits =\n    credits?.credits?.reduce((sum, credit) => sum + (credit.amount || 0), 0) ||\n    0;\n\n  // Calculate trends (mock data for demo)\n  const callTrend = +12;\n  const creditTrend = +25;\n  const invitationTrend = +8;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50 pt-16\">\n      <div className=\"p-4 sm:p-6 lg:p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => window.history.back()}\n                  className=\"flex items-center\"\n                >\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Dashboard\n                </Button>\n                <div>\n                  <h1 className=\"text-3xl font-bold text-gray-900\">\n                    Sales Analytics\n                  </h1>\n                  <p className=\"text-gray-600\">\n                    Performance insights and metrics\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <select\n                  value={timeRange}\n                  onChange={(e) => setTimeRange(e.target.value)}\n                  className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm\"\n                >\n                  <option value=\"7d\">Last 7 days</option>\n                  <option value=\"30d\">Last 30 days</option>\n                  <option value=\"90d\">Last 90 days</option>\n                  <option value=\"1y\">Last year</option>\n                </select>\n              </div>\n            </div>\n          </div>\n\n          {/* Key Performance Indicators */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"bg-gradient-to-br from-blue-500 to-blue-600 text-white\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-blue-100 text-sm font-medium\">\n                      Total Calls\n                    </p>\n                    <p className=\"text-3xl font-bold\">{totalCalls}</p>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendingUp className=\"w-4 h-4 mr-1\" />\n                      <span className=\"text-sm\">\n                        {callTrend > 0 ? \"+\" : \"\"}\n                        {callTrend}% from last period\n                      </span>\n                    </div>\n                  </div>\n                  <Phone className=\"w-8 h-8 text-blue-200\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-green-500 to-green-600 text-white\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-green-100 text-sm font-medium\">\n                      Completion Rate\n                    </p>\n                    <p className=\"text-3xl font-bold\">{completionRate}%</p>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendingUp className=\"w-4 h-4 mr-1\" />\n                      <span className=\"text-sm\">+5% from last period</span>\n                    </div>\n                  </div>\n                  <CheckCircle className=\"w-8 h-8 text-green-200\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-purple-500 to-purple-600 text-white\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-purple-100 text-sm font-medium\">\n                      Credits Earned\n                    </p>\n                    <p className=\"text-3xl font-bold\">{totalCredits}</p>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendingUp className=\"w-4 h-4 mr-1\" />\n                      <span className=\"text-sm\">\n                        {creditTrend > 0 ? \"+\" : \"\"}\n                        {creditTrend}% from last period\n                      </span>\n                    </div>\n                  </div>\n                  <Award className=\"w-8 h-8 text-purple-200\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-orange-500 to-orange-600 text-white\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-orange-100 text-sm font-medium\">\n                      Acceptance Rate\n                    </p>\n                    <p className=\"text-3xl font-bold\">{acceptanceRate}%</p>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendingUp className=\"w-4 h-4 mr-1\" />\n                      <span className=\"text-sm\">\n                        {invitationTrend > 0 ? \"+\" : \"\"}\n                        {invitationTrend}% from last period\n                      </span>\n                    </div>\n                  </div>\n                  <Users className=\"w-8 h-8 text-orange-200\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Call Performance */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              {/* Call Status Breakdown */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <BarChart3 className=\"w-5 h-5 mr-2 text-blue-600\" />\n                    Call Performance\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 bg-green-50 rounded-lg\">\n                      <div className=\"flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-600 mr-3\" />\n                        <div>\n                          <p className=\"font-medium text-green-900\">\n                            Completed Calls\n                          </p>\n                          <p className=\"text-sm text-green-600\">\n                            {completedCalls} calls completed successfully\n                          </p>\n                        </div>\n                      </div>\n                      <Badge className=\"bg-green-100 text-green-800\">\n                        {completedCalls}\n                      </Badge>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-4 bg-blue-50 rounded-lg\">\n                      <div className=\"flex items-center\">\n                        <Calendar className=\"w-5 h-5 text-blue-600 mr-3\" />\n                        <div>\n                          <p className=\"font-medium text-blue-900\">\n                            Upcoming Calls\n                          </p>\n                          <p className=\"text-sm text-blue-600\">\n                            {upcomingCalls} calls scheduled\n                          </p>\n                        </div>\n                      </div>\n                      <Badge className=\"bg-blue-100 text-blue-800\">\n                        {upcomingCalls}\n                      </Badge>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-4 bg-red-50 rounded-lg\">\n                      <div className=\"flex items-center\">\n                        <AlertCircle className=\"w-5 h-5 text-red-600 mr-3\" />\n                        <div>\n                          <p className=\"font-medium text-red-900\">\n                            Cancelled Calls\n                          </p>\n                          <p className=\"text-sm text-red-600\">\n                            {cancelledCalls} calls cancelled\n                          </p>\n                        </div>\n                      </div>\n                      <Badge className=\"bg-red-100 text-red-800\">\n                        {cancelledCalls}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Recent Call History */}\n              <Card className=\"shadow-lg border border-gray-200 bg-white\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Clock className=\"text-green-500 mr-3\" size={24} />\n                    Recent Calls\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {calls && calls.length > 0 ? (\n                    calls\n                      .filter((call) => call.status === \"completed\")\n                      .slice(0, 5)\n                      .map((call) => (\n                        <div\n                          key={call._id || call.id}\n                          className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between p-4 bg-green-50 rounded-lg border border-green-200 mb-4\"\n                        >\n                          <div className=\"flex items-center space-x-4 mb-4 sm:mb-0\">\n                            <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                              <Users className=\"text-green-600\" size={24} />\n                            </div>\n                            <div>\n                              <h3 className=\"font-bold text-gray-900\">\n                                {call.decisionMakerName || \"Decision Maker\"}\n                              </h3>\n                              <p className=\"text-green-600 font-medium\">\n                                {call.company || \"Company\"}\n                              </p>\n                              <p className=\"text-sm text-gray-600\">\n                                {call.industry || \"Industry\"}\n                              </p>\n                              <p className=\"text-sm text-green-600 font-medium italic\">\n                                \"{call.salesRepFeedback || \"Call completed\"}\"\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"text-left sm:text-right\">\n                            <p className=\"font-medium text-gray-900\">\n                              {call.completedAt\n                                ? new Date(\n                                    call.completedAt,\n                                  ).toLocaleDateString()\n                                : call.scheduledAt\n                                  ? new Date(\n                                      call.scheduledAt,\n                                    ).toLocaleDateString()\n                                  : \"Recently\"}\n                            </p>\n                            <div className=\"flex items-center mt-1\">\n                              <div className=\"flex\">\n                                {Array.from({ length: 5 }, (_, i) => (\n                                  <Star\n                                    key={i}\n                                    className={`${i < (call.salesRepRating || 0) ? \"text-yellow-400 fill-current\" : \"text-gray-300\"}`}\n                                    size={16}\n                                  />\n                                ))}\n                              </div>\n                              {call.salesRepRating && (\n                                <span className=\"ml-2 text-sm text-gray-600\">\n                                  {call.salesRepRating}/5\n                                </span>\n                              )}\n                            </div>\n                            <div className=\"flex flex-col gap-2 mt-2\">\n                              <Badge className=\"bg-green-100 text-green-800\">\n                                Completed\n                              </Badge>\n                              {!call.salesRepRating && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"text-xs bg-yellow-50 hover:bg-yellow-100 text-yellow-700 border-yellow-300\"\n                                  onClick={() => {\n                                    // Navigate to evaluation with specific call ID\n                                    window.location.href = `/evaluation/sales-rep?callId=${call._id}`;\n                                  }}\n                                >\n                                  <Star className=\"mr-1\" size={12} />\n                                  Rate Meeting\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Clock className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                      <p className=\"text-gray-500\">No completed calls yet</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Sidebar Analytics */}\n            <div className=\"space-y-6\">\n              {/* Invitation Performance */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Target className=\"w-5 h-5 mr-2 text-orange-600\" />\n                    Invitations\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-gray-900 mb-1\">\n                        {acceptanceRate}%\n                      </div>\n                      <p className=\"text-sm text-gray-600\">Acceptance Rate</p>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600\">\n                          Total Sent\n                        </span>\n                        <Badge className=\"bg-gray-100 text-gray-800\">\n                          {totalInvitations}\n                        </Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600\">Accepted</span>\n                        <Badge className=\"bg-green-100 text-green-800\">\n                          {acceptedInvitations}\n                        </Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600\">Pending</span>\n                        <Badge className=\"bg-yellow-100 text-yellow-800\">\n                          {pendingInvitations}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Credit System */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Award className=\"w-5 h-5 mr-2 text-purple-600\" />\n                    Credits Overview\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-purple-600 mb-1\">\n                        {totalCredits}\n                      </div>\n                      <p className=\"text-sm text-gray-600\">\n                        Total Credits Earned\n                      </p>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      {credits?.credits?.slice(0, 3).map((credit, index) => (\n                        <div\n                          key={credit._id || index}\n                          className=\"flex justify-between items-center p-2 bg-purple-50 rounded\"\n                        >\n                          <span className=\"text-sm font-medium text-purple-900\">\n                            {credit.reason || \"Credit Earned\"}\n                          </span>\n                          <Badge className=\"bg-purple-100 text-purple-800\">\n                            +{credit.amount}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Performance Score */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Star className=\"w-5 h-5 mr-2 text-yellow-600\" />\n                    Performance Score\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <div className=\"text-4xl font-bold text-yellow-600 mb-2\">\n                      {Math.round((completionRate + acceptanceRate) / 2)}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mb-4\">Overall Score</p>\n\n                    <div className=\"space-y-2 text-left\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-600\">\n                          Call Completion\n                        </span>\n                        <span className=\"text-sm font-medium\">\n                          {completionRate}%\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-600\">\n                          Invitation Success\n                        </span>\n                        <span className=\"text-sm font-medium\">\n                          {acceptanceRate}%\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"mt-8 flex justify-center\">\n            <Button\n              onClick={() => (window.location.href = \"/sales-dashboard\")}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n              Back to Dashboard\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20980},"client/src/pages/call-feedback.jsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  ArrowLeft,\n  User,\n  Building,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n  XCircle,\n  AlertTriangle\n} from \"lucide-react\";\n\nexport default function CallFeedback() {\n  const [, setLocation] = useLocation();\n  const [selectedExperience, setSelectedExperience] = useState(null);\n  const [comments, setComments] = useState(\"\");\n\n  const callData = {\n    name: \"Alex Johnson\",\n    company: \"SalesForce Pro\",\n    role: \"CRM Software\",\n    date: \"Today, 3:00 PM\",\n    duration: \"15 min\"\n  };\n\n  const experienceOptions = [\n    {\n      id: \"professional\",\n      title: \"Professional and valuable\",\n      description: \"Great experience, well prepared\",\n      icon: CheckCircle,\n      color: \"green\",\n      bgColor: \"bg-green-50\",\n      borderColor: \"border-green-200\",\n      textColor: \"text-green-700\"\n    },\n    {\n      id: \"mediocre\",\n      title: \"Mediocre - not very relevant\",\n      description: \"Average experience, somewhat relevant\",\n      icon: AlertCircle,\n      color: \"yellow\",\n      bgColor: \"bg-yellow-50\",\n      borderColor: \"border-yellow-200\",\n      textColor: \"text-yellow-700\"\n    },\n    {\n      id: \"poorly-prepared\",\n      title: \"Poorly prepared or off-topic\",\n      description: \"Sales experience, not well prepared\",\n      icon: XCircle,\n      color: \"orange\",\n      bgColor: \"bg-orange-50\",\n      borderColor: \"border-orange-200\",\n      textColor: \"text-orange-700\"\n    },\n    {\n      id: \"no-show\",\n      title: \"Participant did not show up\",\n      description: \"No show without proper notice\",\n      icon: XCircle,\n      color: \"red\",\n      bgColor: \"bg-red-50\",\n      borderColor: \"border-red-200\",\n      textColor: \"text-red-700\"\n    },\n    {\n      id: \"rude\",\n      title: \"Rude, disrespectful, or time-wasting\",\n      description: \"Unprofessional behavior or conduct\",\n      icon: AlertTriangle,\n      color: \"red\",\n      bgColor: \"bg-red-50\",\n      borderColor: \"border-red-200\",\n      textColor: \"text-red-700\"\n    }\n  ];\n\n  const handleSubmit = () => {\n    // Handle form submission here\n    console.log(\"Selected experience:\", selectedExperience);\n    console.log(\"Comments:\", comments);\n    setLocation(\"/sales-dashboard\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-blue-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link href=\"/sales-dashboard\">\n            <Button variant=\"ghost\" className=\"mb-4 p-0 text-gray-600 hover:text-purple-600\">\n              <ArrowLeft className=\"mr-2\" size={16} />\n              Back to Dashboard\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Call Feedback</h1>\n            <p className=\"text-gray-600 mt-1\">Rate your call experience</p>\n          </div>\n        </div>\n\n        {/* Call Info Card */}\n        <Card className=\"mb-8 shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                <User className=\"text-blue-600\" size={24} />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"text-xl font-bold text-gray-900\">{callData.name}</h3>\n                <div className=\"flex items-center space-x-4 mt-1\">\n                  <div className=\"flex items-center text-gray-600\">\n                    <Building className=\"mr-1\" size={14} />\n                    <span className=\"text-sm\">{callData.company}</span>\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {callData.role}\n                  </Badge>\n                  <div className=\"flex items-center text-gray-600\">\n                    <Clock className=\"mr-1\" size={14} />\n                    <span className=\"text-sm\">{callData.date} • {callData.duration}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Evaluation Form */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            <div className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Call Experience</h2>\n              <p className=\"text-gray-600\">How was your call experience?</p>\n            </div>\n\n            {/* Experience Options */}\n            <div className=\"space-y-4 mb-8\">\n              {experienceOptions.map((option) => {\n                const IconComponent = option.icon;\n                return (\n                  <div\n                    key={option.id}\n                    className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${\n                      selectedExperience === option.id\n                        ? `${option.bgColor} ${option.borderColor}`\n                        : \"bg-white border-gray-200 hover:border-gray-300\"\n                    }`}\n                    onClick={() => setSelectedExperience(option.id)}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <IconComponent \n                        className={selectedExperience === option.id ? option.textColor : \"text-gray-400\"} \n                        size={20} \n                      />\n                      <div>\n                        <h4 className={`font-semibold ${\n                          selectedExperience === option.id ? option.textColor : \"text-gray-900\"\n                        }`}>\n                          {option.title}\n                        </h4>\n                        <p className={`text-sm ${\n                          selectedExperience === option.id ? option.textColor : \"text-gray-600\"\n                        }`}>\n                          {option.description}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Additional Comments */}\n            <div className=\"mb-8\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">\n                Additional comments (optional)\n              </h3>\n              <Textarea\n                placeholder=\"Share any additional thoughts about the call experience...\"\n                value={comments}\n                onChange={(e) => setComments(e.target.value)}\n                className=\"min-h-[100px] resize-none\"\n              />\n            </div>\n\n            {/* Submit Button */}\n            <div className=\"flex justify-end\">\n              <Button\n                onClick={handleSubmit}\n                disabled={!selectedExperience}\n                className=\"bg-blue-600 hover:bg-blue-700 px-8 py-3\"\n              >\n                <CheckCircle className=\"mr-2\" size={16} />\n                Submit Feedback\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7330},"client/src/pages/decision-dashboard.jsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  CheckCircle,\n  Calendar,\n  Star,\n  TrendingUp,\n  Clock,\n  User,\n  Settings,\n  Repeat,\n  ExternalLink,\n  Phone,\n  AlertTriangle,\n  MessageCircle,\n  Loader2,\n  RefreshCw,\n  CalendarDays,\n  Video,\n  Users,\n  Edit,\n  Lock,\n  Bell,\n  Shield,\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport FlagsBadge from \"@/components/FlagsBadge\";\nimport ratingBadgeImage from \"@assets/shared_image__1_-removebg-preview_1751516866961.png\";\n\n// Integrated Meeting Card Component for Calendar Integration\nfunction IntegratedMeetingCard({ meeting }) {\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    const today = new Date();\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    const isToday = date.toDateString() === today.toDateString();\n    const isTomorrow = date.toDateString() === tomorrow.toDateString();\n\n    if (isToday)\n      return `Today, ${date.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}`;\n    if (isTomorrow)\n      return `Tomorrow, ${date.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}`;\n\n    return date.toLocaleDateString([], {\n      weekday: \"short\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const extractMeetingLink = (description = \"\") => {\n    const zoomRegex = /https:\\/\\/[\\w-]*\\.?zoom\\.us\\/j\\/[\\d\\w?=-]+/g;\n    const meetRegex = /https:\\/\\/meet\\.google\\.com\\/[\\w-]+/g;\n    const teamsRegex = /https:\\/\\/teams\\.microsoft\\.com\\/[\\w\\/?=-]+/g;\n\n    const zoomMatch = description.match(zoomRegex);\n    const meetMatch = description.match(meetRegex);\n    const teamsMatch = description.match(teamsRegex);\n\n    return zoomMatch?.[0] || meetMatch?.[0] || teamsMatch?.[0] || null;\n  };\n\n  const meetingLink = extractMeetingLink(meeting.description);\n\n  return (\n    <div className=\"flex items-center justify-between p-4 bg-green-50 rounded-lg border-2 border-green-200\">\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"w-12 h-12 rounded-full flex items-center justify-center bg-green-100\">\n          <Video className=\"text-green-600\" size={24} />\n        </div>\n        <div>\n          <div className=\"flex items-center gap-3 mb-2\">\n            <h3 className=\"font-bold text-gray-900\">\n              {meeting.summary || \"Meeting with Sales Rep\"}\n            </h3>\n            <Badge className=\"bg-green-100 text-green-700 border border-green-200 px-3 py-1 text-sm font-semibold\">\n              CALENDAR\n            </Badge>\n          </div>\n          <p className=\"font-medium text-green-600\">\n            {meeting.organizer?.email || \"Sales Rep\"}\n          </p>\n          <p className=\"text-sm text-gray-600\">\n            {meeting.attendees?.length > 0\n              ? `${meeting.attendees.length} attendees`\n              : \"Google Calendar\"}\n          </p>\n          <p className=\"text-sm font-medium italic text-green-600\">\n            \"Calendar meeting\"\n          </p>\n        </div>\n      </div>\n      <div className=\"text-right\">\n        <p className=\"font-bold text-green-600\">\n          {formatDate(meeting.start?.dateTime || meeting.start?.date)}\n        </p>\n        <p className=\"text-sm text-gray-500\">\n          {meeting.status === \"confirmed\" ? \"Confirmed\" : \"Scheduled\"}\n        </p>\n        <div className=\"mt-2 space-x-2\">\n          {meetingLink && (\n            <Button\n              size=\"sm\"\n              className=\"bg-green-600 hover:bg-green-700\"\n              asChild\n            >\n              <a href={meetingLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                <ExternalLink className=\"mr-1\" size={12} />\n                Join Meeting\n              </a>\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Helper function to format time remaining with days, hours, and minutes\nconst formatTimeRemaining = (milliseconds) => {\n  const totalMinutes = Math.ceil(milliseconds / (1000 * 60));\n  const days = Math.floor(totalMinutes / (24 * 60));\n  const hours = Math.floor((totalMinutes % (24 * 60)) / 60);\n  const minutes = totalMinutes % 60;\n  \n  if (days > 0) {\n    return `${days}d ${hours}h ${minutes}m`;\n  } else if (hours > 0) {\n    return `${hours}h ${minutes}m`;\n  } else {\n    return `${minutes}m`;\n  }\n};\n\nexport default function DecisionDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [reportIssueOpen, setReportIssueOpen] = useState(false);\n  const [feedbackOpen, setFeedbackOpen] = useState(false);\n\n  // Fetch decision maker's calls\n  const { data: calls = [], isLoading: callsLoading } = useQuery({\n    queryKey: [\"/api/decision-maker/calls\"],\n    enabled: !!user?.id,\n  });\n\n  // Fetch decision maker's metrics\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/decision-maker/metrics\"],\n    enabled: !!user?.id,\n  });\n\n  // Fetch calendar integration status\n  const { data: calendarStatus, isLoading: calendarStatusLoading } = useQuery({\n    queryKey: [\"/api/calendar/status\"],\n    enabled: !!user?.id,\n  });\n\n  // Fetch upcoming meetings\n  const {\n    data: upcomingMeetings = [],\n    isLoading: meetingsLoading,\n    refetch: refetchMeetings,\n  } = useQuery({\n    queryKey: [\"/api/calendar/upcoming-meetings\"],\n    enabled: !!user?.id && !!calendarStatus?.connected,\n  });\n\n  // Fetch flags count\n  const { data: flagsData } = useQuery({\n    queryKey: [\"/api/user/flags-count\"],\n    enabled: !!user?.id,\n  });\n  const flagsCount = flagsData?.flags || 0;\n\n  // Fetch user's monthly call limit data\n  const { data: userCallLimit } = useQuery({\n    queryKey: [\"/api/user/can-book-calls\"],\n    enabled: !!user?.id,\n  });\n\n  const renderStars = (rating) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`${i < rating ? \"text-yellow-400 fill-current\" : \"text-gray-300\"}`}\n        size={16}\n      />\n    ));\n  };\n\n  const getCallColor = (index) => {\n    return \"blue\"; // Use consistent blue theme\n  };\n\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    const today = new Date();\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    if (date.toDateString() === today.toDateString()) {\n      return `Today, ${date.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}`;\n    } else if (date.toDateString() === tomorrow.toDateString()) {\n      return `Tomorrow, ${date.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}`;\n    } else {\n      return date.toLocaleDateString([], {\n        weekday: \"short\",\n        month: \"short\",\n        day: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      });\n    }\n  };\n\n  const rateCallMutation = useMutation({\n    mutationFn: async ({ callId, rating, feedback }) => {\n      return await apiRequest(`/api/decision-maker/calls/${callId}/rate`, {\n        method: \"POST\",\n        body: JSON.stringify({ rating, feedback }),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/decision-maker/calls\"],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/decision-maker/metrics\"],\n      });\n      toast({\n        title: \"Call Rated\",\n        description: \"Thank you for your feedback!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to rate call\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Complete call mutation\n  const completeCallMutation = useMutation({\n    mutationFn: async (callId) => {\n      return await apiRequest(`/api/decision-maker/complete-call/${callId}`, {\n        method: \"POST\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/decision-maker/calls\"],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/decision-maker/metrics\"],\n      });\n      toast({\n        title: \"Call Completed\",\n        description: \"Call has been marked as completed successfully!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to complete call\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCompleteCall = (callId) => {\n    completeCallMutation.mutate(callId);\n  };\n\n  const handleRateLastCall = () => {\n    const lastCall = calls?.find(\n      (call) => call.status === \"completed\" && !call.rating,\n    );\n    if (lastCall) {\n      // Navigate to evaluation with call ID\n      window.location.href = `/post-call-evaluation?callId=${lastCall._id}`;\n    } else {\n      // Navigate to general evaluation page\n      window.location.href = \"/post-call-evaluation\";\n    }\n  };\n\n  if (!user || metricsLoading || callsLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-12 w-12 animate-spin text-purple-600 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const upcomingCalls = calls\n    .filter((call) => {\n      const callDate = new Date(call.endTime);\n      const now = new Date();\n      return call.status === \"scheduled\" && callDate > now;\n    })\n    .sort((a, b) => new Date(a.scheduledAt) - new Date(b.scheduledAt));\n  const recentCalls = calls.filter((call) => call.status === \"completed\");\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50 pt-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Dashboard Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">\n                Decision Maker Dashboard\n              </h1>\n              <div className=\"flex items-center gap-3 mt-1\">\n                <p className=\"text-gray-600\">\n                  Welcome back, {user?.firstName}!\n                </p>\n                <Badge className=\"bg-blue-100 text-blue-700 border border-blue-200 px-3 py-1 text-sm font-semibold\">\n                  DECISION MAKER\n                </Badge>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Badge className=\"bg-green-100 text-green-800 border border-green-200\">\n                {metrics?.standing === \"good\"\n                  ? \"Excellent Standing\"\n                  : \"Standing: \" + metrics?.standing}\n              </Badge>\n              <FlagsBadge />\n              <Dialog open={settingsOpen} onOpenChange={setSettingsOpen}>\n                <DialogTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"border-gray-300 hover:bg-gray-50\"\n                  >\n                    <Settings className=\"mr-2\" size={16} />\n                    Settings\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto bg-white\">\n                  <DialogHeader>\n                    <DialogTitle className=\"flex items-center text-gray-900\">\n                      <Settings className=\"mr-2\" size={20} />\n                      Account Settings\n                    </DialogTitle>\n                  </DialogHeader>\n                  <SettingsPanel\n                    user={user}\n                    onClose={() => setSettingsOpen(false)}\n                  />\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </div>\n\n        {/* Metrics Cards */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-6 mb-8\">\n          <Card className=\"border border-gray-200 shadow-lg bg-white h-32\">\n            <CardContent className=\"p-6 h-full\">\n              <div className=\"flex items-center justify-between h-full\">\n                <div>\n                  <p className=\"text-gray-600 text-sm font-medium\">\n                    Monthly Call Limit\n                  </p>\n                  <p className=\"text-3xl font-bold text-gray-900\">\n                    {metrics?.completedCalls !== undefined &&\n                    metrics?.totalCallLimit !== undefined\n                      ? `${metrics.completedCalls}/${metrics.totalCallLimit}`\n                      : `${metrics?.completedCalls || 0}/3`}\n                  </p>\n                  <p\n                    className={`text-xs font-medium ${metrics?.remainingCalls > 0 ? \"text-green-600\" : \"text-red-600\"}`}\n                  >\n                    {metrics?.remainingCalls !== undefined\n                      ? `${metrics.remainingCalls} calls remaining`\n                      : \"loading...\"}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <CheckCircle className=\"text-blue-600\" size={24} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-gray-200 shadow-lg bg-white h-32\">\n            <CardContent className=\"p-6 h-full\">\n              <div className=\"flex items-center justify-between h-full\">\n                <div>\n                  <p className=\"text-gray-600 text-sm font-medium\">\n                    Avg Call Rating\n                  </p>\n                  <p className=\"text-3xl font-bold text-gray-900\">\n                    {metrics?.avgRating\n                      ? `${metrics.avgRating.toFixed(1)}/5`\n                      : \"-\"}\n                  </p>\n                </div>\n                <div className=\"w-16 h-16 flex items-center justify-center\">\n                  <img\n                    src={ratingBadgeImage}\n                    alt=\"Rating Badge\"\n                    className=\"w-full h-full object-contain\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-gray-200 shadow-lg bg-white h-32\">\n            <CardContent className=\"p-6 h-full\">\n              <div className=\"flex items-center justify-between h-full\">\n                <div>\n                  <p className=\"text-gray-600 text-sm font-medium\">\n                    Quality Score\n                  </p>\n                  <p className=\"text-3xl font-bold text-gray-900\">\n                    {metrics?.qualityScore !== null &&\n                    metrics?.qualityScore !== undefined\n                      ? `${metrics.qualityScore}%`\n                      : \"-\"}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"text-purple-600\" size={24} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-gray-200 shadow-lg bg-white h-32\">\n            <CardContent className=\"p-6 h-full\">\n              <div className=\"flex items-center justify-between h-full\">\n                <div>\n                  <p className=\"text-gray-600 text-sm font-medium\">\n                    Flags Count\n                  </p>\n                  <p className=\"text-3xl font-bold text-gray-900\">\n                    {flagsCount || 0}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                  <AlertTriangle className=\"text-red-600\" size={24} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Calendar Integration Card */}\n          <Card className=\"border border-gray-200 shadow-lg bg-gradient-to-r from-purple-500 to-pink-500 text-white h-32\">\n            <CardContent className=\"p-4 h-full\">\n              <div className=\"flex flex-col justify-between h-full\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <Calendar className=\"text-white mr-2\" size={16} />\n                    <span className=\"text-xs font-medium\">\n                      Calendar Integration\n                    </span>\n                  </div>\n                  {calendarStatus?.connected && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => refetchMeetings()}\n                      disabled={meetingsLoading}\n                      className=\"text-white hover:bg-white/20 h-6 w-6 p-0\"\n                    >\n                      <RefreshCw\n                        className={`h-3 w-3 ${meetingsLoading ? \"animate-spin\" : \"\"}`}\n                      />\n                    </Button>\n                  )}\n                </div>\n\n                {calendarStatusLoading ? (\n                  <div className=\"flex items-center justify-center flex-1\">\n                    <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full\" />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col gap-2\">\n                    <Button\n                      onClick={async () => {\n                        try {\n                          if (calendarStatus?.connected) {\n                            // Disconnect calendar\n                            await apiRequest(\"/api/current-user\", {\n                              method: \"PUT\",\n                              body: JSON.stringify({\n                                calendarIntegrationEnabled: false,\n                              }),\n                            });\n\n                            queryClient.invalidateQueries({\n                              queryKey: [\"/api/calendar/status\"],\n                            });\n\n                            toast({\n                              title: \"Calendar Disconnected\",\n                              description:\n                                \"Google Calendar has been disconnected\",\n                            });\n                          } else {\n                            // Connect to Google Calendar using the authenticated endpoint\n                            const response = await apiRequest(\n                              \"/api/auth/google/connect\",\n                            );\n                            window.location.href = response.authUrl;\n                          }\n                        } catch (error) {\n                          console.error(\"Calendar toggle failed:\", error);\n                          toast({\n                            title: \"Error\",\n                            description: \"Failed to update calendar connection\",\n                            variant: \"destructive\",\n                          });\n                        }\n                      }}\n                      className={`w-full transition-all duration-300 text-xs h-6 ${\n                        calendarStatus?.connected\n                          ? \"bg-green-600 hover:bg-green-700\"\n                          : \"bg-red-600 hover:bg-red-700\"\n                      }`}\n                      style={{\n                        backgroundColor: calendarStatus?.connected\n                          ? \"#16a34a\"\n                          : \"#ff1f1f\",\n                      }}\n                      size=\"sm\"\n                    >\n                      <Calendar className=\"mr-1\" size={10} />\n                      {calendarStatus?.connected ? \"Connected\" : \"Disconnected\"}\n                    </Button>\n\n                    {calendarStatus?.connected && (\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"w-full bg-white/20 hover:bg-white/30 text-white border-white/30 text-xs h-6\"\n                          >\n                            <CalendarDays className=\"mr-1\" size={10} />\n                            View All\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                          <DialogHeader>\n                            <DialogTitle className=\"flex items-center\">\n                              <Calendar className=\"mr-2\" size={20} />\n                              All Calendar Meetings\n                            </DialogTitle>\n                          </DialogHeader>\n                          <CalendarMeetingsView\n                            meetings={upcomingMeetings}\n                            loading={meetingsLoading}\n                          />\n                        </DialogContent>\n                      </Dialog>\n                    )}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            {/* Upcoming Calls with Calendar Integration */}\n            <Card className=\"shadow-lg border border-gray-200 bg-white\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between text-gray-900\">\n                  <div className=\"flex items-center\">\n                    <Calendar className=\"text-blue-600 mr-3\" size={24} />\n                    Upcoming Calls\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {calendarStatus?.connected && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => refetchMeetings()}\n                        disabled={meetingsLoading}\n                      >\n                        <RefreshCw\n                          className={`h-4 w-4 ${meetingsLoading ? \"animate-spin\" : \"\"}`}\n                        />\n                      </Button>\n                    )}\n                    {!calendarStatus?.connected && (\n                      <Button\n                        onClick={async () => {\n                          try {\n                            // Connect to Google Calendar via OAuth using authenticated endpoint\n                            const response = await apiRequest(\n                              \"/api/auth/google/connect\",\n                            );\n                            window.location.href = response.authUrl;\n                          } catch (error) {\n                            console.error(\"Calendar connection failed:\", error);\n                            toast({\n                              title: \"Error\",\n                              description: \"Failed to connect calendar\",\n                              variant: \"destructive\",\n                            });\n                          }\n                        }}\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"text-xs\"\n                      >\n                        <Calendar className=\"mr-1\" size={12} />\n                        Connect Calendar\n                      </Button>\n                    )}\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Calendar Connection Status */}\n                <div className=\"p-3 rounded-lg border\">\n                  {calendarStatusLoading ? (\n                    <div className=\"flex items-center justify-center py-2\">\n                      <div className=\"animate-spin w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full mr-2\" />\n                      <span className=\"text-sm text-gray-600\">\n                        Checking calendar connection...\n                      </span>\n                    </div>\n                  ) : calendarStatus?.connected ? (\n                    <div className=\"flex items-center text-green-600\">\n                      <CheckCircle className=\"mr-2\" size={16} />\n                      <span className=\"text-sm font-medium\">\n                        Google Calendar Connected\n                      </span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center text-orange-600\">\n                      <AlertTriangle className=\"mr-2\" size={16} />\n                      <span className=\"text-sm font-medium\">\n                        Calendar Not Connected - Click \"Connect Calendar\" to\n                        sync meetings\n                      </span>\n                    </div>\n                  )}\n                </div>\n\n                {/* Platform Calls */}\n                {upcomingCalls.length > 0 && (\n                  <div>\n                    <h4 className=\"text-sm font-semibold text-gray-700 mb-3 flex items-center\">\n                      <Phone className=\"mr-2 text-blue-500\" size={14} />\n                      Platform Scheduled Calls\n                    </h4>\n                    {calendarStatus?.connected ? (\n                      <div className=\"space-y-3\">\n                        {upcomingCalls.map((call, index) => {\n                          const color = getCallColor(index);\n                          return (\n                            <div\n                              key={call._id || call.id}\n                              className={`flex flex-col sm:flex-row sm:items-center sm:justify-between p-4 rounded-lg border-2 ${\n                                color === \"blue\"\n                                  ? \"bg-blue-50 border-blue-200\"\n                                  : \"bg-blue-50 border-blue-200\"\n                              }`}\n                            >\n                              <div className=\"flex items-center space-x-4 mb-4 sm:mb-0\">\n                                <div className=\"w-12 h-12 rounded-full flex items-center justify-center bg-blue-100\">\n                                  <User className=\"text-blue-600\" size={24} />\n                                </div>\n                                <div>\n                                  <div className=\"flex items-center gap-3 mb-2\">\n                                    <h3 className=\"font-bold text-gray-900\">\n                                      {call.salesRepName || \"Sales Rep\"}\n                                    </h3>\n                                    <Badge className=\"bg-purple-100 text-purple-700 border border-purple-200 px-3 py-1 text-sm font-semibold\">\n                                      VERIFIED\n                                    </Badge>\n                                  </div>\n                                  <p className=\"font-medium text-blue-600\">\n                                    {call.company || \"Company\"}\n                                  </p>\n                                  <p className=\"text-sm text-gray-600\">\n                                    {call.industry || \"Industry\"}\n                                  </p>\n                                  <p className=\"text-sm font-medium italic text-blue-600\">\n                                    \"{call.pitch || \"Scheduled call\"}\"\n                                  </p>\n                                </div>\n                              </div>\n                              <div className=\"text-left sm:text-right\">\n                                <p className=\"font-bold text-blue-600\">\n                                  {call.scheduledAt\n                                    ? formatDate(call.scheduledAt)\n                                    : \"TBD\"}\n                                </p>\n                                <p className=\"text-sm text-gray-500\">15 min</p>\n                                <div className=\"mt-2 flex flex-wrap gap-2\">\n                                  <Button\n                                    size=\"sm\"\n                                    className={`text-sm ${\n                                      (() => {\n                                        const now = new Date();\n                                        const callTime = new Date(call.scheduledAt);\n                                        const joinWindowStart = new Date(callTime.getTime() - 2 * 60 * 1000); // 2 minutes before\n                                        const joinWindowEnd = new Date(callTime.getTime() + 30 * 60 * 1000); // 30 minutes after\n                                        const canJoin = now >= joinWindowStart && now <= joinWindowEnd;\n                                        \n                                        return canJoin \n                                          ? \"bg-blue-600 hover:bg-blue-700 text-white\" \n                                          : \"bg-gray-400 text-gray-200 cursor-not-allowed\";\n                                      })()\n                                    }`}\n                                    disabled={(() => {\n                                      const now = new Date();\n                                      const callTime = new Date(call.scheduledAt);\n                                      const joinWindowStart = new Date(callTime.getTime() - 2 * 60 * 1000); // 2 minutes before\n                                      const joinWindowEnd = new Date(callTime.getTime() + 30 * 60 * 1000); // 30 minutes after\n                                      return !(now >= joinWindowStart && now <= joinWindowEnd);\n                                    })()}\n                                    onClick={() => {\n                                      const now = new Date();\n                                      const callTime = new Date(call.scheduledAt);\n                                      const joinWindowStart = new Date(callTime.getTime() - 2 * 60 * 1000);\n                                      const joinWindowEnd = new Date(callTime.getTime() + 30 * 60 * 1000);\n                                      \n                                      if (now < joinWindowStart) {\n                                        const timeRemaining = formatTimeRemaining(joinWindowStart - now);\n                                        toast({\n                                          title: \"Meeting Not Yet Available\",\n                                          description: `You can join 2 minutes before the scheduled time. Available in ${timeRemaining}`,\n                                          variant: \"destructive\"\n                                        });\n                                        return;\n                                      }\n                                      \n                                      if (now > joinWindowEnd) {\n                                        toast({\n                                          title: \"Meeting Window Closed\",\n                                          description: \"The meeting window has passed. Contact support if you need assistance.\",\n                                          variant: \"destructive\"\n                                        });\n                                        return;\n                                      }\n                                      \n                                      // Join call logic - open Google Meet link if available\n                                      if (call.googleMeetLink) {\n                                        window.open(\n                                          call.googleMeetLink,\n                                          \"_blank\",\n                                        );\n                                      } else if (call.meetingLink) {\n                                        window.open(call.meetingLink, \"_blank\");\n                                      } else if (call.googleCalendarEventId) {\n                                        toast({\n                                          title: \"Opening Meeting\",\n                                          description:\n                                            \"Redirecting to Google Calendar event...\",\n                                        });\n                                        window.open(\n                                          `https://calendar.google.com/calendar/event?eid=${call.googleCalendarEventId}`,\n                                          \"_blank\",\n                                        );\n                                      } else {\n                                        toast({\n                                          title: \"Meeting Link Not Available\",\n                                          description:\n                                            \"The meeting link will be available closer to the meeting time.\",\n                                        });\n                                      }\n                                    }}\n                                  >\n                                    <Phone className=\"mr-1\" size={12} />\n                                    {(() => {\n                                      const now = new Date();\n                                      const callTime = new Date(call.scheduledAt);\n                                      const joinWindowStart = new Date(callTime.getTime() - 2 * 60 * 1000);\n                                      \n                                      if (now < joinWindowStart) {\n                                        const timeRemaining = formatTimeRemaining(joinWindowStart - now);\n                                        return `Available in ${timeRemaining}`;\n                                      } else {\n                                        return \"Join Call\";\n                                      }\n                                    })()}\n                                  </Button>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    className=\"bg-green-50 hover:bg-green-100 text-green-700 border-green-300\"\n                                    onClick={() =>\n                                      handleCompleteCall(call._id || call.id)\n                                    }\n                                    disabled={completeCallMutation.isPending}\n                                  >\n                                    {completeCallMutation.isPending ? (\n                                      <Loader2\n                                        className=\"mr-1 animate-spin\"\n                                        size={12}\n                                      />\n                                    ) : (\n                                      <CheckCircle className=\"mr-1\" size={12} />\n                                    )}\n                                    Mark Complete\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <Calendar className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                        <p className=\"text-gray-500\">\n                          No upcoming calls scheduled\n                        </p>\n                        {!calendarStatus?.connected && (\n                          <p className=\"text-sm text-gray-400 mt-2\">\n                            Connect your calendar to see Google Calendar\n                            meetings\n                          </p>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* No calls state */}\n                {upcomingCalls.length === 0 &&\n                  (!calendarStatus?.connected ||\n                    upcomingMeetings.length === 0) && (\n                    <div className=\"text-center py-8\">\n                      <Calendar className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                      <p className=\"text-gray-500\">\n                        No upcoming calls scheduled\n                      </p>\n                      {!calendarStatus?.connected && (\n                        <p className=\"text-sm text-gray-400 mt-2\">\n                          Connect your calendar to see Google Calendar meetings\n                        </p>\n                      )}\n                    </div>\n                  )}\n              </CardContent>\n            </Card>\n\n            {/* Recent Calls */}\n            <Card className=\"shadow-lg border border-gray-200 bg-white\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Clock className=\"text-green-500 mr-3\" size={24} />\n                  Recent Calls\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {recentCalls.length > 0 ? (\n                  recentCalls.map((call) => (\n                    <div\n                      key={call._id || call.id}\n                      className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between p-4 bg-green-50 rounded-lg border border-green-200 mb-4\"\n                    >\n                      <div className=\"flex items-center space-x-4 mb-4 sm:mb-0\">\n                        <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                          <User className=\"text-green-600\" size={24} />\n                        </div>\n                        <div>\n                          <h3 className=\"font-bold text-gray-900\">\n                            {call.salesRepName || \"Sales Rep\"}\n                          </h3>\n                          <p className=\"text-green-600 font-medium\">\n                            {call.company || \"Company\"}\n                          </p>\n                          <p className=\"text-sm text-gray-600\">\n                            {call.industry || \"Industry\"}\n                          </p>\n                          <p className=\"text-sm text-green-600 font-medium italic\">\n                            \"{call.feedback || \"Call completed\"}\"\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-left sm:text-right\">\n                        <p className=\"font-medium text-gray-900\">\n                          {call.completedAt\n                            ? new Date(call.completedAt).toLocaleDateString()\n                            : \"Recently\"}\n                        </p>\n                        <div className=\"flex items-center mt-1\">\n                          <div className=\"flex\">\n                            {renderStars(call.rating || 0)}\n                          </div>\n                          {call.rating && (\n                            <span className=\"ml-2 text-sm text-gray-600\">\n                              {call.rating}/5\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"flex flex-col gap-2 mt-2\">\n                          <Badge className=\"bg-green-100 text-green-800\">\n                            Completed\n                          </Badge>\n                          {!call.rating && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"text-xs bg-yellow-50 hover:bg-yellow-100 text-yellow-700 border-yellow-300\"\n                              onClick={() => {\n                                // Navigate to evaluation with specific call ID\n                                window.location.href = `/evaluation/rep?callId=${call._id}`;\n                              }}\n                            >\n                              <Star className=\"mr-1\" size={12} />\n                              Rate Meeting\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Clock className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                    <p className=\"text-gray-500\">No completed calls yet</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Quick Actions */}\n            <Card className=\"shadow-lg\">\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start p-3 hover:bg-yellow-50\"\n                  onClick={() => handleRateLastCall()}\n                >\n                  <Star className=\"text-yellow-500 mr-3\" size={16} />\n                  <span className=\"text-sm font-medium\">Rate Last Call</span>\n                </Button>\n                <Dialog\n                  open={reportIssueOpen}\n                  onOpenChange={setReportIssueOpen}\n                >\n                  <DialogTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      className=\"w-full justify-start p-3 hover:bg-red-50\"\n                    >\n                      <AlertTriangle className=\"text-red-500 mr-3\" size={16} />\n                      <span className=\"text-sm font-medium\">Report Issue</span>\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>Report an Issue</DialogTitle>\n                    </DialogHeader>\n                    <ReportIssueForm\n                      onClose={() => setReportIssueOpen(false)}\n                    />\n                  </DialogContent>\n                </Dialog>\n                <Dialog open={feedbackOpen} onOpenChange={setFeedbackOpen}>\n                  <DialogTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      className=\"w-full justify-start p-3 hover:bg-blue-50\"\n                    >\n                      <MessageCircle className=\"text-blue-500 mr-3\" size={16} />\n                      <span className=\"text-sm font-medium\">View Feedback</span>\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                    <DialogHeader>\n                      <DialogTitle>Your Call Feedback History</DialogTitle>\n                    </DialogHeader>\n                    <FeedbackHistory onClose={() => setFeedbackOpen(false)} />\n                  </DialogContent>\n                </Dialog>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Report Issue Form Component\nfunction ReportIssueForm({ onClose }) {\n  const [issueType, setIssueType] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [priority, setPriority] = useState(\"medium\");\n  const { toast } = useToast();\n\n  const issueTypes = [\n    { value: \"technical\", label: \"Technical Issue\" },\n    { value: \"behavior\", label: \"Inappropriate Behavior\" },\n    { value: \"quality\", label: \"Call Quality Problem\" },\n    { value: \"scheduling\", label: \"Scheduling Issue\" },\n    { value: \"other\", label: \"Other\" },\n  ];\n\n  const priorityLevels = [\n    { value: \"low\", label: \"Low Priority\", color: \"text-green-600\" },\n    { value: \"medium\", label: \"Medium Priority\", color: \"text-yellow-600\" },\n    { value: \"high\", label: \"High Priority\", color: \"text-red-600\" },\n  ];\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!issueType || !description.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select an issue type and provide a description.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await apiRequest(\"/api/decision-maker/report-issue\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          type: issueType,\n          description: description.trim(),\n          priority,\n          reportedAt: new Date().toISOString(),\n        }),\n      });\n\n      toast({\n        title: \"Issue Reported\",\n        description:\n          \"Your issue has been reported successfully. We'll investigate and get back to you.\",\n      });\n\n      onClose();\n      setIssueType(\"\");\n      setDescription(\"\");\n      setPriority(\"medium\");\n    } catch (error) {\n      toast({\n        title: \"Report Failed\",\n        description:\n          error.message || \"Failed to submit report. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div>\n        <Label htmlFor=\"issueType\">Issue Type</Label>\n        <select\n          id=\"issueType\"\n          value={issueType}\n          onChange={(e) => setIssueType(e.target.value)}\n          className=\"w-full p-2 border border-gray-300 rounded-md mt-1\"\n          required\n        >\n          <option value=\"\">Select an issue type</option>\n          {issueTypes.map((type) => (\n            <option key={type.value} value={type.value}>\n              {type.label}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div>\n        <Label htmlFor=\"priority\">Priority Level</Label>\n        <select\n          id=\"priority\"\n          value={priority}\n          onChange={(e) => setPriority(e.target.value)}\n          className=\"w-full p-2 border border-gray-300 rounded-md mt-1\"\n        >\n          {priorityLevels.map((level) => (\n            <option key={level.value} value={level.value}>\n              {level.label}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div>\n        <Label htmlFor=\"description\">Description</Label>\n        <Textarea\n          id=\"description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          placeholder=\"Please describe the issue in detail...\"\n          className=\"mt-1\"\n          rows={4}\n          required\n        />\n      </div>\n\n      <div className=\"flex justify-end space-x-2 pt-4\">\n        <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button type=\"submit\" className=\"bg-red-600 hover:bg-red-700\">\n          <AlertTriangle className=\"mr-2\" size={16} />\n          Submit Report\n        </Button>\n      </div>\n    </form>\n  );\n}\n\n// Feedback History Component\nfunction FeedbackHistory({ onClose }) {\n  const { data: feedbackHistory, isLoading } = useQuery({\n    queryKey: [\"/api/decision-maker/feedback-history\"],\n  });\n\n  const renderStars = (rating) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`${i < rating ? \"text-yellow-400 fill-current\" : \"text-gray-300\"}`}\n        size={14}\n      />\n    ));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-blue-600\" />\n      </div>\n    );\n  }\n\n  const feedback = feedbackHistory || [];\n\n  return (\n    <div className=\"space-y-4\">\n      {feedback.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <MessageCircle className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            No Feedback Yet\n          </h3>\n          <p className=\"text-gray-500\">\n            Complete calls to start receiving feedback and ratings.\n          </p>\n        </div>\n      ) : (\n        <>\n          <div className=\"grid gap-4\">\n            {feedback.map((item, index) => (\n              <Card key={index} className=\"border-l-4 border-l-blue-500\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <h4 className=\"font-medium text-gray-900\">\n                          Call with{\" \"}\n                          {item.salesRepName || \"Sales Representative\"}\n                        </h4>\n                        <Badge className=\"bg-orange-100 text-orange-700 border border-orange-200 px-2 py-1 text-xs font-semibold\">\n                          RATED\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-500\">\n                        {item.company} •{\" \"}\n                        {new Date(item.callDate).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center\">\n                      {renderStars(item.rating)}\n                      <span className=\"ml-2 text-sm font-medium text-gray-700\">\n                        {item.rating}/5\n                      </span>\n                    </div>\n                  </div>\n\n                  {item.experienceTitle && (\n                    <Badge\n                      variant=\"secondary\"\n                      className={`mb-2 ${\n                        item.rating >= 4\n                          ? \"bg-green-100 text-green-800\"\n                          : item.rating >= 3\n                            ? \"bg-yellow-100 text-yellow-800\"\n                            : \"bg-red-100 text-red-800\"\n                      }`}\n                    >\n                      {item.experienceTitle}\n                    </Badge>\n                  )}\n\n                  {item.comments && (\n                    <p className=\"text-sm text-gray-600 mt-2 italic\">\n                      \"{item.comments}\"\n                    </p>\n                  )}\n\n                  <div className=\"flex justify-between items-center mt-3 pt-3 border-t border-gray-100\">\n                    <span className=\"text-xs text-gray-400\">\n                      Submitted{\" \"}\n                      {new Date(item.evaluatedAt).toLocaleDateString()}\n                    </span>\n                    {item.rating <= 2 && (\n                      <Badge variant=\"destructive\" className=\"text-xs\">\n                        Follow-up Required\n                      </Badge>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"flex justify-end pt-4\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Close\n            </Button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\n// Settings Panel Component\nfunction SettingsPanel({ user, onClose }) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"profile\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [profileData, setProfileData] = useState({\n    firstName: user?.firstName || \"\",\n    lastName: user?.lastName || \"\",\n    email: user?.email || \"\",\n    jobTitle: user?.jobTitle || \"\",\n    company: user?.company || \"\",\n    phone: user?.phone || \"\",\n    linkedinUrl: user?.linkedinUrl || \"\",\n    bio: user?.bio || \"\",\n    timezone: user?.timezone || \"UTC\",\n  });\n\n  const [notificationSettings, setNotificationSettings] = useState({\n    emailNotifications: user?.notificationSettings?.emailNotifications ?? true,\n    smsNotifications: user?.notificationSettings?.smsNotifications ?? false,\n    meetingReminders: user?.notificationSettings?.meetingReminders ?? true,\n    weeklyDigest: user?.notificationSettings?.weeklyDigest ?? true,\n    promotionalEmails: user?.notificationSettings?.promotionalEmails ?? false,\n  });\n\n  const [privacySettings, setPrivacySettings] = useState({\n    profileVisibility: user?.privacySettings?.profileVisibility || \"public\",\n    showCompanyInfo: user?.privacySettings?.showCompanyInfo ?? true,\n    allowDirectContact: user?.privacySettings?.allowDirectContact ?? true,\n    shareCallHistory: user?.privacySettings?.shareCallHistory ?? false,\n  });\n\n  const handleProfileUpdate = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    try {\n      await apiRequest(\"/api/current-user\", {\n        method: \"PUT\",\n        body: JSON.stringify(profileData),\n      });\n\n      // Invalidate user data cache to refetch updated info\n      await queryClient.invalidateQueries({ queryKey: [\"/api/current-user\"] });\n\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your personal information has been saved successfully.\",\n      });\n\n      onClose();\n    } catch (error) {\n      console.error(\"Profile update failed:\", error);\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to save your profile changes. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleNotificationUpdate = async () => {\n    setIsLoading(true);\n    try {\n      await apiRequest(\"/api/user/notifications\", {\n        method: \"PUT\",\n        body: JSON.stringify(notificationSettings),\n      });\n\n      // Invalidate user data cache\n      await queryClient.invalidateQueries({ queryKey: [\"/api/current-user\"] });\n\n      toast({\n        title: \"Notifications Updated\",\n        description:\n          \"Your notification preferences have been saved successfully.\",\n      });\n    } catch (error) {\n      console.error(\"Notification settings update failed:\", error);\n      toast({\n        title: \"Update Failed\",\n        description:\n          \"Failed to save your notification settings. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handlePrivacyUpdate = async () => {\n    setIsLoading(true);\n    try {\n      await apiRequest(\"/api/user/privacy\", {\n        method: \"PUT\",\n        body: JSON.stringify(privacySettings),\n      });\n\n      // Invalidate user data cache\n      await queryClient.invalidateQueries({ queryKey: [\"/api/current-user\"] });\n\n      toast({\n        title: \"Privacy Settings Updated\",\n        description: \"Your privacy preferences have been saved successfully.\",\n      });\n    } catch (error) {\n      console.error(\"Privacy settings update failed:\", error);\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to save your privacy settings. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"profile\" className=\"flex items-center\">\n            <User className=\"mr-2\" size={16} />\n            Profile\n          </TabsTrigger>\n          <TabsTrigger value=\"notifications\" className=\"flex items-center\">\n            <Bell className=\"mr-2\" size={16} />\n            Notifications\n          </TabsTrigger>\n          <TabsTrigger value=\"privacy\" className=\"flex items-center\">\n            <Shield className=\"mr-2\" size={16} />\n            Privacy\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" className=\"flex items-center\">\n            <Lock className=\"mr-2\" size={16} />\n            Security\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Profile Tab */}\n        <TabsContent value=\"profile\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Edit className=\"mr-2\" size={18} />\n                Personal Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleProfileUpdate} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      value={profileData.firstName}\n                      onChange={(e) =>\n                        setProfileData({\n                          ...profileData,\n                          firstName: e.target.value,\n                        })\n                      }\n                      placeholder=\"Enter first name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      value={profileData.lastName}\n                      onChange={(e) =>\n                        setProfileData({\n                          ...profileData,\n                          lastName: e.target.value,\n                        })\n                      }\n                      placeholder=\"Enter last name\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={profileData.email}\n                    onChange={(e) =>\n                      setProfileData({ ...profileData, email: e.target.value })\n                    }\n                    placeholder=\"Enter email address\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"jobTitle\">Job Title</Label>\n                    <Input\n                      id=\"jobTitle\"\n                      value={profileData.jobTitle}\n                      onChange={(e) =>\n                        setProfileData({\n                          ...profileData,\n                          jobTitle: e.target.value,\n                        })\n                      }\n                      placeholder=\"Enter job title\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"company\">Company</Label>\n                    <Input\n                      id=\"company\"\n                      value={profileData.company}\n                      onChange={(e) =>\n                        setProfileData({\n                          ...profileData,\n                          company: e.target.value,\n                        })\n                      }\n                      placeholder=\"Enter company name\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input\n                      id=\"phone\"\n                      value={profileData.phone}\n                      onChange={(e) =>\n                        setProfileData({\n                          ...profileData,\n                          phone: e.target.value,\n                        })\n                      }\n                      placeholder=\"Enter phone number\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"timezone\">Timezone</Label>\n                    <select\n                      id=\"timezone\"\n                      value={profileData.timezone}\n                      onChange={(e) =>\n                        setProfileData({\n                          ...profileData,\n                          timezone: e.target.value,\n                        })\n                      }\n                      className=\"w-full p-2 border border-gray-300 rounded-md\"\n                    >\n                      <option value=\"UTC\">UTC</option>\n                      <option value=\"America/New_York\">Eastern Time</option>\n                      <option value=\"America/Chicago\">Central Time</option>\n                      <option value=\"America/Denver\">Mountain Time</option>\n                      <option value=\"America/Los_Angeles\">Pacific Time</option>\n                      <option value=\"Europe/London\">GMT</option>\n                      <option value=\"Europe/Paris\">CET</option>\n                      <option value=\"Asia/Tokyo\">JST</option>\n                    </select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"linkedinUrl\">LinkedIn Profile</Label>\n                  <Input\n                    id=\"linkedinUrl\"\n                    value={profileData.linkedinUrl}\n                    onChange={(e) =>\n                      setProfileData({\n                        ...profileData,\n                        linkedinUrl: e.target.value,\n                      })\n                    }\n                    placeholder=\"https://linkedin.com/in/yourprofile\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"bio\">Professional Bio</Label>\n                  <Textarea\n                    id=\"bio\"\n                    value={profileData.bio}\n                    onChange={(e) =>\n                      setProfileData({ ...profileData, bio: e.target.value })\n                    }\n                    placeholder=\"Brief description of your professional background...\"\n                    rows={4}\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={onClose}\n                    disabled={isLoading}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={isLoading}>\n                    {isLoading ? (\n                      <>\n                        <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                        Saving...\n                      </>\n                    ) : (\n                      \"Save Changes\"\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Notifications Tab */}\n        <TabsContent value=\"notifications\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Bell className=\"mr-2\" size={18} />\n                Notification Preferences\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"emailNotifications\">\n                      Email Notifications\n                    </Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Receive notifications via email\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"emailNotifications\"\n                    checked={notificationSettings.emailNotifications}\n                    onCheckedChange={(checked) =>\n                      setNotificationSettings({\n                        ...notificationSettings,\n                        emailNotifications: checked,\n                      })\n                    }\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"smsNotifications\">SMS Notifications</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Receive notifications via text message\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"smsNotifications\"\n                    checked={notificationSettings.smsNotifications}\n                    onCheckedChange={(checked) =>\n                      setNotificationSettings({\n                        ...notificationSettings,\n                        smsNotifications: checked,\n                      })\n                    }\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"meetingReminders\">Meeting Reminders</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Get reminded about upcoming calls\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"meetingReminders\"\n                    checked={notificationSettings.meetingReminders}\n                    onCheckedChange={(checked) =>\n                      setNotificationSettings({\n                        ...notificationSettings,\n                        meetingReminders: checked,\n                      })\n                    }\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"weeklyDigest\">Weekly Digest</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Weekly summary of your activity\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"weeklyDigest\"\n                    checked={notificationSettings.weeklyDigest}\n                    onCheckedChange={(checked) =>\n                      setNotificationSettings({\n                        ...notificationSettings,\n                        weeklyDigest: checked,\n                      })\n                    }\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"promotionalEmails\">\n                      Promotional Emails\n                    </Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Updates about new features and offers\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"promotionalEmails\"\n                    checked={notificationSettings.promotionalEmails}\n                    onCheckedChange={(checked) =>\n                      setNotificationSettings({\n                        ...notificationSettings,\n                        promotionalEmails: checked,\n                      })\n                    }\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex justify-end\">\n                <Button onClick={handleNotificationUpdate} disabled={isLoading}>\n                  {isLoading ? (\n                    <>\n                      <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                      Saving...\n                    </>\n                  ) : (\n                    \"Save Notification Settings\"\n                  )}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Privacy Tab */}\n        <TabsContent value=\"privacy\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Shield className=\"mr-2\" size={18} />\n                Privacy Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"profileVisibility\">Profile Visibility</Label>\n                  <p className=\"text-sm text-gray-500 mb-2\">\n                    Control who can see your profile information\n                  </p>\n                  <select\n                    id=\"profileVisibility\"\n                    value={privacySettings.profileVisibility}\n                    onChange={(e) =>\n                      setPrivacySettings({\n                        ...privacySettings,\n                        profileVisibility: e.target.value,\n                      })\n                    }\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  >\n                    <option value=\"public\">Public - Anyone can view</option>\n                    <option value=\"network\">\n                      Network Only - Connected sales reps only\n                    </option>\n                    <option value=\"private\">\n                      Private - Hidden from searches\n                    </option>\n                  </select>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"showCompanyInfo\">\n                      Show Company Information\n                    </Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Display your company and job title publicly\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"showCompanyInfo\"\n                    checked={privacySettings.showCompanyInfo}\n                    onCheckedChange={(checked) =>\n                      setPrivacySettings({\n                        ...privacySettings,\n                        showCompanyInfo: checked,\n                      })\n                    }\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"allowDirectContact\">\n                      Allow Direct Contact\n                    </Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Sales reps can contact you directly\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"allowDirectContact\"\n                    checked={privacySettings.allowDirectContact}\n                    onCheckedChange={(checked) =>\n                      setPrivacySettings({\n                        ...privacySettings,\n                        allowDirectContact: checked,\n                      })\n                    }\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"shareCallHistory\">Share Call History</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Allow other DMs to see your call ratings\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"shareCallHistory\"\n                    checked={privacySettings.shareCallHistory}\n                    onCheckedChange={(checked) =>\n                      setPrivacySettings({\n                        ...privacySettings,\n                        shareCallHistory: checked,\n                      })\n                    }\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex justify-end\">\n                <Button onClick={handlePrivacyUpdate} disabled={isLoading}>\n                  {isLoading ? (\n                    <>\n                      <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                      Saving...\n                    </>\n                  ) : (\n                    \"Save Privacy Settings\"\n                  )}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Security Tab */}\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Lock className=\"mr-2\" size={18} />\n                Security Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-gray-50 rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">Password Security</h4>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    Keep your account secure with a strong password\n                  </p>\n                  <Button variant=\"outline\">Change Password</Button>\n                </div>\n\n                <div className=\"p-4 bg-gray-50 rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">\n                    Two-Factor Authentication\n                  </h4>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    Add an extra layer of security to your account\n                  </p>\n                  <Button variant=\"outline\">Enable 2FA</Button>\n                </div>\n\n                <div className=\"p-4 bg-gray-50 rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">Active Sessions</h4>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    Manage your active login sessions\n                  </p>\n                  <Button variant=\"outline\">View Sessions</Button>\n                </div>\n\n                <div className=\"p-4 bg-red-50 rounded-lg border border-red-200\">\n                  <h4 className=\"font-medium mb-2 text-red-800\">Danger Zone</h4>\n                  <p className=\"text-sm text-red-600 mb-3\">\n                    Permanently delete your account and all associated data\n                  </p>\n                  <Button variant=\"destructive\">Delete Account</Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\n// Meeting Card Component\nfunction MeetingCard({ meeting, compact = false }) {\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    const today = new Date();\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    const isToday = date.toDateString() === today.toDateString();\n    const isTomorrow = date.toDateString() === tomorrow.toDateString();\n\n    if (isToday)\n      return `Today, ${date.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}`;\n    if (isTomorrow)\n      return `Tomorrow, ${date.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}`;\n\n    return date.toLocaleDateString([], {\n      weekday: \"short\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const extractMeetingLink = (description = \"\") => {\n    const zoomRegex = /https:\\/\\/[\\w-]*\\.?zoom\\.us\\/j\\/[\\d\\w?=-]+/g;\n    const meetRegex = /https:\\/\\/meet\\.google\\.com\\/[\\w-]+/g;\n    const teamsRegex = /https:\\/\\/teams\\.microsoft\\.com\\/[\\w\\/?=-]+/g;\n\n    const zoomMatch = description.match(zoomRegex);\n    const meetMatch = description.match(meetRegex);\n    const teamsMatch = description.match(teamsRegex);\n\n    return zoomMatch?.[0] || meetMatch?.[0] || teamsMatch?.[0] || null;\n  };\n\n  const meetingLink = extractMeetingLink(meeting.description);\n\n  if (compact) {\n    return (\n      <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2 mb-1\">\n            <p className=\"text-sm font-medium text-gray-900 truncate\">\n              {meeting.summary || \"Meeting with Sales Rep\"}\n            </p>\n            <Badge className=\"bg-blue-100 text-blue-700 text-xs px-2 py-0\">\n              EXT\n            </Badge>\n          </div>\n          <p className=\"text-xs text-gray-500\">\n            {formatDate(meeting.start?.dateTime || meeting.start?.date)}\n          </p>\n        </div>\n        {meetingLink && (\n          <Button size=\"sm\" variant=\"ghost\" asChild>\n            <a href={meetingLink} target=\"_blank\" rel=\"noopener noreferrer\">\n              <ExternalLink className=\"h-3 w-3\" />\n            </a>\n          </Button>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Video className=\"text-blue-500\" size={16} />\n              <h4 className=\"font-medium text-gray-900 truncate\">\n                {meeting.summary || \"Meeting with Sales Rep\"}\n              </h4>\n              <Badge className=\"bg-blue-100 text-blue-700 border border-blue-200 px-2 py-1 text-xs font-semibold\">\n                EXTERNAL\n              </Badge>\n            </div>\n\n            <div className=\"space-y-1 text-sm text-gray-600\">\n              <div className=\"flex items-center gap-2\">\n                <Clock size={14} />\n                <span>\n                  {formatDate(meeting.start?.dateTime || meeting.start?.date)}\n                </span>\n              </div>\n\n              {meeting.organizer?.email && (\n                <div className=\"flex items-center gap-2\">\n                  <Users size={14} />\n                  <span>Organized by: {meeting.organizer.email}</span>\n                </div>\n              )}\n\n              {meeting.attendees && meeting.attendees.length > 0 && (\n                <div className=\"flex items-center gap-2\">\n                  <Users size={14} />\n                  <span>{meeting.attendees.length} attendees</span>\n                </div>\n              )}\n            </div>\n\n            {meeting.description && (\n              <p className=\"text-sm text-gray-500 mt-2 line-clamp-2\">\n                {meeting.description.replace(/https?:\\/\\/[^\\s]+/g, \"\").trim()}\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex flex-col gap-2 ml-4\">\n            {meeting.status === \"confirmed\" && (\n              <Badge className=\"bg-green-100 text-green-800\">Confirmed</Badge>\n            )}\n            {meetingLink && (\n              <Button size=\"sm\" asChild>\n                <a href={meetingLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                  <ExternalLink className=\"mr-1\" size={14} />\n                  Join\n                </a>\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Calendar Meetings View Component\nfunction CalendarMeetingsView({ meetings, loading }) {\n  const [filterDate, setFilterDate] = useState(\"\");\n  const [filterSalesRep, setFilterSalesRep] = useState(\"\");\n\n  const filteredMeetings = meetings.filter((meeting) => {\n    const matchesDate =\n      !filterDate ||\n      new Date(meeting.start?.dateTime || meeting.start?.date)\n        .toDateString()\n        .includes(filterDate);\n    const matchesSalesRep =\n      !filterSalesRep ||\n      meeting.organizer?.email\n        ?.toLowerCase()\n        .includes(filterSalesRep.toLowerCase()) ||\n      meeting.summary?.toLowerCase().includes(filterSalesRep.toLowerCase());\n\n    return matchesDate && matchesSalesRep;\n  });\n\n  const groupedMeetings = filteredMeetings.reduce((groups, meeting) => {\n    const date = new Date(meeting.start?.dateTime || meeting.start?.date);\n    const dateKey = date.toDateString();\n\n    if (!groups[dateKey]) {\n      groups[dateKey] = [];\n    }\n    groups[dateKey].push(meeting);\n    return groups;\n  }, {});\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        {[1, 2, 3].map((i) => (\n          <div key={i} className=\"animate-pulse\">\n            <div className=\"h-20 bg-gray-200 rounded-lg\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters */}\n      <div className=\"flex gap-4\">\n        <div className=\"flex-1\">\n          <Label htmlFor=\"filter-date\">Filter by Date</Label>\n          <Input\n            id=\"filter-date\"\n            type=\"text\"\n            placeholder=\"e.g., Jan 15 or Monday\"\n            value={filterDate}\n            onChange={(e) => setFilterDate(e.target.value)}\n          />\n        </div>\n        <div className=\"flex-1\">\n          <Label htmlFor=\"filter-rep\">Filter by Sales Rep</Label>\n          <Input\n            id=\"filter-rep\"\n            type=\"text\"\n            placeholder=\"Search by name or email\"\n            value={filterSalesRep}\n            onChange={(e) => setFilterSalesRep(e.target.value)}\n          />\n        </div>\n      </div>\n\n      {/* Meetings List */}\n      {Object.keys(groupedMeetings).length === 0 ? (\n        <div className=\"text-center py-8\">\n          <CalendarDays className=\"mx-auto mb-4 text-gray-300\" size={48} />\n          <p className=\"text-gray-500\">No meetings found</p>\n          <p className=\"text-sm text-gray-400 mt-2\">\n            {filterDate || filterSalesRep\n              ? \"Try adjusting your filters\"\n              : \"No upcoming meetings scheduled\"}\n          </p>\n        </div>\n      ) : (\n        <div className=\"space-y-6\">\n          {Object.entries(groupedMeetings)\n            .sort(([a], [b]) => new Date(a) - new Date(b))\n            .map(([dateKey, dayMeetings]) => (\n              <div key={dateKey}>\n                <h3 className=\"font-semibold text-gray-900 mb-3 pb-2 border-b\">\n                  {new Date(dateKey).toLocaleDateString([], {\n                    weekday: \"long\",\n                    year: \"numeric\",\n                    month: \"long\",\n                    day: \"numeric\",\n                  })}\n                </h3>\n                <div className=\"space-y-3\">\n                  {dayMeetings\n                    .sort(\n                      (a, b) =>\n                        new Date(a.start?.dateTime || a.start?.date) -\n                        new Date(b.start?.dateTime || b.start?.date),\n                    )\n                    .map((meeting) => (\n                      <MeetingCard key={meeting.id} meeting={meeting} />\n                    ))}\n                </div>\n              </div>\n            ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":83291},"client/src/pages/dm-invite-landing.jsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport {\n  CheckCircle,\n  Users,\n  Calendar,\n  Clock,\n  Handshake,\n  ArrowRight,\n  AlertTriangle,\n  Loader2,\n  Shield,\n  Star,\n  TrendingUp,\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function DMInviteLanding() {\n  const [, params] = useRoute(\"/invite/:token\");\n  const [, setLocation] = useLocation();\n  const [invitation, setInvitation] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [accepting, setAccepting] = useState(false);\n\n  const token = params?.token;\n\n  useEffect(() => {\n    if (!token) {\n      setError(\"Invalid invitation link\");\n      setLoading(false);\n      return;\n    }\n\n    validateInvitation();\n  }, [token]);\n\n  const validateInvitation = async () => {\n    try {\n      setLoading(true);\n      const response = await apiRequest(`/api/invitations/validate/${token}`);\n\n      if (response.valid) {\n        setInvitation(response.invitation);\n      } else {\n        setError(response.message);\n      }\n    } catch (error) {\n      setError(\n        \"Failed to validate invitation. Please check the link and try again.\",\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAcceptInvitation = async () => {\n    try {\n      setAccepting(true);\n\n      // Update invitation status\n      await apiRequest(`/api/invitations/${invitation.id}/status`, {\n        method: \"PATCH\",\n        body: JSON.stringify({ status: \"accepted\" }),\n      });\n\n      // Store invitation context for signup flow\n      sessionStorage.setItem(\n        \"invitationContext\",\n        JSON.stringify({\n          invitationId: invitation.id,\n          salesRepId: invitation.salesRepId,\n          invitedByEmail: invitation.salesRepEmail,\n          invitedByName: invitation.salesRepName,\n        }),\n      );\n\n      // Redirect to onboarding flow (T&C → Calendar → Dashboard)\n      setLocation(\"/signup/decision-maker/personal-info\");\n    } catch (error) {\n      setError(\"Failed to accept invitation. Please try again.\");\n    } finally {\n      setAccepting(false);\n    }\n  };\n\n  const handleDeclineInvitation = async () => {\n    try {\n      // Update invitation status\n      await apiRequest(`/api/invitations/${invitation.id}/status`, {\n        method: \"PATCH\",\n        body: JSON.stringify({ status: \"declined\" }),\n      });\n\n      // Show decline message and redirect\n      setError(\"You have declined this invitation.\");\n      setTimeout(() => {\n        setLocation(\"/\");\n      }, 3000);\n    } catch (error) {\n      setError(\"Failed to decline invitation. Please try again.\");\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4 text-blue-600\" />\n            <p className=\"text-gray-600\">Validating your invitation...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-red-50 to-pink-100 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-red-700\">\n              <AlertTriangle className=\"mr-2\" size={24} />\n              Invitation Error\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Alert className=\"border-red-200 bg-red-50\">\n              <AlertDescription className=\"text-red-700\">\n                {error}\n              </AlertDescription>\n            </Alert>\n            <div className=\"mt-6 text-center\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setLocation(\"/\")}\n                className=\"border-red-200 text-red-700 hover:bg-red-50\"\n              >\n                Return to Home\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Invitation Card */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"shadow-xl border-0 bg-white\">\n              <CardHeader className=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-t-lg\">\n                <CardTitle className=\"text-2xl font-bold flex items-center\">\n                  <Users className=\"mr-3\" size={28} />\n                  You're Invited to Join Naeborly!\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-8\">\n                {/* Invitation Details */}\n                <div className=\"mb-8\">\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <h2 className=\"text-xl font-semibold text-gray-900\">\n                      Hello {invitation?.decisionMakerName}!\n                    </h2>\n                    <Badge className=\"bg-blue-100 text-blue-700 border border-blue-200 px-3 py-1 text-sm font-semibold\">\n                      DECISION MAKER\n                    </Badge>\n                  </div>\n\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n                    <div className=\"flex items-center mb-2\">\n                      <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                        <Users className=\"text-blue-600\" size={20} />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-900\">\n                          <span className=\"text-blue-600\">\n                            {invitation?.salesRepName}\n                          </span>{\" \"}\n                          from{\" \"}\n                          <span className=\"font-semibold\">\n                            {invitation?.salesRepCompany}\n                          </span>\n                        </p>\n                        <p className=\"text-sm text-gray-600\">\n                          has invited you to connect on our professional\n                          networking platform\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-6\">\n                    <h3 className=\"font-semibold text-gray-900 text-lg\">\n                      What happens when you join:\n                    </h3>\n\n                    <div className=\"grid gap-4\">\n                      <div className=\"flex items-start\">\n                        <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-3 mt-1\">\n                          <CheckCircle className=\"text-green-600\" size={16} />\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">\n                            Schedule Professional Calls\n                          </h4>\n                          <p className=\"text-sm text-gray-600\">\n                            Connect with verified sales representatives for\n                            meaningful business conversations\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-start\">\n                        <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mr-3 mt-1\">\n                          <Calendar className=\"text-purple-600\" size={16} />\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">\n                            Calendar Integration\n                          </h4>\n                          <p className=\"text-sm text-gray-600\">\n                            Seamlessly sync with Google Calendar for easy\n                            scheduling and reminders\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-start\">\n                        <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3 mt-1\">\n                          <Shield className=\"text-blue-600\" size={16} />\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">\n                            Quality Assurance\n                          </h4>\n                          <p className=\"text-sm text-gray-600\">\n                            Rate and provide feedback to maintain high-quality\n                            interactions\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* What Happens If You Don't Participate */}\n                    <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4 mt-6\">\n                      <h4 className=\"font-semibold text-amber-900 text-lg mb-3\">\n                        What Happens If You Don't Participate:\n                      </h4>\n                      <div className=\"space-y-3 text-sm text-amber-800\">\n                        <div className=\"flex items-start\">\n                          <div className=\"w-2 h-2 bg-amber-500 rounded-full mr-3 mt-2\"></div>\n                          <p>\n                            If you fail to attend, are late, or act\n                            unprofessionally for any of the 3 agreed calls, you\n                            may be flagged by participating Reps.\n                          </p>\n                        </div>\n                        <div className=\"flex items-start\">\n                          <div className=\"w-2 h-2 bg-amber-500 rounded-full mr-3 mt-2\"></div>\n                          <div>\n                            <p className=\"mb-2\">\n                              3 red flags (no-shows, repeated lateness, or\n                              inappropriate conduct) may result in:\n                            </p>\n                            <div className=\"ml-4 space-y-1\">\n                              <p className=\"flex items-center\">\n                                <span className=\"w-1.5 h-1.5 bg-amber-600 rounded-full mr-2\"></span>\n                                Suspension from the platform for 90 days\n                              </p>\n                              <p className=\"flex items-center\">\n                                <span className=\"w-1.5 h-1.5 bg-amber-600 rounded-full mr-2\"></span>\n                                Removal of your referring Rep's access for 30\n                                days\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-start\">\n                          <div className=\"w-2 h-2 bg-amber-500 rounded-full mr-3 mt-2\"></div>\n                          <p>\n                            If you're unable to attend a booked call, we expect\n                            timely rescheduling or communication through the\n                            platform.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Terms & Conditions */}\n                    <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4 mt-6\">\n                      <h4 className=\"font-semibold text-gray-900 text-lg mb-3 flex items-center\">\n                        <span className=\"mr-2\">📎</span>\n                        Terms & Conditions\n                      </h4>\n                      <div className=\"text-sm text-gray-700 space-y-3\">\n                        <p className=\"font-medium\">\n                          By accepting your invitation to Neaborly, you agree to\n                          the following:\n                        </p>\n\n                        <div className=\"space-y-4\">\n                          <div>\n                            <p className=\"font-semibold\">\n                              1. Commitment to Participation:\n                            </p>\n                            <p className=\"ml-4\">\n                              You agree to participate in three (3) voice or\n                              video-based business introduction calls via the\n                              Neaborly platform with other approved users.\n                            </p>\n                          </div>\n\n                          <div>\n                            <p className=\"font-semibold\">2. Data Retention:</p>\n                            <p className=\"ml-4\">\n                              Neaborly reserves the right to store your\n                              professional profile data (including name, role,\n                              company, and contact info) for platform quality,\n                              verification, and analytics purposes, even after\n                              participation ends.\n                            </p>\n                          </div>\n\n                          <div>\n                            <p className=\"font-semibold\">3. Usage of Data:</p>\n                            <p className=\"ml-4\">\n                              Your data may be displayed within Neaborly's\n                              closed professional ecosystem, used solely for\n                              matchmaking, reputation scoring, and analytics.\n                            </p>\n                          </div>\n\n                          <div>\n                            <p className=\"font-semibold\">\n                              4. Reputation Tracking:\n                            </p>\n                            <p className=\"ml-4\">\n                              Participation quality will be measured based on\n                              feedback submitted by Reps you meet with. This\n                              data will affect your standing in the system.\n                            </p>\n                          </div>\n\n                          <div>\n                            <p className=\"font-semibold\">\n                              5. Non-Compliance Consequences:\n                            </p>\n                            <p className=\"ml-4\">\n                              Neaborly reserves the right to suspend or restrict\n                              access to its platform for any participant (DM or\n                              Rep) who repeatedly no-shows, is unprofessional,\n                              or violates the spirit of peer-to-peer value\n                              exchange.\n                            </p>\n                          </div>\n\n                          <div>\n                            <p className=\"font-semibold\">\n                              6. Data Portability and Deletion Requests:\n                            </p>\n                            <p className=\"ml-4\">\n                              You may request a data export or permanent\n                              deletion of your profile at any time via\n                              admin@naeborly.com, which will be processed in\n                              accordance with GDPR/CCPA compliance.\n                            </p>\n                          </div>\n\n                          <div>\n                            <p className=\"font-semibold\">\n                              7. Binding Agreement:\n                            </p>\n                            <p className=\"ml-4\">\n                              By clicking \"Accept My Referral,\" you consent to\n                              these terms, and agree to act in good faith as a\n                              participant in the Neaborly platform.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"border-t pt-6\">\n                  <div className=\"flex flex-col sm:flex-row gap-4\">\n                    <Button\n                      onClick={handleAcceptInvitation}\n                      disabled={accepting}\n                      className=\"flex-1 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-semibold py-3 px-6 rounded-lg shadow-lg transition-all duration-200\"\n                    >\n                      {accepting ? (\n                        <>\n                          <Loader2 className=\"animate-spin h-5 w-5 mr-2\" />\n                          Accepting...\n                        </>\n                      ) : (\n                        <>\n                          👉 Accept My Referral & Join Neaborly\n                          <ArrowRight className=\"ml-2\" size={18} />\n                        </>\n                      )}\n                    </Button>\n\n                    <Button\n                      variant=\"outline\"\n                      onClick={handleDeclineInvitation}\n                      disabled={accepting}\n                      className=\"border-gray-300 text-gray-700 hover:bg-gray-50 py-3 px-6\"\n                    >\n                      Decline\n                    </Button>\n                  </div>\n\n                  <p className=\"text-xs text-gray-500 mt-4 text-center\">\n                    By accepting, you agree to the Terms & Conditions outlined\n                    above and commit to participating in good faith\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Benefits Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Platform Benefits */}\n            <Card className=\"shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-lg\">\n                  <Star className=\"text-yellow-500 mr-2\" size={20} />\n                  Platform Benefits\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center text-sm\">\n                  <CheckCircle className=\"text-green-500 mr-2\" size={16} />\n                  <span>Verified sales representatives</span>\n                </div>\n                <div className=\"flex items-center text-sm\">\n                  <CheckCircle className=\"text-green-500 mr-2\" size={16} />\n                  <span>Secure and professional environment</span>\n                </div>\n                <div className=\"flex items-center text-sm\">\n                  <CheckCircle className=\"text-green-500 mr-2\" size={16} />\n                  <span>Feedback and rating system</span>\n                </div>\n                <div className=\"flex items-center text-sm\">\n                  <CheckCircle className=\"text-green-500 mr-2\" size={16} />\n                  <span>Google Calendar integration</span>\n                </div>\n                <div className=\"flex items-center text-sm\">\n                  <CheckCircle className=\"text-green-500 mr-2\" size={16} />\n                  <span>Quality assurance monitoring</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Next Steps */}\n            <Card className=\"shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-lg\">\n                  <TrendingUp className=\"text-blue-500 mr-2\" size={20} />\n                  Next Steps\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center text-sm\">\n                  <div className=\"w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center mr-3 text-blue-600 font-semibold text-xs\">\n                    1\n                  </div>\n                  <span>Accept invitation</span>\n                </div>\n                <div className=\"flex items-center text-sm\">\n                  <div className=\"w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center mr-3 text-gray-600 font-semibold text-xs\">\n                    2\n                  </div>\n                  <span>Complete profile setup</span>\n                </div>\n                <div className=\"flex items-center text-sm\">\n                  <div className=\"w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center mr-3 text-gray-600 font-semibold text-xs\">\n                    3\n                  </div>\n                  <span>Connect your calendar</span>\n                </div>\n                <div className=\"flex items-center text-sm\">\n                  <div className=\"w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center mr-3 text-gray-600 font-semibold text-xs\">\n                    4\n                  </div>\n                  <span>Access your dashboard</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Time Estimate */}\n            <Card className=\"shadow-lg bg-gradient-to-br from-green-50 to-emerald-50 border-green-200\">\n              <CardContent className=\"p-4 text-center\">\n                <Clock className=\"mx-auto mb-2 text-green-600\" size={24} />\n                <p className=\"text-sm font-medium text-green-800\">\n                  Setup takes just 3-5 minutes\n                </p>\n                <p className=\"text-xs text-green-600 mt-1\">\n                  Get started with professional networking today\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22249},"client/src/pages/dm-suspension-alerts.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  AlertTriangle, \n  Clock, \n  Calendar, \n  User, \n  ArrowLeft,\n  Shield,\n  CheckCircle\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { format } from \"date-fns\";\n\nexport default function DMSuspensionAlerts() {\n  // Fetch suspicious activity for current DM\n  const { data: suspiciousActivity, isLoading } = useQuery({\n    queryKey: ['/api/decision-maker/suspicious-activity'],\n    retry: false\n  });\n\n  const getSuspensionBadge = (suspension) => {\n    if (!suspension.isActive) {\n      return <Badge variant=\"secondary\">Lifted</Badge>;\n    }\n    \n    const endDate = new Date(suspension.endDate);\n    const now = new Date();\n    \n    if (endDate < now) {\n      return <Badge variant=\"outline\">Expired</Badge>;\n    }\n    \n    const variant = suspension.type === \"90-day\" ? \"destructive\" : \"secondary\";\n    return <Badge variant={variant}>Active - {suspension.type}</Badge>;\n  };\n\n  const getDaysRemaining = (endDate) => {\n    const end = new Date(endDate);\n    const now = new Date();\n    const diffTime = end - now;\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays > 0 ? diffDays : 0;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50 pt-16\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link href=\"/decision-dashboard\">\n            <Button variant=\"ghost\" className=\"mb-4 p-0 text-gray-600 hover:text-blue-600\">\n              <ArrowLeft className=\"mr-2\" size={16} />\n              Back to Dashboard\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Sales Rep Security Alerts</h1>\n            <p className=\"text-gray-600 mt-1\">Monitor suspended sales reps in your network</p>\n          </div>\n        </div>\n\n        {!suspiciousActivity?.hasSuspiciousActivity ? (\n          <Card className=\"shadow-lg\">\n            <CardContent className=\"p-8 text-center\">\n              <Shield className=\"mx-auto h-16 w-16 text-green-500 mb-4\" />\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">All Clear</h2>\n              <p className=\"text-gray-600\">\n                No suspended sales reps have interacted with your company. Your network is secure.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* Summary Alert */}\n            <Alert className=\"border-orange-200 bg-orange-50\">\n              <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n              <AlertDescription className=\"text-orange-800\">\n                <div className=\"space-y-2\">\n                  <div className=\"font-semibold\">\n                    Security Alert: {suspiciousActivity.suspendedRepsCount} Suspended Sales Rep{suspiciousActivity.suspendedRepsCount !== 1 ? 's' : ''}\n                  </div>\n                  <div className=\"text-sm\">\n                    We've detected sales representatives who have been suspended due to poor behavior, \n                    rule violations, or red flag feedback from other decision makers.\n                  </div>\n                </div>\n              </AlertDescription>\n            </Alert>\n\n            {/* Suspended Reps List */}\n            <Card className=\"shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"text-orange-500\" size={20} />\n                  Suspended Sales Representatives\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {suspiciousActivity.suspendedReps.map((rep) => (\n                    <div key={rep.repId} className=\"border rounded-lg p-4 bg-orange-50 border-orange-200\">\n                      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <div className=\"w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center\">\n                              <User className=\"text-orange-600\" size={16} />\n                            </div>\n                            <div>\n                              <h3 className=\"font-semibold text-gray-900\">\n                                {rep.repName}\n                              </h3>\n                              <p className=\"text-sm text-gray-600\">{rep.repEmail}</p>\n                            </div>\n                            {getSuspensionBadge(rep.suspension)}\n                          </div>\n                          \n                          <div className=\"ml-13 space-y-1\">\n                            <p className=\"text-sm text-orange-700 font-medium\">\n                              Reason: {rep.suspension.suspensionReason}\n                            </p>\n                            <div className=\"flex items-center gap-4 text-xs text-gray-600\">\n                              <div className=\"flex items-center gap-1\">\n                                <Calendar size={12} />\n                                <span>\n                                  Suspended: {format(new Date(rep.suspension.startDate), 'MMM dd, yyyy')}\n                                </span>\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <Calendar size={12} />\n                                <span>\n                                  Until: {format(new Date(rep.suspension.endDate), 'MMM dd, yyyy')}\n                                </span>\n                              </div>\n                              {rep.suspension.isActive && new Date(rep.suspension.endDate) > new Date() && (\n                                <div className=\"flex items-center gap-1\">\n                                  <Clock size={12} />\n                                  <span>{getDaysRemaining(rep.suspension.endDate)} days remaining</span>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex gap-2\">\n                          <Button size=\"sm\" variant=\"outline\">\n                            View History\n                          </Button>\n                          <Button size=\"sm\" variant=\"destructive\">\n                            Block Rep\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Security Recommendations */}\n            <Card className=\"shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Shield className=\"text-blue-500\" size={20} />\n                  Security Recommendations\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start gap-3\">\n                    <CheckCircle className=\"text-green-500 mt-1\" size={16} />\n                    <div>\n                      <h4 className=\"font-medium text-gray-900\">Be Cautious with Future Interactions</h4>\n                      <p className=\"text-sm text-gray-600\">\n                        These sales reps have been flagged for poor behavior. Exercise extra caution if they attempt to schedule future meetings.\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start gap-3\">\n                    <CheckCircle className=\"text-green-500 mt-1\" size={16} />\n                    <div>\n                      <h4 className=\"font-medium text-gray-900\">Report Any Issues</h4>\n                      <p className=\"text-sm text-gray-600\">\n                        If suspended reps contact you directly or behave inappropriately, report it immediately to platform administrators.\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start gap-3\">\n                    <CheckCircle className=\"text-green-500 mt-1\" size={16} />\n                    <div>\n                      <h4 className=\"font-medium text-gray-900\">Review Your Feedback</h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Your honest feedback helps maintain platform quality and protects other decision makers.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9617},"client/src/pages/enterprise-admin.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport TeamManagement from \"@/components/TeamManagement\";\nimport CreditsOverview from \"@/components/CreditsOverview\";\nimport DMTracking from \"@/components/DMTracking\";\nimport CallActivityLog from \"@/components/CallActivityLog\";\nimport PerformanceAnalytics from \"@/components/PerformanceAnalytics\";\nimport AccountSettings from \"@/components/AccountSettings\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  Building2,\n  Users,\n  Shield,\n  TrendingUp,\n  Calendar,\n  Mail,\n  Settings,\n  UserPlus,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Activity,\n  BarChart3,\n  Globe,\n  Lock,\n  Trash2,\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\n\n// Enterprise user management schema\nconst enterpriseUserSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  role: z.enum([\"sales_rep\", \"decision_maker\"], {\n    required_error: \"Role is required\",\n  }),\n  jobTitle: z.string().optional(),\n  department: z.string().optional(),\n  password: z\n    .string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\n      \"Password must contain uppercase, lowercase, number and special character\",\n    ),\n});\n\nexport default function EnterpriseAdmin() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isCreateUserOpen, setIsCreateUserOpen] = useState(false);\n\n  // Fetch enterprise analytics\n  const { data: analytics, isLoading: analyticsLoading } = useQuery({\n    queryKey: [\"/api/enterprise-admin/analytics\"],\n    retry: false,\n  });\n\n  // Fetch company users\n  const { data: companyUsers = [], isLoading: usersLoading } = useQuery({\n    queryKey: [\"/api/enterprise-admin/users\"],\n    retry: false,\n  });\n\n  // Fetch domain settings\n  const { data: domainSettings, isLoading: domainLoading } = useQuery({\n    queryKey: [\"/api/enterprise-admin/domain-settings\"],\n    retry: false,\n  });\n\n  // Create user form\n  const form = useForm({\n    resolver: zodResolver(enterpriseUserSchema),\n    defaultValues: {\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"sales_rep\",\n      jobTitle: \"\",\n      department: \"\",\n      password: \"\",\n    },\n  });\n\n  // Create enterprise user mutation\n  const createUserMutation = useMutation({\n    mutationFn: async (userData) => {\n      return await apiRequest(\"/api/enterprise-admin/create-user\", {\n        method: \"POST\",\n        body: JSON.stringify(userData),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User Created\",\n        description: \"Enterprise user has been created successfully\",\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/enterprise-admin/users\"],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/enterprise-admin/analytics\"],\n      });\n      setIsCreateUserOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Creation Failed\",\n        description: error.message || \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update user status mutation\n  const updateUserStatusMutation = useMutation({\n    mutationFn: async ({ userId, isActive }) => {\n      return await apiRequest(`/api/enterprise-admin/users/${userId}/status`, {\n        method: \"PATCH\",\n        body: JSON.stringify({ isActive }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User Updated\",\n        description: \"User status has been updated\",\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/enterprise-admin/users\"],\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId) => {\n      return await apiRequest(`/api/enterprise-admin/users/${userId}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User Deleted\",\n        description: \"User has been permanently deleted\",\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/enterprise-admin/users\"],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/enterprise-admin/analytics\"],\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Delete Failed\",\n        description: error.message || \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data) => {\n    createUserMutation.mutate(data);\n  };\n\n  const handleStatusToggle = (userId, currentStatus) => {\n    updateUserStatusMutation.mutate({\n      userId,\n      isActive: !currentStatus,\n    });\n  };\n\n  const handleDeleteUser = (userId, userName) => {\n    if (\n      window.confirm(\n        `Are you sure you want to permanently delete ${userName}? This action cannot be undone.`,\n      )\n    ) {\n      deleteUserMutation.mutate(userId);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50 pt-16\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-6\">\n            <div className=\"flex items-center\">\n              <Building2 className=\"text-blue-600 mr-3\" size={32} />\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">\n                  Enterprise Admin\n                </h1>\n                <p className=\"text-sm text-gray-600\">\n                  Manage company users and settings\n                </p>\n              </div>\n            </div>\n            <Badge className=\"bg-blue-100 text-blue-800 border border-blue-200\">\n              <Shield className=\"mr-1 h-3 w-3\" />\n              Enterprise Access\n            </Badge>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <div className=\"w-full overflow-x-auto\">\n            <TabsList className=\"inline-flex h-10 items-center justify-start rounded-md bg-muted p-1 text-muted-foreground min-w-full lg:min-w-0\">\n              <TabsTrigger value=\"overview\" className=\"whitespace-nowrap\">\n                Overview\n              </TabsTrigger>\n              <TabsTrigger value=\"users\" className=\"whitespace-nowrap\">\n                Users\n              </TabsTrigger>\n              <TabsTrigger value=\"team\" className=\"whitespace-nowrap\">\n                Team\n              </TabsTrigger>\n              <TabsTrigger value=\"credits\" className=\"whitespace-nowrap\">\n                Credits\n              </TabsTrigger>\n              <TabsTrigger value=\"dms\" className=\"whitespace-nowrap\">\n                DM Tracking\n              </TabsTrigger>\n              <TabsTrigger value=\"calls\" className=\"whitespace-nowrap\">\n                Call Activity\n              </TabsTrigger>\n              <TabsTrigger value=\"performance\" className=\"whitespace-nowrap\">\n                Performance\n              </TabsTrigger>\n              <TabsTrigger value=\"settings\" className=\"whitespace-nowrap\">\n                Settings\n              </TabsTrigger>\n\n              <TabsTrigger value=\"analytics\" className=\"whitespace-nowrap\">\n                Analytics\n              </TabsTrigger>\n            </TabsList>\n          </div>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card className=\"border border-gray-200 shadow-lg bg-white\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-900\">\n                    Total Company Users\n                  </CardTitle>\n                  <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Users className=\"h-4 w-4 text-blue-600\" />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-gray-900\">\n                    {analytics?.totalUsers || 0}\n                  </div>\n                  <p className=\"text-xs text-gray-600\">\n                    +{analytics?.newUsersThisMonth || 0} from last month\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border border-gray-200 shadow-lg bg-white\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-900\">\n                    Active Sales Reps\n                  </CardTitle>\n                  <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-gray-900\">\n                    {analytics?.activeSalesReps || 0}\n                  </div>\n                  <p className=\"text-xs text-gray-600\">\n                    {analytics?.salesRepGrowth || 0}% growth rate\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border border-gray-200 shadow-lg bg-white\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-900\">\n                    Monthly Meetings\n                  </CardTitle>\n                  <div className=\"w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <Calendar className=\"h-4 w-4 text-purple-600\" />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-gray-900\">\n                    {analytics?.monthlyMeetings || 0}\n                  </div>\n                  <p className=\"text-xs text-gray-600\">\n                    {analytics?.meetingTrend || 0}% vs last month\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Activity className=\"text-blue-500 mr-3\" size={20} />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Dialog\n                    open={isCreateUserOpen}\n                    onOpenChange={setIsCreateUserOpen}\n                  >\n                    <DialogTrigger asChild>\n                      <Button className=\"h-16 flex flex-col items-center justify-center space-y-2\">\n                        <UserPlus size={20} />\n                        <span>Add Company User</span>\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Create Enterprise User</DialogTitle>\n                        <DialogDescription>\n                          Add a new user to your company domain\n                        </DialogDescription>\n                      </DialogHeader>\n                      <Form {...form}>\n                        <form\n                          onSubmit={form.handleSubmit(onSubmit)}\n                          className=\"space-y-4\"\n                        >\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <FormField\n                              control={form.control}\n                              name=\"firstName\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>First Name</FormLabel>\n                                  <FormControl>\n                                    <Input\n                                      {...field}\n                                      placeholder=\"Enter first name\"\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={form.control}\n                              name=\"lastName\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Last Name</FormLabel>\n                                  <FormControl>\n                                    <Input\n                                      {...field}\n                                      placeholder=\"Enter last name\"\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n\n                          <FormField\n                            control={form.control}\n                            name=\"email\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Company Email</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    {...field}\n                                    type=\"email\"\n                                    placeholder=\"Enter your company email\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"password\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Password</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    {...field}\n                                    type=\"password\"\n                                    placeholder=\"Enter secure password\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"role\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Role</FormLabel>\n                                <Select\n                                  onValueChange={field.onChange}\n                                  defaultValue={field.value}\n                                >\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select role\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"sales_rep\">\n                                      Sales Representative\n                                    </SelectItem>\n                                    <SelectItem value=\"decision_maker\">\n                                      Decision Maker\n                                    </SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <FormField\n                              control={form.control}\n                              name=\"jobTitle\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Job Title (Optional)</FormLabel>\n                                  <FormControl>\n                                    <Input\n                                      {...field}\n                                      placeholder=\"Ex. Sales Manager\"\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={form.control}\n                              name=\"department\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Department (Optional)</FormLabel>\n                                  <FormControl>\n                                    <Input\n                                      {...field}\n                                      placeholder=\"Ex. Human Resource\"\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n\n                          <Button\n                            type=\"submit\"\n                            className=\"w-full\"\n                            disabled={createUserMutation.isPending}\n                          >\n                            {createUserMutation.isPending\n                              ? \"Creating...\"\n                              : \"Create User\"}\n                          </Button>\n                        </form>\n                      </Form>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Users Tab */}\n          <TabsContent value=\"users\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Users className=\"text-green-500 mr-3\" size={20} />\n                  Company Users\n                </CardTitle>\n                <CardDescription>\n                  Manage users from your verified company domain\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {usersLoading ? (\n                  <div className=\"text-center py-8\">Loading users...</div>\n                ) : companyUsers.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {companyUsers.map((user) => (\n                      <div\n                        key={user.id}\n                        className=\"flex items-center justify-between p-4 border rounded-lg\"\n                      >\n                        <div className=\"flex items-center space-x-4\">\n                          <div\n                            className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                              user.role === \"sales_rep\"\n                                ? \"bg-blue-100 text-blue-700\"\n                                : \"bg-purple-100 text-purple-700\"\n                            }`}\n                          >\n                            {user.firstName?.charAt(0)}\n                            {user.lastName?.charAt(0)}\n                          </div>\n                          <div>\n                            <div className=\"font-medium\">\n                              {user.firstName} {user.lastName}\n                            </div>\n                            <div className=\"text-sm text-gray-600\">\n                              {user.email}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {user.jobTitle} • {user.department}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          <Badge\n                            className={\n                              user.role === \"sales_rep\"\n                                ? \"bg-blue-100 text-blue-800\"\n                                : \"bg-purple-100 text-purple-800\"\n                            }\n                          >\n                            {user.role === \"sales_rep\"\n                              ? \"Sales Rep\"\n                              : \"Decision Maker\"}\n                          </Badge>\n                          <Button\n                            variant={user.isActive ? \"destructive\" : \"default\"}\n                            size=\"sm\"\n                            onClick={() =>\n                              handleStatusToggle(user.id, user.isActive)\n                            }\n                            disabled={updateUserStatusMutation.isPending}\n                          >\n                            {user.isActive ? (\n                              <>\n                                <XCircle className=\"mr-1 h-3 w-3\" />\n                                Deactivate\n                              </>\n                            ) : (\n                              <>\n                                <CheckCircle className=\"mr-1 h-3 w-3\" />\n                                Activate\n                              </>\n                            )}\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() =>\n                              handleDeleteUser(\n                                user.id,\n                                `${user.firstName} ${user.lastName}`,\n                              )\n                            }\n                            disabled={deleteUserMutation.isPending}\n                            className=\"text-red-600 border-red-300 hover:bg-red-50\"\n                          >\n                            <Trash2 className=\"mr-1 h-3 w-3\" />\n                            Delete\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Users className=\"text-gray-300 mx-auto mb-4\" size={48} />\n                    <p className=\"text-gray-500\">No company users found</p>\n                    <p className=\"text-sm text-gray-400 mt-2\">\n                      Start by creating users for your verified domain\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Team Management Tab */}\n          <TabsContent value=\"team\">\n            <TeamManagement />\n          </TabsContent>\n\n          {/* Credits Tab */}\n          <TabsContent value=\"credits\">\n            <CreditsOverview />\n          </TabsContent>\n\n          {/* DM Tracking Tab */}\n          <TabsContent value=\"dms\">\n            <DMTracking />\n          </TabsContent>\n\n          {/* Call Activity Log Tab */}\n          <TabsContent value=\"calls\">\n            <CallActivityLog />\n          </TabsContent>\n\n          {/* Performance Analytics Tab */}\n          <TabsContent value=\"performance\">\n            <PerformanceAnalytics />\n          </TabsContent>\n\n          {/* Account Settings Tab */}\n          <TabsContent value=\"settings\">\n            <AccountSettings />\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <BarChart3 className=\"text-blue-500 mr-3\" size={20} />\n                    User Growth\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span>Sales Representatives</span>\n                      <span className=\"font-medium\">\n                        {analytics?.salesReps || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Decision Makers</span>\n                      <span className=\"font-medium\">\n                        {analytics?.decisionMakers || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Active Users</span>\n                      <span className=\"font-medium\">\n                        {analytics?.activeUsers || 0}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Activity className=\"text-green-500 mr-3\" size={20} />\n                    Platform Activity\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span>Total Invitations</span>\n                      <span className=\"font-medium\">\n                        {analytics?.totalInvitations || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Scheduled Meetings</span>\n                      <span className=\"font-medium\">\n                        {analytics?.scheduledMeetings || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Completion Rate</span>\n                      <span className=\"font-medium\">\n                        {analytics?.completionRate || 0}%\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":28263},"client/src/pages/flags-management.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Flag,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Plus,\n  Eye,\n  Filter,\n  Search,\n  X,\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function FlagsManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedFlag, setSelectedFlag] = useState(null);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [newFlag, setNewFlag] = useState({\n    dmId: \"\",\n    reason: \"\",\n    description: \"\",\n    priority: \"medium\",\n    flagType: \"behavior\",\n  });\n\n  // Fetch flags based on user role\n  const { data: flags = [], isLoading: flagsLoading } = useQuery({\n    queryKey: [\"/api/flags\", user?.role],\n    enabled: !!user?.id,\n  });\n\n  // Fetch available decision makers for flagging\n  const { data: availableDMs = [] } = useQuery({\n    queryKey: [\"/api/calendar/available-dms\"],\n    enabled: !!user?.id && user?.role === \"sales_rep\",\n  });\n\n  // Create flag mutation\n  const createFlagMutation = useMutation({\n    mutationFn: async (flagData) => {\n      return await apiRequest(\"POST\", \"/api/flags\", {\n        method: \"POST\",\n        body: JSON.stringify(flagData),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/flags\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/flags-count\"] });\n      setShowCreateDialog(false);\n      setNewFlag({\n        dmId: \"\",\n        reason: \"\",\n        description: \"\",\n        priority: \"medium\",\n        flagType: \"behavior\",\n      });\n      toast({\n        title: \"Flag Created\",\n        description: \"The flag has been successfully submitted for review.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create flag\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update flag status mutation\n  const updateFlagMutation = useMutation({\n    mutationFn: async ({ flagId, status, resolution }) => {\n      return await apiRequest(\"PUT\", `/api/flags/${flagId}`, {\n        method: \"PUT\",\n        body: JSON.stringify({ status, resolution }),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/flags\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/flags-count\"] });\n      setSelectedFlag(null);\n      toast({\n        title: \"Flag Updated\",\n        description: \"The flag status has been updated successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update flag\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case \"open\":\n        return \"bg-red-100 text-red-800\";\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"resolved\":\n        return \"bg-green-100 text-green-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getPriorityColor = (priority) => {\n    switch (priority) {\n      case \"high\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      case \"medium\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"low\":\n        return \"bg-blue-100 text-blue-800 border-blue-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const filteredFlags = flags.filter((flag) => {\n    const matchesSearch =\n      flag.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      flag.reason?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus =\n      statusFilter === \"all\" || flag.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  if (flagsLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Flag className=\"h-12 w-12 animate-pulse text-blue-600 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading flags...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 pt-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">\n                Flags Management\n              </h1>\n              <p className=\"text-gray-600 mt-1\">\n                Monitor and manage system flags\n              </p>\n            </div>\n            \n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"mb-6 flex flex-col sm:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search\n                className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\n                size={16}\n              />\n              <Input\n                placeholder=\"Search flags...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-full sm:w-[180px]\">\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"open\">Open</SelectItem>\n              <SelectItem value=\"pending\">Pending</SelectItem>\n              <SelectItem value=\"resolved\">Resolved</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Flags List */}\n        <div className=\"grid gap-4\">\n          {filteredFlags.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <Flag className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  No flags found\n                </h3>\n                <p className=\"text-gray-600\">\n                  {flags.length === 0\n                    ? \"No flags have been created yet.\"\n                    : \"No flags match your current filters.\"}\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            filteredFlags.map((flag) => (\n              <Card key={flag.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-3\">\n                        <Badge className={getStatusColor(flag.status)}>\n                          {flag.status === \"open\" && (\n                            <AlertTriangle className=\"mr-1\" size={12} />\n                          )}\n                          {flag.status === \"pending\" && (\n                            <Clock className=\"mr-1\" size={12} />\n                          )}\n                          {flag.status === \"resolved\" && (\n                            <CheckCircle className=\"mr-1\" size={12} />\n                          )}\n                          {flag.status\n                            ? flag.status.charAt(0).toUpperCase() +\n                              flag.status.slice(1)\n                            : \"Unknown\"}\n                        </Badge>\n                        <Badge\n                          variant=\"outline\"\n                          className={getPriorityColor(\n                            flag.priority || \"medium\",\n                          )}\n                        >\n                          {flag.priority\n                            ? flag.priority.charAt(0).toUpperCase() +\n                              flag.priority.slice(1)\n                            : \"Medium\"}{\" \"}\n                          Priority\n                        </Badge>\n                        <span className=\"text-sm text-gray-500\">\n                          {new Date(flag.reportedAt).toLocaleDateString()}\n                        </span>\n                      </div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">\n                        {flag.reason\n                          ? flag.reason\n                              .replace(/_/g, \" \")\n                              .replace(/\\b\\w/g, (l) => l.toUpperCase())\n                          : \"No reason provided\"}\n                      </h3>\n                      <p className=\"text-gray-600 mb-3\">{flag.description}</p>\n                      <div className=\"text-sm text-gray-500\">\n                        <p>\n                          Flagged by: {flag.flaggedByRole?.replace(\"_\", \" \")} •\n                          Target: Decision Maker\n                        </p>\n                        {flag.resolvedAt && (\n                          <p>\n                            Resolved:{\" \"}\n                            {new Date(flag.resolvedAt).toLocaleDateString()}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setSelectedFlag(flag)}\n                      >\n                        <Eye className=\"mr-1\" size={14} />\n                        View\n                      </Button>\n                      {(user?.role === \"enterprise_admin\" ||\n                        user?.role === \"super_admin\") &&\n                        flag.status !== \"resolved\" && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() =>\n                              updateFlagMutation.mutate({\n                                flagId: flag.id,\n                                status: \"resolved\",\n                                resolution: \"Resolved by admin\",\n                              })\n                            }\n                          >\n                            <CheckCircle className=\"mr-1\" size={14} />\n                            Resolve\n                          </Button>\n                        )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n\n        {/* Flag Details Dialog */}\n        {selectedFlag && (\n          <Dialog\n            open={!!selectedFlag}\n            onOpenChange={() => setSelectedFlag(null)}\n          >\n            <DialogContent className=\"sm:max-w-[500px]\">\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-2\">\n                  <Flag className=\"h-5 w-5\" />\n                  Flag Details\n                </DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"flex gap-2\">\n                  <Badge\n                    className={getStatusColor(selectedFlag.status || \"open\")}\n                  >\n                    {selectedFlag.status\n                      ? selectedFlag.status.charAt(0).toUpperCase() +\n                        selectedFlag.status.slice(1)\n                      : \"Unknown\"}\n                  </Badge>\n                  <Badge\n                    variant=\"outline\"\n                    className={getPriorityColor(\n                      selectedFlag.priority || \"medium\",\n                    )}\n                  >\n                    {selectedFlag.priority\n                      ? selectedFlag.priority.charAt(0).toUpperCase() +\n                        selectedFlag.priority.slice(1)\n                      : \"Medium\"}{\" \"}\n                    Priority\n                  </Badge>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700\">\n                    Reason\n                  </Label>\n                  <p className=\"text-gray-900\">\n                    {selectedFlag.reason\n                      ? selectedFlag.reason\n                          .replace(/_/g, \" \")\n                          .replace(/\\b\\w/g, (l) => l.toUpperCase())\n                      : \"No reason provided\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700\">\n                    Description\n                  </Label>\n                  <p className=\"text-gray-900\">{selectedFlag.description}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700\">\n                    Reported\n                  </Label>\n                  <p className=\"text-gray-900\">\n                    {new Date(selectedFlag.reportedAt).toLocaleString()}\n                  </p>\n                </div>\n                {selectedFlag.resolution && (\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700\">\n                      Resolution\n                    </Label>\n                    <p className=\"text-gray-900\">{selectedFlag.resolution}</p>\n                  </div>\n                )}\n              </div>\n              <DialogFooter>\n                <Button variant=\"outline\" onClick={() => setSelectedFlag(null)}>\n                  Close\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":14674},"client/src/pages/landing.jsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  UserCheck,\n  Calendar,\n  TrendingUp,\n  Shield,\n  Mail,\n  Users,\n  Check,\n  ArrowRight,\n  Loader2,\n} from \"lucide-react\";\n\nexport default function Landing() {\n  const { user, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Auto-redirect authenticated users to their dashboard\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      switch (user.role) {\n        case \"sales_rep\":\n          setLocation(\"/sales-dashboard\");\n          break;\n        case \"decision_maker\":\n          setLocation(\"/decision-dashboard\");\n          break;\n        case \"enterprise_admin\":\n          setLocation(\"/enterprise-admin\");\n          break;\n        case \"admin\":\n          setLocation(\"/admin\");\n          break;\n        case \"super_admin\":\n          setLocation(\"/super-admin/dashboard\");\n          break;\n        default:\n          // Stay on landing page for unknown roles\n          break;\n      }\n    }\n  }, [isAuthenticated, user, setLocation]);\n\n  // Fetch subscription plans from public endpoint\n  const {\n    data: subscriptionPlans,\n    isLoading: plansLoading,\n    error: plansError,\n  } = useQuery({\n    queryKey: [\"/api/subscription-plans\"],\n    retry: false,\n  });\n\n  const features = [\n    {\n      icon: UserCheck,\n      title: \"Verified Decision-Makers\",\n      description:\n        \"Access a growing database of verified executives and decision-makers\",\n      color: \"blue\",\n    },\n    {\n      icon: Calendar,\n      title: \"Smart Scheduling\",\n      description:\n        \"Automated 15-minute intro calls with integrated calendar booking\",\n      color: \"blue\",\n    },\n    {\n      icon: TrendingUp,\n      title: \"AI-Powered Insights\",\n      description:\n        \"Custom call preparation and performance analysis for better outcomes\",\n      color: \"green\",\n    },\n    {\n      icon: Shield,\n      title: \"Quality Assurance\",\n      description:\n        \"Traffic light validation system ensures top-quality experiences\",\n      color: \"indigo\",\n    },\n    {\n      icon: Mail,\n      title: \"Email Access\",\n      description:\n        \"Premium access to decision-maker email addresses with approval\",\n      color: \"yellow\",\n    },\n    {\n      icon: Users,\n      title: \"Pro Teams\",\n      description:\n        \"Enterprise solutions for entire sales teams with advanced guides\",\n      color: \"lightblue\",\n    },\n  ];\n\n  // Helper function to format plan data for display\n  const formatPlanForDisplay = (plan) => {\n    // Extract numeric value from price string (e.g., \"$0\" -> 0, \"$29\" -> 29)\n    const numericPrice =\n      typeof plan.price === \"string\"\n        ? parseFloat(plan.price.replace(/[^0-9.]/g, \"\"))\n        : plan.price;\n\n    const price = numericPrice === 0 ? \"Free\" : `$${numericPrice}`;\n    const period =\n      plan.billingInterval && numericPrice > 0\n        ? `/${plan.billingInterval === \"monthly\" ? \"month\" : plan.billingInterval}`\n        : numericPrice > 0\n          ? \"/month\"\n          : \"\";\n\n    // Build comprehensive features list matching signup pages\n    const baseFeatures =\n      plan.features && plan.features.length > 0 ? plan.features : [];\n\n    // Add structured features based on plan capabilities\n    const structuredFeatures = [\n      `${plan.maxInvitations || 0} decision maker connections`,\n      `${plan.maxCallCredits || 0} call credits per month`,\n      plan.prioritySupport\n        ? \"Priority support & assistance\"\n        : \"Standard email support\",\n      \"LinkedIn profile verification\",\n      \"Calendar integration & scheduling\",\n      \"Quality assurance system\",\n    ];\n\n    // Add premium features based on plan tier\n    // if (numericPrice > 0) {\n    //   structuredFeatures.push(\"Advanced analytics dashboard\");\n    //   structuredFeatures.push(\"Email notifications\");\n    //   structuredFeatures.push(\"Call recording access\");\n    // }\n\n    // if (numericPrice >= 39) {\n    //   structuredFeatures.push(\"CRM integrations\");\n    //   structuredFeatures.push(\"Executive networking events\");\n    //   structuredFeatures.push(\"Performance insights\");\n    //   structuredFeatures.push(\"Custom availability settings\");\n    // }\n\n    // if (numericPrice >= 59) {\n    //   structuredFeatures.push(\"Team management tools\");\n    //   structuredFeatures.push(\"White-label options\");\n    //   structuredFeatures.push(\"Dedicated account manager\");\n    //   structuredFeatures.push(\"Enterprise security features\");\n    // }\n\n    // Combine custom features with structured features\n    const allFeatures = [...baseFeatures, ...structuredFeatures];\n\n    return {\n      id: plan.id,\n      name: plan.name,\n      price: price,\n      period: period,\n      bestSeller: plan.bestSeller || false,\n      features: allFeatures,\n      description:\n        plan.description || `Perfect for ${plan.name.toLowerCase()} users`,\n      maxCallCredits: plan.maxCallCredits,\n      maxInvitations: plan.maxInvitations,\n      prioritySupport: plan.prioritySupport,\n      buttonText:\n        numericPrice === 0\n          ? \"Get Started\"\n          : plan.name.toLowerCase().includes(\"team\")\n            ? \"Contact Sales\"\n            : \"Get Started\",\n      buttonVariant: plan.bestSeller ? \"default\" : \"outline\",\n    };\n  };\n\n  const getIconColor = (color) => {\n    const colors = {\n      blue: \"text-blue-600\",\n      lightblue: \"text-blue-500\",\n      green: \"text-green-600\",\n      indigo: \"text-indigo-600\",\n      yellow: \"text-yellow-600\",\n    };\n    return colors[color] || \"text-blue-600\";\n  };\n\n  const getBgColor = (color) => {\n    const colors = {\n      blue: \"bg-blue-100\",\n      lightblue: \"bg-blue-50\",\n      green: \"bg-green-100\",\n      indigo: \"bg-indigo-100\",\n      yellow: \"bg-yellow-100\",\n    };\n    return colors[color] || \"bg-blue-100\";\n  };\n\n  return (\n    <div className=\"min-h-screen pt-16\">\n      {/* Hero Section */}\n      <section className=\"py-20 px-4\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h1 className=\"text-5xl md:text-6xl font-bold text-gray-900 mb-6\">\n            <span className=\"text-blue-600\">Warm Intros</span>\n            <br />\n            to Decision-Makers\n          </h1>\n          <p className=\"text-xl text-gray-600 mb-10 max-w-2xl mx-auto leading-relaxed\">\n            Connect sales reps with verified executives through a\n            community-driven platform. Contribute decision-makers, earn credits,\n            book quality intro calls.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n            <Link href=\"/signup/sales-rep/personal-info\">\n              <Button\n                size=\"lg\"\n                className=\"bg-blue-600 text-white px-8 py-4 text-lg font-semibold hover:bg-blue-700 transform hover:scale-105 transition-all shadow-lg\"\n              >\n                I'm a Sales Rep <ArrowRight className=\"ml-2\" size={20} />\n              </Button>\n            </Link>\n            <Link href=\"/signup/decision-maker/personal-info\">\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                className=\"border-2 border-blue-600 text-blue-600 px-8 py-4 text-lg font-semibold hover:bg-blue-50\"\n              >\n                I'm a Decision Maker ✓\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* How Naeberly Works */}\n      <section className=\"py-20 px-4 bg-white\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">\n              How Naeborly Works\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              A contribution-based community where quality connections drive\n              mutual success\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => {\n              const IconComponent = feature.icon;\n              return (\n                <Card\n                  key={index}\n                  className=\"hover:shadow-xl transition-all border border-gray-100\"\n                >\n                  <CardContent className=\"p-8\">\n                    <div\n                      className={`w-12 h-12 ${getBgColor(feature.color)} rounded-xl flex items-center justify-center mb-6`}\n                    >\n                      <IconComponent\n                        className={`${getIconColor(feature.color)} text-xl`}\n                        size={24}\n                      />\n                    </div>\n                    <h3 className=\"text-xl font-bold text-gray-900 mb-4\">\n                      {feature.title}\n                    </h3>\n                    <p className=\"text-gray-600 leading-relaxed\">\n                      {feature.description}\n                    </p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section className=\"py-20 px-4 bg-gradient-to-br from-blue-50 to-slate-50\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">\n              Choose Your Plan\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Flexible options for individuals and teams\n            </p>\n          </div>\n\n          {plansLoading ? (\n            <div className=\"flex justify-center items-center py-16\">\n              <Loader2 className=\"h-8 w-8 animate-spin text-blue-600\" />\n              <span className=\"ml-3 text-gray-600\">\n                Loading pricing plans...\n              </span>\n            </div>\n          ) : plansError ? (\n            <div className=\"text-center py-16\">\n              <p className=\"text-gray-500\">\n                Unable to load pricing plans. Please try again later.\n              </p>\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n              {subscriptionPlans?.map((planData, index) => {\n                const plan = formatPlanForDisplay(planData);\n                return (\n                  <Card\n                    key={plan.id || index}\n                    className={`relative ${plan.bestSeller ? \"border-2 border-blue-600 shadow-xl\" : \"border border-gray-200 shadow-lg\"}`}\n                  >\n                    {plan.bestSeller && (\n                      <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                        <span className=\"bg-blue-600 text-white px-4 py-1 rounded-full text-sm font-semibold\">\n                          Best Seller\n                        </span>\n                      </div>\n                    )}\n                    <CardContent className=\"p-8\">\n                      <div className=\"text-center mb-8\">\n                        <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                          {plan.name}\n                        </h3>\n                        <div className=\"text-4xl font-bold text-blue-600 mb-1\">\n                          {plan.price}\n                        </div>\n                        {plan.period && (\n                          <div className=\"text-gray-500\">{plan.period}</div>\n                        )}\n                        {plan.description &&\n                          plan.description !== plan.features[0] && (\n                            <p className=\"text-sm text-gray-600 mt-3 italic\">\n                              {plan.description}\n                            </p>\n                          )}\n                      </div>\n\n                      {/* Features List */}\n                      <div className=\"mb-8\">\n                        <ul className=\"space-y-3\">\n                          {plan.features.map((feature, featureIndex) => (\n                            <li\n                              key={featureIndex}\n                              className=\"flex items-start text-gray-600\"\n                            >\n                              <Check\n                                className=\"text-green-600 mr-3 mt-0.5 flex-shrink-0\"\n                                size={16}\n                              />\n                              <span className=\"text-sm leading-relaxed\">\n                                {feature}\n                              </span>\n                            </li>\n                          ))}\n                        </ul>\n\n                        {/* Additional Plan Details */}\n                        {(plan.maxCallCredits !== undefined ||\n                          plan.maxInvitations !== undefined ||\n                          plan.prioritySupport) && (\n                          <div className=\"mt-6 pt-4 border-t border-gray-100\">\n                            <div className=\"grid grid-cols-1 gap-2 text-xs text-gray-500\">\n                              {plan.maxCallCredits !== undefined && (\n                                <div className=\"flex justify-between\">\n                                  <span>Call Credits:</span>\n                                  <span className=\"font-medium\">\n                                    {plan.maxCallCredits === -1\n                                      ? \"Unlimited\"\n                                      : plan.maxCallCredits}\n                                  </span>\n                                </div>\n                              )}\n                              {plan.maxInvitations !== undefined && (\n                                <div className=\"flex justify-between\">\n                                  <span>Invitations:</span>\n                                  <span className=\"font-medium\">\n                                    {plan.maxInvitations === -1\n                                      ? \"Unlimited\"\n                                      : plan.maxInvitations}\n                                  </span>\n                                </div>\n                              )}\n                              {plan.prioritySupport && (\n                                <div className=\"flex justify-between\">\n                                  <span>Support:</span>\n                                  <span className=\"font-medium text-blue-600\">\n                                    Priority\n                                  </span>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n\n                      <Button\n                        variant={plan.buttonVariant}\n                        className={`w-full py-3 font-semibold transition-all ${\n                          plan.bestSeller\n                            ? \"bg-blue-600 hover:bg-blue-700 text-white shadow-lg hover:shadow-xl\"\n                            : plan.name.toLowerCase().includes(\"team\")\n                              ? \"border-blue-600 text-blue-600 hover:bg-blue-50\"\n                              : \"border-gray-300 text-gray-700 hover:bg-gray-50\"\n                        }`}\n                      >\n                        {plan.buttonText}\n                      </Button>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-4 bg-gradient-to-r from-blue-600 to-blue-700\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-4xl font-bold text-white mb-6\">\n            Ready to Start Connecting?\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-10\">\n            Join the community of sales professionals and decision-makers\n            building meaningful business relationships\n          </p>\n          <Link href=\"/sales-dashboard\">\n            <Button\n              size=\"lg\"\n              className=\"bg-white text-blue-600 px-8 py-4 text-lg font-bold hover:bg-gray-100 transform hover:scale-105 transition-all shadow-lg\"\n            >\n              Get Started as Sales Rep\n            </Button>\n          </Link>\n        </div>\n      </section>\n\n      {/* Footer with Admin Access */}\n      <footer className=\"bg-gray-900 text-white py-8\">\n        <div className=\"max-w-6xl mx-auto px-4 text-center\">\n          <div className=\"flex justify-center items-center space-x-8\">\n            <p className=\"text-gray-400\">\n              © 2024 Naeborly. All rights reserved.\n            </p>\n            <Link href=\"/super-admin/login\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-gray-400 hover:text-white\"\n              >\n                <Shield className=\"h-4 w-4 mr-2\" />\n                Admin Access\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":17210},"client/src/pages/login.jsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Handshake, Eye, EyeOff, ArrowLeft } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data) => {\n      return await apiRequest(\"/api/login\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: (response) => {\n      console.log(\"Login successful:\", response);\n\n      // Store JWT token first\n      if (response.token) {\n        localStorage.setItem(\"naeborly_token\", response.token);\n        // Trigger storage event for other components\n        window.dispatchEvent(new Event(\"storage\"));\n      }\n\n      toast({\n        title: \"Welcome back!\",\n        description: \"Login successful\",\n      });\n\n      // Navigate based on user role with proper delay\n      setTimeout(() => {\n        // Clear queries after token is stored\n        queryClient.clear();\n\n        if (response.user.role === \"sales_rep\") {\n          setLocation(\"/sales-dashboard\");\n        } else if (response.user.role === \"decision_maker\") {\n          setLocation(\"/decision-dashboard\");\n        } else if (response.user.role === \"enterprise_admin\") {\n          setLocation(\"/enterprise-admin\");\n        } else {\n          setLocation(\"/\");\n        }\n      }, 200);\n    },\n    onError: (error) => {\n      console.error(\"Login error:\", error);\n\n      // Handle suspended account differently\n      if (error.suspended) {\n        toast({\n          title: \"Account Suspended\",\n          description: error.message,\n          variant: \"destructive\",\n          duration: 8000, // Show longer for suspension messages\n        });\n      } else {\n        toast({\n          title: \"Login Failed\",\n          description: error.message || \"Invalid email or password\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log(\"Login form submission:\", data);\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-white flex items-center justify-center p-4 pt-20\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <Link href=\"/\" className=\"inline-flex items-center space-x-2 mb-6\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-blue-600 to-blue-700 rounded-lg flex items-center justify-center\">\n              <Handshake className=\"text-white\" size={20} />\n            </div>\n            <span className=\"text-2xl font-bold text-gray-900\">Naeborly</span>\n          </Link>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Welcome Back\n          </h1>\n          <p className=\"text-gray-600\">Sign in to your account to continue</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Sign In</CardTitle>\n            <CardDescription>\n              Enter your credentials to access your dashboard\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form\n                onSubmit={form.handleSubmit(onSubmit)}\n                className=\"space-y-4\"\n              >\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"Enter your email\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Enter your password\"\n                            {...field}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 text-center space-y-4\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <div className=\"w-full border-t border-gray-300\" />\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"px-2 bg-white text-gray-500\">\n                    Don't have an account?\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-3\">\n                <Link href=\"/signup/sales-rep/personal-info\">\n                  <Button variant=\"outline\" className=\"w-full\">\n                    Sign up as Sales Rep\n                  </Button>\n                </Link>\n                <Link href=\"/signup/decision-maker/personal-info\">\n                  <Button variant=\"outline\" className=\"w-full\">\n                    Sign up as Decision Maker\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-6 text-center\">\n          <Link href=\"/\">\n            <Button\n              variant=\"ghost\"\n              className=\"text-gray-600 hover:text-purple-600\"\n            >\n              <ArrowLeft className=\"mr-2\" size={16} />\n              Back to Home\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7997},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/payment-success.jsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, AlertCircle, Loader2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function PaymentSuccess() {\n  const [, setLocation] = useLocation();\n  const [verificationStatus, setVerificationStatus] = useState(\"loading\");\n  const [paymentInfo, setPaymentInfo] = useState(null);\n\n  useEffect(() => {\n    const verifyPayment = async () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const paymentIntentId = urlParams.get(\"payment_intent\");\n      const paymentIntentClientSecret = urlParams.get(\n        \"payment_intent_client_secret\",\n      );\n\n      if (!paymentIntentId) {\n        setVerificationStatus(\"error\");\n        return;\n      }\n\n      try {\n        const response = await apiRequest(\"/api/verify-payment\", {\n          method: \"POST\",\n          body: JSON.stringify({ paymentIntentId }),\n        });\n\n        if (response.succeeded) {\n          setPaymentInfo(response);\n          setVerificationStatus(\"success\");\n        } else {\n          setVerificationStatus(\"failed\");\n        }\n      } catch (error) {\n        console.error(\"Payment verification error:\", error);\n        setVerificationStatus(\"error\");\n      }\n    };\n\n    verifyPayment();\n  }, []);\n\n  const handleContinueToDashboard = () => {\n    // Determine which dashboard to redirect to based on user type\n    // This could be retrieved from localStorage or session storage\n    const userRole = localStorage.getItem(\"userRole\");\n\n    if (userRole === \"decision-maker\") {\n      setLocation(\"/decision-dashboard\");\n    } else if (userRole === \"sales-rep\") {\n      setLocation(\"/sales-dashboard\");\n    } else {\n      // Default redirect\n      setLocation(\"/\");\n    }\n  };\n\n  const renderContent = () => {\n    switch (verificationStatus) {\n      case \"loading\":\n        return (\n          <Card className=\"max-w-md mx-auto\">\n            <CardContent className=\"p-8\">\n              <div className=\"text-center space-y-4\">\n                <Loader2 className=\"h-12 w-12 animate-spin text-blue-600 mx-auto\" />\n                <h2 className=\"text-xl font-semibold text-gray-900\">\n                  Verifying Payment...\n                </h2>\n                <p className=\"text-gray-600\">\n                  Please wait while we confirm your payment.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case \"success\":\n        return (\n          <Card className=\"max-w-md mx-auto\">\n            <CardHeader className=\"text-center\">\n              <CheckCircle className=\"h-16 w-16 text-green-500 mx-auto mb-4\" />\n              <CardTitle className=\"text-2xl text-gray-900\">\n                Payment Successful!\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-6 pt-0\">\n              <div className=\"text-center space-y-4\">\n                <p className=\"text-gray-600\">\n                  Your subscription has been activated successfully.\n                </p>\n\n                {paymentInfo && (\n                  <div className=\"bg-gray-50 rounded-lg p-4 text-sm\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-gray-600\">Amount Paid:</span>\n                      <span className=\"font-semibold\">\n                        ${paymentInfo.amount}{\" \"}\n                        {paymentInfo.currency.toUpperCase()}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600\">Payment ID:</span>\n                      <span className=\"font-mono text-xs text-gray-500\">\n                        {paymentInfo.paymentIntentId || \"N/A\"}\n                      </span>\n                    </div>\n                  </div>\n                )}\n\n                <Button\n                  onClick={handleContinueToDashboard}\n                  className=\"w-full bg-green-600 hover:bg-green-700\"\n                >\n                  Continue to Dashboard\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case \"failed\":\n        return (\n          <Card className=\"max-w-md mx-auto\">\n            <CardHeader className=\"text-center\">\n              <AlertCircle className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n              <CardTitle className=\"text-2xl text-gray-900\">\n                Payment Failed\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-6 pt-0\">\n              <div className=\"text-center space-y-4\">\n                <p className=\"text-gray-600\">\n                  Your payment was not successful. Please try again.\n                </p>\n\n                <div className=\"space-y-2\">\n                  <Button\n                    onClick={() => setLocation(\"/\")}\n                    className=\"w-full\"\n                    variant=\"outline\"\n                  >\n                    Return to Home\n                  </Button>\n                  <Button\n                    onClick={() => window.location.reload()}\n                    className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                  >\n                    Try Again\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case \"error\":\n      default:\n        return (\n          <Card className=\"max-w-md mx-auto\">\n            <CardHeader className=\"text-center\">\n              <AlertCircle className=\"h-16 w-16 text-yellow-500 mx-auto mb-4\" />\n              <CardTitle className=\"text-2xl text-gray-900\">\n                Verification Error\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-6 pt-0\">\n              <div className=\"text-center space-y-4\">\n                <p className=\"text-gray-600\">\n                  We couldn't verify your payment status. Please contact support\n                  if you were charged.\n                </p>\n\n                <div className=\"space-y-2\">\n                  <Button\n                    onClick={() => setLocation(\"/\")}\n                    className=\"w-full\"\n                    variant=\"outline\"\n                  >\n                    Return to Home\n                  </Button>\n                  <Button\n                    onClick={() => window.location.reload()}\n                    className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                  >\n                    Check Again\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50 flex items-center justify-center p-4\">\n      {renderContent()}\n    </div>\n  );\n}\n","size_bytes":7057},"client/src/pages/post-call-evaluation.jsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  ArrowLeft,\n  User,\n  Building,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n  XCircle,\n  AlertTriangle,\n} from \"lucide-react\";\n\nexport default function PostCallEvaluation() {\n  const [, setLocation] = useLocation();\n  const [selectedExperience, setSelectedExperience] = useState(null);\n  const [comments, setComments] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get call ID from URL params\n  const urlParams = new URLSearchParams(window.location.search);\n  const callId = urlParams.get(\"callId\");\n\n  // Fetch call data\n  const { data: callData, isLoading: isLoadingCall } = useQuery({\n    queryKey: [\"/api/decision-maker/call\", callId],\n    enabled: !!callId,\n    queryFn: async () => {\n      const response = await apiRequest(`/api/decision-maker/call/${callId}`);\n      return response;\n    },\n  });\n\n  // Redirect if no call ID\n  useEffect(() => {\n    if (!callId) {\n      toast({\n        title: \"Call not found\",\n        description: \"No call ID provided. Redirecting to dashboard.\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/decision-dashboard\");\n    }\n  }, [callId, setLocation, toast]);\n\n  const experienceOptions = [\n    {\n      id: \"professional\",\n      title: \"Professional and valuable\",\n      description: \"Great experience, well prepared\",\n      icon: CheckCircle,\n      color: \"green\",\n      bgColor: \"bg-green-50\",\n      borderColor: \"border-green-200\",\n      textColor: \"text-green-700\",\n      rating: 5,\n    },\n    {\n      id: \"mediocre\",\n      title: \"Mediocre - not very relevant\",\n      description: \"Average experience, somewhat relevant\",\n      icon: AlertCircle,\n      color: \"yellow\",\n      bgColor: \"bg-yellow-50\",\n      borderColor: \"border-yellow-200\",\n      textColor: \"text-yellow-700\",\n      rating: 3,\n    },\n    {\n      id: \"poorly-prepared\",\n      title: \"Poorly prepared or off-topic\",\n      description: \"Sales experience, not well prepared\",\n      icon: XCircle,\n      color: \"orange\",\n      bgColor: \"bg-orange-50\",\n      borderColor: \"border-orange-200\",\n      textColor: \"text-orange-700\",\n      rating: 2,\n    },\n    {\n      id: \"no-show\",\n      title: \"Participant did not show up\",\n      description: \"No show without proper notice\",\n      icon: XCircle,\n      color: \"red\",\n      bgColor: \"bg-red-50\",\n      borderColor: \"border-red-200\",\n      textColor: \"text-red-700\",\n      rating: 1,\n    },\n    {\n      id: \"rude\",\n      title: \"Rude, disrespectful, or time-wasting\",\n      description: \"Unprofessional behavior or conduct\",\n      icon: AlertTriangle,\n      color: \"red\",\n      bgColor: \"bg-red-50\",\n      borderColor: \"border-red-200\",\n      textColor: \"text-red-700\",\n      rating: 1,\n    },\n  ];\n\n  // Submit evaluation mutation\n  const submitEvaluationMutation = useMutation({\n    mutationFn: async (evaluationData) => {\n      return await apiRequest(\"/api/decision-maker/evaluate-call\", {\n        method: \"POST\",\n        body: JSON.stringify(evaluationData),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Evaluation submitted\",\n        description:\n          \"Thank you for your feedback! Your evaluation has been saved.\",\n      });\n\n      // Invalidate related queries\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/decision-maker/calls\"],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/decision-maker/metrics\"],\n      });\n\n      // Navigate back to dashboard\n      setTimeout(() => {\n        setLocation(\"/decision-dashboard\");\n      }, 1000);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Submission failed\",\n        description:\n          error.message || \"Failed to submit evaluation. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = () => {\n    if (!selectedExperience) {\n      toast({\n        title: \"Please select your experience\",\n        description: \"You must select a call experience before submitting.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const selectedOption = experienceOptions.find(\n      (opt) => opt.id === selectedExperience,\n    );\n\n    const evaluationData = {\n      callId: callId,\n      experience: selectedExperience,\n      experienceTitle: selectedOption?.title,\n      rating: selectedOption?.rating || 3,\n      comments: comments.trim(),\n      evaluatedAt: new Date().toISOString(),\n    };\n\n    submitEvaluationMutation.mutate(evaluationData);\n  };\n\n  if (isLoadingCall) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50 pt-16\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"animate-spin w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!callData) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50 pt-16\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center py-8\">\n            <XCircle className=\"mx-auto h-12 w-12 text-red-400 mb-4\" />\n            <h2 className=\"text-xl font-semibold text-gray-900\">\n              Call not found\n            </h2>\n            <p className=\"text-gray-600 mt-2\">\n              The call you're trying to evaluate could not be found.\n            </p>\n            <Link href=\"/decision-dashboard\">\n              <Button className=\"mt-4\">Return to Dashboard</Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50 pt-16\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link href=\"/decision-dashboard\">\n            <Button\n              variant=\"ghost\"\n              className=\"mb-4 p-0 text-gray-600 hover:text-blue-600\"\n            >\n              <ArrowLeft className=\"mr-2\" size={16} />\n              Back to Dashboard\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">\n              Post-Call Evaluation\n            </h1>\n            <p className=\"text-gray-600 mt-1\">\n              Rate your call experience and next steps\n            </p>\n          </div>\n        </div>\n\n        {/* Call Info Card */}\n        <Card className=\"mb-8 shadow-lg border border-gray-200 bg-white\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                <User className=\"text-blue-600\" size={24} />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"text-xl font-bold text-gray-900\">\n                  {callData.salesRepName || \"Sales Representative\"}\n                </h3>\n                <div className=\"flex items-center space-x-4 mt-1\">\n                  <div className=\"flex items-center text-gray-600\">\n                    <Building className=\"mr-1\" size={14} />\n                    <span className=\"text-sm\">\n                      {callData.company || \"Company\"}\n                    </span>\n                  </div>\n                  <Badge className=\"bg-blue-100 text-blue-700 border border-blue-200 text-xs\">\n                    Sales Rep\n                  </Badge>\n                  <div className=\"flex items-center text-gray-600\">\n                    <Clock className=\"mr-1\" size={14} />\n                    <span className=\"text-sm\">\n                      {callData.scheduledAt\n                        ? new Date(callData.scheduledAt).toLocaleDateString()\n                        : \"Date TBD\"}{\" \"}\n                      • 15 min\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Evaluation Form */}\n        <Card className=\"shadow-lg border border-gray-200 bg-white\">\n          <CardContent className=\"p-8\">\n            <div className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                Call Experience\n              </h2>\n              <p className=\"text-gray-600\">How was your call experience?</p>\n            </div>\n\n            {/* Experience Options */}\n            <div className=\"space-y-4 mb-8\">\n              {experienceOptions.map((option) => {\n                const IconComponent = option.icon;\n                return (\n                  <div\n                    key={option.id}\n                    className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${\n                      selectedExperience === option.id\n                        ? `${option.bgColor} ${option.borderColor}`\n                        : \"bg-white border-gray-200 hover:border-gray-300\"\n                    }`}\n                    onClick={() => setSelectedExperience(option.id)}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <IconComponent\n                        className={\n                          selectedExperience === option.id\n                            ? option.textColor\n                            : \"text-gray-400\"\n                        }\n                        size={20}\n                      />\n                      <div>\n                        <h4\n                          className={`font-semibold ${\n                            selectedExperience === option.id\n                              ? option.textColor\n                              : \"text-gray-900\"\n                          }`}\n                        >\n                          {option.title}\n                        </h4>\n                        <p\n                          className={`text-sm ${\n                            selectedExperience === option.id\n                              ? option.textColor\n                              : \"text-gray-600\"\n                          }`}\n                        >\n                          {option.description}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Additional Comments */}\n            <div className=\"mb-8\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">\n                Additional comments (optional)\n              </h3>\n              <Textarea\n                placeholder=\"Share any additional thoughts about the call experience...\"\n                value={comments}\n                onChange={(e) => setComments(e.target.value)}\n                className=\"min-h-[100px] resize-none\"\n              />\n            </div>\n\n            {/* Submit Button */}\n            <div className=\"flex justify-end\">\n              <Button\n                onClick={handleSubmit}\n                disabled={\n                  !selectedExperience || submitEvaluationMutation.isPending\n                }\n                className=\"bg-blue-600 hover:bg-blue-700 px-8 py-3\"\n              >\n                {submitEvaluationMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                    Submitting...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className=\"mr-2\" size={16} />\n                    Submit Evaluation\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12296},"client/src/pages/profile.jsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  User,\n  Mail,\n  Building,\n  MapPin,\n  Phone,\n  Calendar,\n  Edit3,\n  Save,\n  X,\n  Shield,\n  Award,\n  Settings,\n  Camera,\n  Linkedin,\n  Globe,\n  Briefcase,\n  Users,\n  TrendingUp,\n} from \"lucide-react\";\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({});\n\n  // Fetch current user profile\n  const {\n    data: profile,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"/api/current-user\"],\n    enabled: !!user,\n  });\n\n  // Fetch user stats\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/sales-rep/profile-stats\"],\n    enabled: !!user && user.role === \"sales_rep\",\n  });\n\n  useEffect(() => {\n    if (profile && !isEditing) {\n      setFormData({\n        firstName: profile.firstName || \"\",\n        lastName: profile.lastName || \"\",\n        email: profile.email || \"\",\n        phone: profile.phone || \"\",\n        company: profile.company || \"\",\n        jobTitle: profile.jobTitle || \"\",\n        industry: profile.industry || \"\",\n        companySize: profile.companySize || \"\",\n        yearsInRole: profile.yearsInRole || \"\",\n        location: profile.location || \"\",\n        bio: profile.bio || \"\",\n        linkedinUrl: profile.linkedinUrl || \"\",\n        website: profile.website || \"\",\n        specialties: profile.specialties || \"\",\n        timezone: profile.timezone || \"\",\n      });\n    }\n  }, [profile, isEditing]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data) => {\n      console.log(\"Updating profile with data:\", data);\n      const token = localStorage.getItem(\"token\");\n      console.log(\n        \"Token from localStorage:\",\n        token ? \"Token exists\" : \"No token found\",\n      );\n\n      const response = await apiRequest(\"/api/current-user\", {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n      });\n\n      return response;\n    },\n    onSuccess: (data) => {\n      console.log(\"Profile update successful:\", data);\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been successfully updated.\",\n      });\n      setIsEditing(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/current-user\"] });\n    },\n    onError: (error) => {\n      console.error(\"Profile update error:\", error);\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInputChange = (field, value) => {\n    setFormData((prev) => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const handleSave = () => {\n    updateProfileMutation.mutate(formData);\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    if (profile) {\n      setFormData({\n        firstName: profile.firstName || \"\",\n        lastName: profile.lastName || \"\",\n        email: profile.email || \"\",\n        phone: profile.phone || \"\",\n        company: profile.company || \"\",\n        jobTitle: profile.jobTitle || \"\",\n        industry: profile.industry || \"\",\n        companySize: profile.companySize || \"\",\n        yearsInRole: profile.yearsInRole || \"\",\n        location: profile.location || \"\",\n        bio: profile.bio || \"\",\n        linkedinUrl: profile.linkedinUrl || \"\",\n        website: profile.website || \"\",\n        specialties: profile.specialties || \"\",\n        timezone: profile.timezone || \"\",\n      });\n    }\n  };\n\n  if (isLoading)\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-gray-200 rounded w-64\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2 space-y-6\">\n                <div className=\"bg-white rounded-lg p-6 space-y-4\">\n                  <div className=\"h-6 bg-gray-200 rounded w-48\"></div>\n                  <div className=\"space-y-3\">\n                    <div className=\"h-4 bg-gray-200 rounded\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n\n  if (error)\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <p className=\"text-red-600\">\n                Error loading profile: {error.message}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-16\">\n      <div className=\"p-6\">\n        <div className=\"max-w-4xl mx-auto space-y-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Profile</h1>\n              <p className=\"text-gray-600 mt-1\">\n                Manage your account information and preferences\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              {!isEditing ? (\n                <Button\n                  onClick={() => setIsEditing(true)}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <Edit3 className=\"mr-2\" size={16} />\n                  Edit Profile\n                </Button>\n              ) : (\n                <div className=\"flex space-x-2\">\n                  <Button\n                    onClick={handleSave}\n                    disabled={updateProfileMutation.isPending}\n                    className=\"bg-green-600 hover:bg-green-700\"\n                  >\n                    <Save className=\"mr-2\" size={16} />\n                    {updateProfileMutation.isPending\n                      ? \"Saving...\"\n                      : \"Save Changes\"}\n                  </Button>\n                  <Button onClick={handleCancel} variant=\"outline\">\n                    <X className=\"mr-2\" size={16} />\n                    Cancel\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Main Profile Information */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              {/* Personal Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <User className=\"mr-2 text-blue-600\" size={20} />\n                    Personal Information\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      {isEditing ? (\n                        <Input\n                          id=\"firstName\"\n                          value={formData.firstName}\n                          onChange={(e) =>\n                            handleInputChange(\"firstName\", e.target.value)\n                          }\n                          placeholder=\"Enter first name\"\n                        />\n                      ) : (\n                        <p className=\"mt-1 text-gray-900 font-medium\">\n                          {profile?.firstName || \"Not provided\"}\n                        </p>\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      {isEditing ? (\n                        <Input\n                          id=\"lastName\"\n                          value={formData.lastName}\n                          onChange={(e) =>\n                            handleInputChange(\"lastName\", e.target.value)\n                          }\n                          placeholder=\"Enter last name\"\n                        />\n                      ) : (\n                        <p className=\"mt-1 text-gray-900 font-medium\">\n                          {profile?.lastName || \"Not provided\"}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <div className=\"flex items-center mt-1\">\n                      <Mail className=\"mr-2 text-gray-400\" size={16} />\n                      {isEditing ? (\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          value={formData.email}\n                          onChange={(e) =>\n                            handleInputChange(\"email\", e.target.value)\n                          }\n                          placeholder=\"Enter email address\"\n                          className=\"flex-1\"\n                        />\n                      ) : (\n                        <p className=\"text-gray-900 font-medium\">\n                          {profile?.email || \"Not provided\"}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <div className=\"flex items-center mt-1\">\n                      <Phone className=\"mr-2 text-gray-400\" size={16} />\n                      {isEditing ? (\n                        <Input\n                          id=\"phone\"\n                          value={formData.phone}\n                          onChange={(e) =>\n                            handleInputChange(\"phone\", e.target.value)\n                          }\n                          placeholder=\"Enter phone number\"\n                          className=\"flex-1\"\n                        />\n                      ) : (\n                        <p className=\"text-gray-900 font-medium\">\n                          {profile?.phone || \"Not provided\"}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"location\">Location</Label>\n                    <div className=\"flex items-center mt-1\">\n                      <MapPin className=\"mr-2 text-gray-400\" size={16} />\n                      {isEditing ? (\n                        <Input\n                          id=\"location\"\n                          value={formData.location}\n                          onChange={(e) =>\n                            handleInputChange(\"location\", e.target.value)\n                          }\n                          placeholder=\"Enter your location\"\n                          className=\"flex-1\"\n                        />\n                      ) : (\n                        <p className=\"text-gray-900 font-medium\">\n                          {profile?.location || \"Not provided\"}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"bio\">Bio</Label>\n                    {isEditing ? (\n                      <Textarea\n                        id=\"bio\"\n                        value={formData.bio}\n                        onChange={(e) =>\n                          handleInputChange(\"bio\", e.target.value)\n                        }\n                        placeholder=\"Tell us about yourself\"\n                        rows={3}\n                      />\n                    ) : (\n                      <p className=\"mt-1 text-gray-700\">\n                        {profile?.bio || \"No bio provided\"}\n                      </p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Professional Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Briefcase className=\"mr-2 text-blue-600\" size={20} />\n                    Professional Information\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"company\">Company</Label>\n                      <div className=\"flex items-center mt-1\">\n                        <Building className=\"mr-2 text-gray-400\" size={16} />\n                        {isEditing ? (\n                          <Input\n                            id=\"company\"\n                            value={formData.company}\n                            onChange={(e) =>\n                              handleInputChange(\"company\", e.target.value)\n                            }\n                            placeholder=\"Enter company name\"\n                            className=\"flex-1\"\n                          />\n                        ) : (\n                          <p className=\"text-gray-900 font-medium\">\n                            {profile?.company || \"Not provided\"}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"jobTitle\">Job Title</Label>\n                      {isEditing ? (\n                        <Input\n                          id=\"jobTitle\"\n                          value={formData.jobTitle}\n                          onChange={(e) =>\n                            handleInputChange(\"jobTitle\", e.target.value)\n                          }\n                          placeholder=\"Enter job title\"\n                        />\n                      ) : (\n                        <p className=\"mt-1 text-gray-900 font-medium\">\n                          {profile?.jobTitle || \"Not provided\"}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"industry\">Industry</Label>\n                      {isEditing ? (\n                        <Select\n                          value={formData.industry}\n                          onValueChange={(value) =>\n                            handleInputChange(\"industry\", value)\n                          }\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select industry\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"technology\">\n                              Technology\n                            </SelectItem>\n                            <SelectItem value=\"healthcare\">\n                              Healthcare\n                            </SelectItem>\n                            <SelectItem value=\"finance\">Finance</SelectItem>\n                            <SelectItem value=\"education\">Education</SelectItem>\n                            <SelectItem value=\"retail\">Retail</SelectItem>\n                            <SelectItem value=\"manufacturing\">\n                              Manufacturing\n                            </SelectItem>\n                            <SelectItem value=\"consulting\">\n                              Consulting\n                            </SelectItem>\n                            <SelectItem value=\"other\">Other</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      ) : (\n                        <p className=\"mt-1 text-gray-900 font-medium capitalize\">\n                          {profile?.industry || \"Not provided\"}\n                        </p>\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"companySize\">Company Size</Label>\n                      {isEditing ? (\n                        <Select\n                          value={formData.companySize}\n                          onValueChange={(value) =>\n                            handleInputChange(\"companySize\", value)\n                          }\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select company size\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"1-10\">1-10 employees</SelectItem>\n                            <SelectItem value=\"11-50\">\n                              11-50 employees\n                            </SelectItem>\n                            <SelectItem value=\"51-200\">\n                              51-200 employees\n                            </SelectItem>\n                            <SelectItem value=\"201-500\">\n                              201-500 employees\n                            </SelectItem>\n                            <SelectItem value=\"501-1000\">\n                              501-1000 employees\n                            </SelectItem>\n                            <SelectItem value=\"1000+\">\n                              1000+ employees\n                            </SelectItem>\n                          </SelectContent>\n                        </Select>\n                      ) : (\n                        <p className=\"mt-1 text-gray-900 font-medium\">\n                          {profile?.companySize || \"Not provided\"}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"yearsInRole\">Years in Current Role</Label>\n                    {isEditing ? (\n                      <Select\n                        value={formData.yearsInRole}\n                        onValueChange={(value) =>\n                          handleInputChange(\"yearsInRole\", value)\n                        }\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select experience\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"less-than-1\">\n                            Less than 1 year\n                          </SelectItem>\n                          <SelectItem value=\"1-2\">1-2 years</SelectItem>\n                          <SelectItem value=\"3-5\">3-5 years</SelectItem>\n                          <SelectItem value=\"6-10\">6-10 years</SelectItem>\n                          <SelectItem value=\"more-than-10\">\n                            More than 10 years\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                    ) : (\n                      <p className=\"mt-1 text-gray-900 font-medium\">\n                        {profile?.yearsInRole || \"Not provided\"}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"specialties\">Specialties</Label>\n                    {isEditing ? (\n                      <Textarea\n                        id=\"specialties\"\n                        value={formData.specialties}\n                        onChange={(e) =>\n                          handleInputChange(\"specialties\", e.target.value)\n                        }\n                        placeholder=\"Enter your areas of expertise\"\n                        rows={2}\n                      />\n                    ) : (\n                      <p className=\"mt-1 text-gray-700\">\n                        {profile?.specialties || \"No specialties listed\"}\n                      </p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Social Links */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Globe className=\"mr-2 text-blue-600\" size={20} />\n                    Social Links\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"linkedinUrl\">LinkedIn Profile</Label>\n                    <div className=\"flex items-center mt-1\">\n                      <Linkedin className=\"mr-2 text-gray-400\" size={16} />\n                      {isEditing ? (\n                        <Input\n                          id=\"linkedinUrl\"\n                          value={formData.linkedinUrl}\n                          onChange={(e) =>\n                            handleInputChange(\"linkedinUrl\", e.target.value)\n                          }\n                          placeholder=\"https://linkedin.com/in/username\"\n                          className=\"flex-1\"\n                        />\n                      ) : (\n                        <p className=\"text-gray-900 font-medium\">\n                          {profile?.linkedinUrl || \"Not provided\"}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"website\">Website</Label>\n                    <div className=\"flex items-center mt-1\">\n                      <Globe className=\"mr-2 text-gray-400\" size={16} />\n                      {isEditing ? (\n                        <Input\n                          id=\"website\"\n                          value={formData.website}\n                          onChange={(e) =>\n                            handleInputChange(\"website\", e.target.value)\n                          }\n                          placeholder=\"https://yourwebsite.com\"\n                          className=\"flex-1\"\n                        />\n                      ) : (\n                        <p className=\"text-gray-900 font-medium\">\n                          {profile?.website || \"Not provided\"}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Sidebar */}\n            <div className=\"space-y-6\">\n              {/* Profile Summary */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Shield className=\"mr-2 text-blue-600\" size={20} />\n                    Account Status\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"text-center\">\n                    <div className=\"w-20 h-20 bg-gradient-to-br from-blue-100 to-purple-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                      <User className=\"w-10 h-10 text-blue-600\" />\n                    </div>\n                    <h3 className=\"font-semibold text-gray-900\">\n                      {profile?.firstName} {profile?.lastName}\n                    </h3>\n                    <p className=\"text-sm text-gray-600\">{profile?.jobTitle}</p>\n                    <Badge className=\"mt-2 bg-green-100 text-green-800 capitalize\">\n                      {profile?.role?.replace(\"_\", \" \")}\n                    </Badge>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-600\">Member since:</span>\n                      <span className=\"font-medium\">\n                        {profile?.createdAt\n                          ? new Date(profile.createdAt).toLocaleDateString()\n                          : \"N/A\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-600\">Package:</span>\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {profile?.packageType || \"Standard\"}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-600\">Status:</span>\n                      <Badge className=\"bg-green-100 text-green-800\">\n                        {profile?.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Performance Stats (for sales reps) */}\n              {user?.role === \"sales_rep\" && stats && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <TrendingUp className=\"mr-2 text-blue-600\" size={20} />\n                      Performance Stats\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"text-center\">\n                        <p className=\"text-2xl font-bold text-blue-600\">\n                          {stats.totalCalls || 0}\n                        </p>\n                        <p className=\"text-xs text-gray-600\">Total Calls</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <p className=\"text-2xl font-bold text-green-600\">\n                          {stats.successRate || 0}%\n                        </p>\n                        <p className=\"text-xs text-gray-600\">Success Rate</p>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600\">Credits Used:</span>\n                        <span className=\"font-medium\">\n                          {stats.creditsUsed || 0}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600\">DMs Invited:</span>\n                        <span className=\"font-medium\">\n                          {stats.dmsInvited || 0}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600\">Meetings Booked:</span>\n                        <span className=\"font-medium\">\n                          {stats.meetingsBooked || 0}\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Quick Actions */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Settings className=\"mr-2 text-blue-600\" size={20} />\n                    Quick Actions\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full justify-start\"\n                    onClick={() => (window.location.href = \"/sales-dashboard\")}\n                  >\n                    <Users className=\"mr-2\" size={16} />\n                    Back to Dashboard\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full justify-start\"\n                    onClick={() => (window.location.href = \"/analytics\")}\n                  >\n                    <TrendingUp className=\"mr-2\" size={16} />\n                    View Analytics\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full justify-start\"\n                    onClick={() => (window.location.href = \"/calendar\")}\n                  >\n                    <Calendar className=\"mr-2\" size={16} />\n                    Schedule Meetings\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":29252},"client/src/pages/rep-suspension-management.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  AlertTriangle,\n  Clock,\n  Calendar,\n  User,\n  Search,\n  Filter,\n  Download,\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function RepSuspensionManagement() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n\n  // Fetch all suspended reps (admin only)\n  const { data: suspensions = [], isLoading } = useQuery({\n    queryKey: [\"/api/admin/rep-suspensions\"],\n    retry: false,\n  });\n\n  const filteredSuspensions = suspensions.filter((suspension) => {\n    const matchesSearch =\n      suspension.repName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      suspension.repEmail?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesFilter =\n      filterStatus === \"all\" ||\n      (filterStatus === \"active\" && suspension.isActive) ||\n      (filterStatus === \"expired\" && !suspension.isActive);\n    return matchesSearch && matchesFilter;\n  });\n\n  const getSuspensionStatusBadge = (suspension) => {\n    if (!suspension.isActive) {\n      return <Badge variant=\"secondary\">Lifted</Badge>;\n    }\n\n    const endDate = new Date(suspension.endDate);\n    const now = new Date();\n\n    if (endDate < now) {\n      return <Badge variant=\"outline\">Expired</Badge>;\n    }\n\n    const variant = suspension.type === \"90-day\" ? \"destructive\" : \"secondary\";\n    return <Badge variant={variant}>Active</Badge>;\n  };\n\n  const getDaysRemaining = (endDate) => {\n    const end = new Date(endDate);\n    const now = new Date();\n    const diffTime = end - now;\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays > 0 ? diffDays : 0;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">\n                Rep Suspension Management\n              </h1>\n              <p className=\"text-gray-600 mt-1\">\n                Monitor and manage sales rep suspensions\n              </p>\n            </div>\n            <div className=\"flex gap-3\">\n              <Button variant=\"outline\">\n                <Download className=\"mr-2\" size={16} />\n                Export Report\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">\n                    Active Suspensions\n                  </p>\n                  <p className=\"text-2xl font-bold text-red-600\">\n                    {\n                      suspensions.filter(\n                        (s) => s.isActive && new Date(s.endDate) > new Date(),\n                      ).length\n                    }\n                  </p>\n                </div>\n                <AlertTriangle className=\"h-8 w-8 text-red-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">\n                    90-Day Suspensions\n                  </p>\n                  <p className=\"text-2xl font-bold text-orange-600\">\n                    {suspensions.filter((s) => s.type === \"90-day\").length}\n                  </p>\n                </div>\n                <Clock className=\"h-8 w-8 text-orange-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">\n                    Total Suspensions\n                  </p>\n                  <p className=\"text-2xl font-bold text-blue-600\">\n                    {suspensions.length}\n                  </p>\n                </div>\n                <User className=\"h-8 w-8 text-blue-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search\n                    className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\n                    size={16}\n                  />\n                  <Input\n                    placeholder=\"Search by rep name or email...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant={filterStatus === \"all\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setFilterStatus(\"all\")}\n                >\n                  All\n                </Button>\n                <Button\n                  variant={filterStatus === \"active\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setFilterStatus(\"active\")}\n                >\n                  Active\n                </Button>\n                <Button\n                  variant={filterStatus === \"expired\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setFilterStatus(\"expired\")}\n                >\n                  Lifted/Expired\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Suspensions List */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertTriangle size={20} />\n              Rep Suspensions\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {filteredSuspensions.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                No suspensions found matching your criteria.\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredSuspensions.map((suspension) => (\n                  <div\n                    key={suspension._id}\n                    className=\"border rounded-lg p-4 hover:bg-gray-50\"\n                  >\n                    <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <h3 className=\"font-semibold text-gray-900\">\n                            {suspension.repName || \"Sales Rep\"}\n                          </h3>\n                          {getSuspensionStatusBadge(suspension)}\n                          <Badge\n                            variant=\"outline\"\n                            className={\n                              suspension.type === \"90-day\"\n                                ? \"border-red-500 text-red-700\"\n                                : \"border-orange-500 text-orange-700\"\n                            }\n                          >\n                            {suspension.type}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-600 mb-1\">\n                          {suspension.suspensionReason}\n                        </p>\n                        <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                          <div className=\"flex items-center gap-1\">\n                            <Calendar size={12} />\n                            <span>\n                              {format(\n                                new Date(suspension.startDate),\n                                \"MMM dd, yyyy\",\n                              )}{\" \"}\n                              -{\" \"}\n                              {format(\n                                new Date(suspension.endDate),\n                                \"MMM dd, yyyy\",\n                              )}\n                            </span>\n                          </div>\n                          {suspension.isActive &&\n                            new Date(suspension.endDate) > new Date() && (\n                              <div className=\"flex items-center gap-1\">\n                                <Clock size={12} />\n                                <span>\n                                  {getDaysRemaining(suspension.endDate)} days\n                                  remaining\n                                </span>\n                              </div>\n                            )}\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button size=\"sm\" variant=\"outline\">\n                          View Details\n                        </Button>\n                        {suspension.isActive && (\n                          <Button size=\"sm\" variant=\"destructive\">\n                            Lift Suspension\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10430},"client/src/pages/sales-dashboard.jsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Phone,\n  Users,\n  Calendar,\n  Plus,\n  TrendingUp,\n  Lock,\n  CalendarPlus,\n  Loader2,\n  User,\n  Clock,\n  Menu,\n  Search,\n  MapPin,\n  Star,\n  Crown,\n  BarChart3,\n  Settings,\n  HelpCircle,\n  Lightbulb,\n  CheckCircle,\n  RefreshCw,\n  Eye,\n  AlertCircle,\n  ExternalLink,\n  Copy,\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CalendarBooking from \"@/components/CalendarBooking\";\nimport FlagsBadge from \"@/components/FlagsBadge\";\nimport SuspensionAlert from \"@/components/SuspensionAlert\";\nimport BookingModal from \"@/components/BookingModal\";\nimport EmailAddonModal from \"@/components/EmailAddonModal\";\n\n// Initialize Stripe\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\n// Helper function to format time remaining with days, hours, and minutes\nconst formatTimeRemaining = (milliseconds) => {\n  const totalMinutes = Math.ceil(milliseconds / (1000 * 60));\n  const days = Math.floor(totalMinutes / (24 * 60));\n  const hours = Math.floor((totalMinutes % (24 * 60)) / 60);\n  const minutes = totalMinutes % 60;\n  \n  if (days > 0) {\n    return `${days}d ${hours}h ${minutes}m`;\n  } else if (hours > 0) {\n    return `${hours}h ${minutes}m`;\n  } else {\n    return `${minutes}m`;\n  }\n};\n\nexport default function SalesDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Booking modal state\n  const [isBookingModalOpen, setIsBookingModalOpen] = useState(false);\n  const [selectedDecisionMaker, setSelectedDecisionMaker] = useState(null);\n\n  // Email addon modal state\n  const [isAddonModalOpen, setIsAddonModalOpen] = useState(false);\n  const [addonClientSecret, setAddonClientSecret] = useState(null);\n\n  // Filter state\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedIndustry, setSelectedIndustry] = useState(\"\");\n  const [selectedCompanySize, setSelectedCompanySize] = useState(\"\");\n  const [selectedRating, setSelectedRating] = useState(\"\");\n  const [selectedEngagement, setSelectedEngagement] = useState(\"\");\n\n  // Fetch sales rep's invitations\n  const { data: invitations = [], isLoading: invitationsLoading } = useQuery({\n    queryKey: [\"/api/sales-rep/invitations\"],\n    enabled: !!user?.id,\n  });\n\n  // Fetch sales rep's calls\n  const { data: calls = [], isLoading: callsLoading } = useQuery({\n    queryKey: [\"/api/sales-rep/calls\"],\n    enabled: !!user?.id,\n  });\n\n  // Fetch sales rep's metrics\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/sales-rep/metrics\"],\n    enabled: !!user?.id,\n  });\n\n  // Fetch suspension status\n  const { data: suspensionStatus } = useQuery({\n    queryKey: [\"/api/sales-rep/suspension-status\"],\n    retry: false,\n  });\n\n  // Calendar integration queries\n  const { data: calendarStatus, isLoading: calendarStatusLoading } = useQuery({\n    queryKey: [\"/api/calendar/status\"],\n    retry: false,\n  });\n\n  const { data: upcomingMeetings, isLoading: upcomingMeetingsLoading } =\n    useQuery({\n      queryKey: [\"/api/calendar/upcoming-meetings\"],\n      enabled: calendarStatus?.connected,\n      retry: false,\n    });\n\n  // New queries for credit system\n  const { data: creditsData, isLoading: creditsLoading } = useQuery({\n    queryKey: [\"/api/sales-rep/credits\"],\n  });\n\n  const { data: databaseAccess, isLoading: databaseAccessLoading } = useQuery({\n    queryKey: [\"/api/sales-rep/database-access\"],\n  });\n\n  const hasAccess = databaseAccess?.hasAccess;\n\n  const {\n    data: gatedDMs,\n    isLoading: gatedDMsLoading,\n    error: gatedDMsError,\n  } = useQuery({\n    queryKey: [\"/api/sales-rep/available-dms-gated\"],\n    enabled: hasAccess,\n    retry: 3,\n    refetchOnWindowFocus: false,\n  });\n\n  // Debug logging\n  console.log(\"Gated DMs Debug:\", {\n    hasAccess,\n    gatedDMsLoading,\n    gatedDMs,\n    gatedDMsError,\n    dmsLength: gatedDMs?.dms?.length,\n  });\n\n  // Check URL parameters for calendar connection status\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const calendarStatus = urlParams.get(\"calendar\");\n    const reason = urlParams.get(\"reason\");\n\n    if (calendarStatus === \"connected\") {\n      toast({\n        title: \"Calendar Connected!\",\n        description: \"Google Calendar has been connected successfully.\",\n      });\n      // Refresh calendar status\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/status\"] });\n      // Clean up URL\n      window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (calendarStatus === \"error\") {\n      let errorMessage;\n      let errorTitle = \"Calendar Connection Failed\";\n\n      if (reason === \"token_exchange_failed\") {\n        errorTitle = \"Google Cloud Console Configuration Required\";\n        errorMessage =\n          \"Google is rejecting the OAuth connection with 'invalid_client' error. This means the Google Cloud Console is not configured correctly. Click the setup guide button (?) next to the Connect button for step-by-step instructions.\";\n      } else if (reason === \"missing_params\") {\n        errorMessage = \"Missing authorization parameters\";\n      } else if (reason === \"google_oauth_error\") {\n        errorMessage = \"Google OAuth returned an error during authorization\";\n      } else if (reason === \"missing_credentials\") {\n        errorMessage = \"Google OAuth credentials are not configured\";\n      } else {\n        errorMessage = \"There was an error connecting to Google Calendar\";\n      }\n\n      toast({\n        title: errorTitle,\n        description: errorMessage,\n        variant: \"destructive\",\n        duration: 10000,\n      });\n      // Clean up URL\n      window.history.replaceState({}, document.title, window.location.pathname);\n    }\n  }, [queryClient, toast]);\n\n  // Force show DM list for debugging\n  const shouldShowDMList = true;\n\n  // Calendar integration toggle state\n  const [showCalendarModal, setShowCalendarModal] = useState(false);\n  const [showSetupGuide, setShowSetupGuide] = useState(false);\n\n  // Calendar toggle mutation\n  const calendarToggleMutation = useMutation({\n    mutationFn: async (enabled) => {\n      return apiRequest(\"/api/current-user\", {\n        method: \"PUT\",\n        body: JSON.stringify({ calendarIntegrationEnabled: enabled }),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"/api/current-user\"]);\n      queryClient.invalidateQueries([\"/api/calendar/status\"]);\n      queryClient.invalidateQueries([\"/api/calendar/upcoming-meetings\"]);\n      toast({\n        title: \"Success\",\n        description: \"Calendar integration updated successfully\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Calendar toggle error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update calendar integration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Calculate total credits from API data\n  const totalCredits =\n    creditsData?.credits?.reduce(\n      (sum, credit) => sum + (credit.amount || 0),\n      0,\n    ) || 0;\n\n  const simulateAcceptanceMutation = useMutation({\n    mutationFn: async () => {\n      return { success: true };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales-rep/metrics\"] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/sales-rep/invitations\"],\n      });\n      toast({\n        title: \"Database Unlocked!\",\n        description: \"You can now browse decision makers\",\n      });\n    },\n  });\n\n  const simulateOnboardingMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\n        \"/api/simulate/dm-onboarding-complete\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            dmEmail: \"mlp.yashkumar@gmail.com\",\n            repId: user?.id || user?._id,\n          }),\n        },\n      );\n      return response;\n    },\n    onSuccess: (data) => {\n      // Invalidate all relevant queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales-rep/credits\"] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/sales-rep/database-access\"],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/sales-rep/available-dms-gated\"],\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales-rep/metrics\"] });\n      toast({\n        title: \"Success!\",\n        description:\n          data.message || \"DM onboarding completed and credit awarded!\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Onboarding simulation error:\", error);\n      toast({\n        title: \"Error\",\n        description:\n          error.message || \"Failed to simulate onboarding completion\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create sample invitation mutation for testing credit system\n  const createInvitationMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"/api/create-sample-invitation\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          dmEmail: \"testdm@example.com\",\n          dmName: \"Test Decision Maker\",\n        }),\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Test Invitation Created!\",\n        description: `Visit: ${data.inviteUrl}`,\n        duration: 10000,\n      });\n      console.log(\"Invitation created:\", data);\n    },\n    onError: (error) => {\n      console.error(\"Invitation creation error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create test invitation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Test Google Calendar event creation\n  const testCalendarMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"/api/test-calendar-event\", {\n        method: \"POST\",\n        body: JSON.stringify({}),\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Test Calendar Event Created!\",\n        description: `Event ID: ${data.eventId}. Check your Google Calendar!`,\n        duration: 10000,\n      });\n      console.log(\"Calendar event created:\", data);\n    },\n    onError: (error) => {\n      console.error(\"Calendar event creation error:\", error);\n      toast({\n        title: \"Calendar Test Failed\",\n        description: error.message || \"Failed to create test calendar event\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Booking modal handlers\n  const handleOpenBookingModal = (decisionMaker) => {\n    setSelectedDecisionMaker(decisionMaker);\n    setIsBookingModalOpen(true);\n  };\n\n  const handleCloseBookingModal = () => {\n    setIsBookingModalOpen(false);\n    setSelectedDecisionMaker(null);\n  };\n\n  // Email addon purchase mutation\n  const purchaseAddonMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"/api/purchase-email-addon\", {\n        method: \"POST\",\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      setAddonClientSecret(data.clientSecret);\n      setIsAddonModalOpen(true);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Purchase Error\",\n        description: error.message || \"Failed to initiate addon purchase\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddonPurchase = () => {\n    if (user?.packageType === \"enterprise\") {\n      toast({\n        title: \"Not Available\",\n        description: \"Enterprise users already have full access to DM emails\",\n      });\n      return;\n    }\n\n    if (user?.packageType === \"free\") {\n      toast({\n        title: \"Upgrade Required\",\n        description:\n          \"Free users must upgrade to Basic or higher to purchase email addon\",\n      });\n      return;\n    }\n\n    if (user?.hasEmailAddon) {\n      toast({\n        title: \"Already Purchased\",\n        description: \"You already have email access addon\",\n      });\n      return;\n    }\n\n    purchaseAddonMutation.mutate();\n  };\n\n  const handleAddonSuccess = () => {\n    // Refresh user data to show updated addon status\n    queryClient.invalidateQueries({ queryKey: [\"/api/current-user\"] });\n    setAddonClientSecret(null);\n    setIsAddonModalOpen(false);\n  };\n\n  const handleBookingConfirm = async (bookingData) => {\n    // This is now handled by the BookingModal component directly\n    // The onConfirm prop is no longer used but kept for compatibility\n    console.log(\"Booking confirm called - now handled by modal\");\n  };\n\n  // Filter functions\n  const clearAllFilters = () => {\n    setSearchTerm(\"\");\n    setSelectedIndustry(\"\");\n    setSelectedCompanySize(\"\");\n    setSelectedRating(\"\");\n    setSelectedEngagement(\"\");\n  };\n\n  const filteredDMs = gatedDMs?.dms\n    ? gatedDMs.dms.filter((dm) => {\n        // Search term filter\n        if (searchTerm) {\n          const searchLower = searchTerm.toLowerCase();\n          const matchesSearch =\n            dm.name?.toLowerCase().includes(searchLower) ||\n            dm.company?.toLowerCase().includes(searchLower) ||\n            dm.jobTitle?.toLowerCase().includes(searchLower);\n          if (!matchesSearch) return false;\n        }\n\n        // Industry filter\n        if (selectedIndustry && selectedIndustry !== \"Industry\") {\n          if (dm.industry !== selectedIndustry) return false;\n        }\n\n        // Company size filter (mock data - would come from actual DM data)\n        if (selectedCompanySize && selectedCompanySize !== \"Company Size\") {\n          // This would be based on actual company size data\n          // For now, we'll use a mock implementation\n        }\n\n        // Rating filter (using engagement score as proxy)\n        if (selectedRating && selectedRating !== \"Rating\") {\n          const ratingThreshold =\n            parseFloat(selectedRating.replace(\"+\", \"\")) * 20; // Convert rating to percentage\n          if (dm.engagementScore < ratingThreshold) return false;\n        }\n\n        // Engagement filter\n        if (selectedEngagement && selectedEngagement !== \"Engagement\") {\n          const engagementThreshold = parseFloat(\n            selectedEngagement.replace(\"%+\", \"\"),\n          );\n          if (dm.engagementScore < engagementThreshold) return false;\n        }\n\n        return true;\n      })\n    : [];\n\n  // Get unique industries for filter dropdown\n  const availableIndustries = [\n    ...new Set(gatedDMs?.dms?.map((dm) => dm.industry).filter(Boolean)),\n  ];\n\n  const getStatusBadge = (status) => {\n    switch (status) {\n      case \"accepted\":\n        return <Badge className=\"bg-green-100 text-green-800\">Accepted</Badge>;\n      case \"pending\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Pending</Badge>;\n      case \"declined\":\n        return <Badge className=\"bg-red-100 text-red-800\">Declined</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800\">Unknown</Badge>;\n    }\n  };\n\n  const getInitials = (name) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase();\n  };\n\n  const getPackageDisplayName = (packageType, maxInvitations) => {\n    // Base package name mapping\n    const packageNames = {\n      free: \"Free\",\n      basic: \"Basic\",\n      pro: \"Pro\",\n      professional: \"Professional\",\n      premium: \"Premium\",\n      \"pro-team\": \"Pro Team\",\n      enterprise: \"Enterprise\",\n    };\n\n    // Get the base name\n    const baseName = packageNames[packageType] || \"Free\";\n\n    // Add dynamic invitation limit if available\n    const invitationLimit = maxInvitations || metrics?.maxDmInvitations || 1;\n\n    return `${baseName} • ${invitationLimit} DM/month`;\n  };\n\n  if (!user || metricsLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-12 w-12 animate-spin text-purple-600 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const databaseUnlocked = metrics?.databaseUnlocked || false;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-16\">\n      <div className=\"max-w-7xl mx-auto px-4 py-6\">\n        {/* Dashboard Header */}\n        <div className=\"mb-6\">\n          <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">\n                Sales Rep Dashboard\n              </h1>\n              <p className=\"text-gray-600 mt-1\">\n                Welcome back, {user?.firstName}!\n              </p>\n            </div>\n            <div className=\"flex flex-wrap items-center gap-2\">\n              <Badge className=\"bg-green-100 text-green-800\">\n                {getPackageDisplayName(\n                  user?.packageType,\n                  metrics?.maxDmInvitations,\n                )}\n              </Badge>\n              <Badge className=\"bg-blue-100 text-blue-800\">\n                {metrics?.standing === \"good\"\n                  ? \"Good Standing\"\n                  : \"Standing: \" + metrics?.standing}\n              </Badge>\n              <FlagsBadge />\n              <div className=\"hidden sm:flex items-center gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => (window.location.href = \"/analytics\")}\n                >\n                  <TrendingUp className=\"w-4 h-4 mr-2\" />\n                  Analytics\n                </Button>\n              </div>\n              <div className=\"sm:hidden\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Menu className=\"w-5 h-5\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Metrics Cards */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white h-32\">\n            <CardContent className=\"p-5 h-full\">\n              <div className=\"flex items-center justify-between h-full\">\n                <div className=\"flex flex-col justify-between h-full\">\n                  <p className=\"text-blue-100 text-sm font-medium\">\n                    Monthly Call Limit\n                  </p>\n                  <p className=\"text-2xl font-bold\">\n                    {gatedDMs?.repCallLimit\n                      ? `${gatedDMs.repCallLimit.totalCalls}/${gatedDMs.repCallLimit.maxCalls}`\n                      : `${metrics?.completedCalls || 0}/${gatedDMs?.acceptedDMsCount || 3}`}\n                  </p>\n                  <p className=\"text-blue-100 text-xs\">\n                    {gatedDMs?.repCallLimit?.remainingCalls !== undefined\n                      ? `${gatedDMs.repCallLimit.remainingCalls} calls remaining`\n                      : \"based on invited DMs\"}\n                  </p>\n                </div>\n                <Phone className=\"text-blue-200 w-6 h-6\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white h-32\">\n            <CardContent className=\"p-5 h-full\">\n              <div className=\"flex items-center justify-between h-full\">\n                <div className=\"flex flex-col justify-between h-full\">\n                  <p className=\"text-green-100 text-sm font-medium\">\n                    DM Invitations\n                  </p>\n                  <p className=\"text-2xl font-bold\">\n                    {metrics?.dmInvitations || 0}/\n                    {metrics?.maxDmInvitations || 1}\n                  </p>\n                </div>\n                <Users className=\"text-green-200 w-6 h-6\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"h-32\">\n            <CardContent className=\"p-5 h-full\">\n              <div className=\"flex items-center justify-between h-full\">\n                <div className=\"flex flex-col justify-between h-full\">\n                  <p className=\"text-gray-500 text-sm font-medium\">\n                    Upcoming Calls\n                  </p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {metrics?.upcomingCalls || 0}\n                  </p>\n                  <p className=\"text-xs text-gray-600\">scheduled meetings</p>\n                </div>\n                <Calendar className=\"text-gray-400 w-6 h-6\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-blue-50 to-purple-50 border-0 shadow-lg hover:shadow-xl transition-all duration-300 h-32\">\n            <CardContent className=\"p-5 h-full\">\n              <div className=\"flex items-center justify-between h-full\">\n                <div className=\"flex flex-col justify-between h-full\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\n                    <p className=\"text-gray-600 text-sm font-semibold\">\n                      Success Rate\n                    </p>\n                  </div>\n\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                      {metrics?.successRate ? `${metrics.successRate}%` : \"-\"}\n                    </div>\n                    <div className=\"flex items-center bg-green-50 px-2 py-1 rounded-full border border-green-200\">\n                      <TrendingUp className=\"w-3 h-3 mr-1 text-green-600\" />\n                      <span className=\"text-xs font-bold text-green-700\">\n                        +2.5%\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Calendar Integration Card */}\n          <Card className=\"bg-gradient-to-r from-purple-500 to-indigo-600 text-white h-32\">\n            <CardContent className=\"p-5 h-full\">\n              <div className=\"flex items-center justify-between h-full\">\n                <div className=\"flex flex-col justify-between h-full\">\n                  <p className=\"text-purple-100 text-sm font-medium\">\n                    Calendar Status\n                  </p>\n                  <p className=\"text-lg font-bold\">\n                    {calendarStatusLoading ? (\n                      <Loader2 className=\"w-5 h-5 animate-spin\" />\n                    ) : calendarStatus?.connected &&\n                      calendarStatus?.hasTokens ? (\n                      \"Connected\"\n                    ) : calendarStatus?.connected &&\n                      !calendarStatus?.hasTokens ? (\n                      \"Needs Reauth\"\n                    ) : (\n                      \"Not Connected\"\n                    )}\n                  </p>\n                  <div className=\"flex gap-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className={`text-white p-1 h-auto text-xs transition-all duration-300 ${\n                        calendarStatus?.connected && calendarStatus?.hasTokens\n                          ? \"bg-green-600 hover:bg-green-700\"\n                          : \"bg-red-600 hover:bg-red-700\"\n                      }`}\n                      onClick={async () => {\n                        if (\n                          calendarStatus?.connected &&\n                          !calendarStatus?.hasTokens\n                        ) {\n                          // Need to reconnect Google Calendar\n                          const userId = user?.id || user?._id;\n                          if (userId) {\n                            window.location.href = `/api/auth/google?userId=${userId}`;\n                          } else {\n                            toast({\n                              title: \"Error\",\n                              description:\n                                \"User ID not found. Please try logging in again.\",\n                              variant: \"destructive\",\n                            });\n                          }\n                        } else {\n                          calendarToggleMutation.mutate(\n                            !calendarStatus?.connected,\n                          );\n                        }\n                      }}\n                      disabled={calendarToggleMutation.isPending}\n                    >\n                      {calendarToggleMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"w-3 h-3 mr-1 animate-spin\" />\n                          Updating...\n                        </>\n                      ) : calendarStatus?.connected &&\n                        calendarStatus?.hasTokens ? (\n                        \"Disconnect\"\n                      ) : calendarStatus?.connected &&\n                        !calendarStatus?.hasTokens ? (\n                        \"Reauth\"\n                      ) : (\n                        \"Connect\"\n                      )}\n                    </Button>\n                    {calendarStatus?.connected && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-purple-100 hover:text-white hover:bg-white/20 p-1 h-auto text-xs\"\n                        onClick={() => setShowCalendarModal(true)}\n                      >\n                        <Eye className=\"w-3 h-3\" />\n                      </Button>\n                    )}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-purple-100 hover:text-white hover:bg-white/20 p-1 h-auto text-xs\"\n                      onClick={() => setShowSetupGuide(true)}\n                    >\n                      <HelpCircle className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"flex flex-col items-center\">\n                  <Calendar className=\"text-purple-200 w-6 h-6\" />\n                  {calendarStatus?.connected && (\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full mt-1\"></div>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          {/* Database Access Section */}\n          <div className=\"lg:col-span-2 order-2 lg:order-1\">\n            {!hasAccess ? (\n              <Card>\n                <CardHeader className=\"pb-4\">\n                  <CardTitle className=\"flex items-center\">\n                    <Lock className=\"text-blue-500 mr-3 w-5 h-5\" />\n                    Database Access Locked\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8\">\n                    <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <Lock className=\"text-gray-400 w-8 h-8\" />\n                    </div>\n                    <h3 className=\"text-xl font-bold text-gray-900 mb-3\">\n                      Waiting for DM Acceptance\n                    </h3>\n                    <p className=\"text-gray-600 mb-6\">\n                      At least one of your invited decision makers must accept\n                      to unlock the database.\n                    </p>\n\n                    <div className=\"bg-gray-50 rounded-lg p-4 mb-6\">\n                      <h4 className=\"font-semibold text-gray-900 mb-3\">\n                        Invitation Status:\n                      </h4>\n\n                      <div className=\"space-y-3\">\n                        {invitations.length > 0 ? (\n                          invitations.map((invitation) => (\n                            <div\n                              key={invitation._id || invitation.id}\n                              className=\"flex items-center justify-between p-3 bg-white rounded-lg border\"\n                            >\n                              <div className=\"flex items-center gap-3\">\n                                <div\n                                  className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold ${\n                                    invitation.status === \"accepted\"\n                                      ? \"bg-green-100 text-green-600\"\n                                      : \"bg-blue-100 text-blue-600\"\n                                  }`}\n                                >\n                                  {getInitials(\n                                    invitation.decisionMakerName ||\n                                      invitation.name ||\n                                      \"DM\",\n                                  )}\n                                </div>\n                                <div>\n                                  <p className=\"font-medium text-gray-900\">\n                                    {invitation.decisionMakerName ||\n                                      invitation.name ||\n                                      \"Decision Maker\"}\n                                  </p>\n                                  <p className=\"text-sm text-gray-500\">\n                                    {invitation.decisionMakerEmail ||\n                                      invitation.email ||\n                                      \"email@example.com\"}\n                                  </p>\n                                </div>\n                              </div>\n                              {getStatusBadge(invitation.status)}\n                            </div>\n                          ))\n                        ) : (\n                          <div className=\"text-center py-6\">\n                            <p className=\"text-gray-500\">\n                              No invitations sent yet\n                            </p>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      {/* <Button\n                        onClick={() => simulateAcceptanceMutation.mutate()}\n                        disabled={simulateAcceptanceMutation.isPending}\n                        className=\"bg-blue-600 hover:bg-blue-700 w-full\"\n                      >\n                        {simulateAcceptanceMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            Simulating...\n                          </>\n                        ) : (\n                          \"Simulate DM Acceptance (Demo)\"\n                        )}\n                      </Button>\n */}\n                      {/* <Button\n                        onClick={() => simulateOnboardingMutation.mutate()}\n                        disabled={simulateOnboardingMutation.isPending}\n                        className=\"bg-green-600 hover:bg-green-700 w-full\"\n                      >\n                        {simulateOnboardingMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            Completing...\n                          </>\n                        ) : (\n                          \"Complete DM Onboarding (Award Credit)\"\n                        )}\n                      </Button> */}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardContent className=\"p-4\">\n                  {/* Header with Search and Filters */}\n                  <div className=\"mb-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                        <span className=\"text-green-600 text-sm font-medium\">\n                          {filteredDMs.length} of {gatedDMs?.dms?.length || 0}{\" \"}\n                          Decision Makers\n                          {(searchTerm ||\n                            selectedIndustry ||\n                            selectedRating ||\n                            selectedEngagement) &&\n                            \" (filtered)\"}\n                        </span>\n                      </div>\n                      <button\n                        onClick={clearAllFilters}\n                        className=\"bg-gray-100 hover:bg-gray-200 text-gray-600 px-3 py-1.5 rounded-md text-sm transition-colors flex items-center gap-2\"\n                      >\n                        <Search className=\"w-4 h-4\" />\n                        <span>Clear Filters</span>\n                      </button>\n                    </div>\n\n                    {/* Search Bar */}\n                    <div className=\"relative mb-3\">\n                      <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                        <Search className=\"h-4 w-4 text-gray-400\" />\n                      </div>\n                      <input\n                        type=\"text\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        placeholder=\"Search by name, company, or title...\"\n                        className=\"block w-full pl-10 pr-3 py-2.5 border border-gray-300 rounded-lg text-gray-900 placeholder-gray-500 focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-200\"\n                      />\n                    </div>\n\n                    {/* Filter Dropdowns */}\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                      <select\n                        value={selectedIndustry}\n                        onChange={(e) => setSelectedIndustry(e.target.value)}\n                        className=\"bg-white border border-gray-300 text-gray-700 rounded-lg px-3 py-2 text-sm focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-200\"\n                      >\n                        <option value=\"\">Industry</option>\n                        {availableIndustries.map((industry) => (\n                          <option key={industry} value={industry}>\n                            {industry}\n                          </option>\n                        ))}\n                      </select>\n                      <select\n                        value={selectedCompanySize}\n                        onChange={(e) => setSelectedCompanySize(e.target.value)}\n                        className=\"bg-white border border-gray-300 text-gray-700 rounded-lg px-3 py-2 text-sm focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-200\"\n                      >\n                        <option value=\"\">Company Size</option>\n                        <option value=\"1-50\">1-50</option>\n                        <option value=\"51-200\">51-200</option>\n                        <option value=\"201-1000\">201-1000</option>\n                        <option value=\"1000+\">1000+</option>\n                      </select>\n                      <select\n                        value={selectedRating}\n                        onChange={(e) => setSelectedRating(e.target.value)}\n                        className=\"bg-white border border-gray-300 text-gray-700 rounded-lg px-3 py-2 text-sm focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-200\"\n                      >\n                        <option value=\"\">Rating</option>\n                        <option value=\"4.5+\">4.5+</option>\n                        <option value=\"4.0+\">4.0+</option>\n                        <option value=\"3.5+\">3.5+</option>\n                      </select>\n                      <select\n                        value={selectedEngagement}\n                        onChange={(e) => setSelectedEngagement(e.target.value)}\n                        className=\"bg-white border border-gray-300 text-gray-700 rounded-lg px-3 py-2 text-sm focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-200\"\n                      >\n                        <option value=\"\">Engagement</option>\n                        <option value=\"90+\">90%+</option>\n                        <option value=\"80+\">80%+</option>\n                        <option value=\"70+\">70%+</option>\n                      </select>\n                    </div>\n                  </div>\n\n                  {gatedDMsLoading ? (\n                    <div className=\"text-center py-6 \">\n                      <Loader2 className=\"animate-spin h-6 w-6 mx-auto mb-3 text-blue-500\" />\n                      <p className=\"text-gray-600\">\n                        Loading decision makers...\n                      </p>\n                    </div>\n                  ) : (\n                    <div className=\"h-[800px] overflow-y-auto\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                        {filteredDMs &&\n                        Array.isArray(filteredDMs) &&\n                        filteredDMs.length > 0 ? (\n                          filteredDMs.slice(0, 12).map((dm) => (\n                            <div\n                              key={dm.id}\n                              className=\"bg-gray-50 rounded-lg p-3 border border-gray-400 hover:border-purple-500 hover:shadow-sm transition-all duration-200\"\n                            >\n                              {/* Status Indicators */}\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <div className=\"flex items-center gap-2\">\n                                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                                  <span className=\"text-xs text-gray-500\">\n                                    {dm.remainingCalls} call\n                                    {dm.remainingCalls !== 1 ? \"s\" : \"\"}{\" \"}\n                                    available\n                                  </span>\n                                </div>\n                              </div>\n\n                              {/* Title and Company */}\n                              <div className=\"mb-2\">\n                                <h3 className=\"text-gray-900 font-semibold text-base mb-1\">\n                                  {dm.jobTitle ||\n                                    dm.name ||\n                                    \"Chief Revenue Officer\"}\n                                </h3>\n                                <p className=\"text-blue-600 text-sm font-medium\">\n                                  {dm.company}\n                                </p>\n                              </div>\n\n                              {/* Location */}\n                              <div className=\"flex items-center text-gray-600 text-sm mb-2\">\n                                <MapPin className=\"w-3 h-3 mr-1\" />\n                                <span>San Francisco, CA</span>\n                              </div>\n\n                              {/* Tags */}\n                              <div className=\"flex flex-wrap gap-1 mb-3\">\n                                <span className=\"bg-purple-100 text-purple-700 px-2 py-1 rounded text-xs font-medium\">\n                                  {dm.industry}\n                                </span>\n                                <span className=\"bg-blue-100 text-blue-700 px-2 py-1 rounded text-xs font-medium\">\n                                  201-1000\n                                </span>\n                              </div>\n\n                              {/* Rating and Engagement */}\n                              <div className=\"space-y-2 mb-3\">\n                                <div className=\"flex items-center justify-between\">\n                                  <div className=\"flex items-center\">\n                                    <Star className=\"w-4 h-4 text-yellow-500 mr-1 fill-current\" />\n                                    <span className=\"text-gray-900 font-medium\">\n                                      4.8\n                                    </span>\n                                  </div>\n                                  <span className=\"text-green-600 text-sm font-medium\">\n                                    {dm.engagementScore}% engagement\n                                  </span>\n                                </div>\n                                <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n                                  <div\n                                    className={`h-1.5 rounded-full transition-all duration-300 ${dm.engagementScore >= 40 ? \"bg-green-500\" : \"bg-red-500\"}`}\n                                    style={{ width: `${dm.engagementScore}%` }}\n                                  ></div>\n                                </div>\n                              </div>\n\n                              {/* Credit Eligibility Status */}\n\n                              {/* Action Buttons */}\n                              <div className=\"flex gap-2\">\n                                <button className=\"flex-1 bg-white border border-gray-300 hover:bg-gray-50 text-gray-700 py-2 px-3 rounded-lg text-sm transition-colors font-medium\">\n                                  View Contact\n                                </button>\n                                <button\n                                  className={`flex-1 py-2 px-3 rounded-lg text-sm transition-colors font-medium ${\n                                    calendarStatus?.connected\n                                      ? \"hover:bg-blue-700 text-white bg-[#5f7ed4]\"\n                                      : \"bg-gray-300 text-gray-500 cursor-not-allowed\"\n                                  }`}\n                                  onClick={() => {\n                                    if (calendarStatus?.connected) {\n                                      handleOpenBookingModal(dm);\n                                    } else {\n                                      toast({\n                                        title: \"Calendar Required\",\n                                        description:\n                                          \"Please connect your Google Calendar first to book calls. You can connect it from the Calendar Integration section below.\",\n                                        variant: \"destructive\",\n                                        duration: 5000,\n                                      });\n                                    }\n                                  }}\n                                  disabled={!calendarStatus?.connected}\n                                  title={\n                                    !calendarStatus?.connected\n                                      ? \"Connect your calendar first to book calls\"\n                                      : \"\"\n                                  }\n                                >\n                                  {calendarStatus?.connected ? (\n                                    \"Request Call\"\n                                  ) : (\n                                    <div className=\"flex items-center gap-1\">\n                                      <AlertCircle className=\"w-3 h-3\" />\n                                      Calendar Required\n                                    </div>\n                                  )}\n                                </button>\n                              </div>\n                            </div>\n                          ))\n                        ) : (\n                          <div className=\"col-span-full text-center py-6\">\n                            <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                              <Users className=\"w-6 h-6 text-gray-400\" />\n                            </div>\n                            <h3 className=\"text-base font-semibold text-gray-900 mb-2\">\n                              No Decision Makers Available\n                            </h3>\n                            <p className=\"text-gray-600 text-sm\">\n                              Check back later for new opportunities\n                            </p>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6 order-1 lg:order-2\">\n            {/* Package Status Card */}\n            <Card>\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Crown className=\"w-5 h-5 text-purple-600\" />\n                  <CardTitle className=\"text-gray-900\">\n                    Package Status\n                  </CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4 px-6 pb-6\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600 text-sm\">Current Plan</span>\n                  <Badge className=\"bg-purple-100 text-purple-700\">\n                    {getPackageDisplayName(\n                      user?.packageType,\n                      metrics?.maxDmInvitations,\n                    )?.split(\" • \")[0] || \"Free\"}\n                  </Badge>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600\">Call Credits</span>\n                    <span className=\"text-gray-900 font-medium\">\n                      {metrics?.callCredits || 0}/\n                      {metrics?.maxCallCredits || 500}\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n                      style={{\n                        width: `${metrics?.maxCallCredits ? ((metrics?.callCredits || 0) / metrics.maxCallCredits) * 100 : 0}%`,\n                      }}\n                    ></div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600\">Referral Credits</span>\n                    <span className=\"text-gray-900 font-medium\">\n                      {totalCredits}/{metrics?.maxDmInvitations || 1}\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className=\"bg-green-500 h-2 rounded-full transition-all duration-300\"\n                      style={{\n                        width: `${metrics?.maxDmInvitations && totalCredits ? (totalCredits / metrics.maxDmInvitations) * 100 : 0}%`,\n                      }}\n                    ></div>\n                  </div>\n                </div>\n\n                {/* Email Addon Button for Basic/Pro Users Only (not free) */}\n                {user?.packageType !== \"enterprise\" &&\n                  user?.packageType !== \"free\" &&\n                  !user?.hasEmailAddon && (\n                    <div className=\"p-3 bg-gradient-to-r from-amber-50 to-amber-100 rounded-lg border border-amber-200\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"w-2 h-2 bg-amber-500 rounded-full mt-2\"></div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-amber-900 mb-1\">\n                            Email Access Addon\n                          </h4>\n                          <p className=\"text-sm text-amber-700 mb-2\">\n                            Get DM email addresses after call booking for just\n                            $5\n                          </p>\n                          <Button\n                            size=\"sm\"\n                            className=\"bg-amber-600 hover:bg-amber-700 text-white w-full\"\n                            onClick={handleAddonPurchase}\n                            disabled={purchaseAddonMutation.isPending}\n                          >\n                            {purchaseAddonMutation.isPending ? (\n                              <>\n                                <Loader2 className=\"w-3 h-3 mr-2 animate-spin\" />\n                                Processing...\n                              </>\n                            ) : (\n                              \"Purchase for $5\"\n                            )}\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                {/* Show addon status if purchased */}\n                {user?.hasEmailAddon && (\n                  <div className=\"p-3 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border border-green-200\">\n                    <div className=\"flex items-center gap-2\">\n                      <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                      <span className=\"text-sm font-medium text-green-800\">\n                        Email Access Addon Active\n                      </span>\n                    </div>\n                  </div>\n                )}\n\n                <Button className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\">\n                  <Crown className=\"w-4 h-4 mr-2\" />\n                  Upgrade Plan\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Your Upcoming Calls */}\n            <Card>\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Users className=\"w-5 h-5 text-blue-600\" />\n                  <CardTitle className=\"text-gray-900\">\n                    Your Upcoming Calls\n                  </CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4 px-6 pb-6\">\n                {!calendarStatus?.connected ? (\n                  <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <Calendar className=\"w-5 h-5 text-red-500\" />\n                      <div>\n                        <h4 className=\"font-medium text-red-900 mb-1\">\n                          Connect Google Calendar\n                        </h4>\n                        <p className=\"text-sm text-red-700\">\n                          Please connect your Google Calendar to view upcoming\n                          calls\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  (() => {\n                    // Filter only upcoming calls (scheduled status and future dates)\n                    const upcomingCalls = calls\n                      .filter((call) => {\n                        const callDate = new Date(call.scheduledAt);\n                        const now = new Date();\n                        return call.status === \"scheduled\" && callDate > now;\n                      })\n                      .sort(\n                        (a, b) =>\n                          new Date(a.scheduledAt) - new Date(b.scheduledAt),\n                      ); // Sort by date (earliest first)\n\n                    return upcomingCalls.length > 0 ? (\n                      upcomingCalls.slice(0, 3).map((call) => (\n                        <div\n                          key={call._id}\n                          className=\"p-3 bg-gray-50 rounded-lg border border-gray-400 hover:border-purple-500 transition-colors\"\n                        >\n                          <div className=\"flex items-center justify-between mb-3\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-1\">\n                                <span className=\"text-gray-900 font-medium text-sm\">\n                                  {call.decisionMakerName ||\n                                    call.dmName ||\n                                    \"Decision Maker\"}\n                                </span>\n                                <Badge className=\"bg-blue-100 text-blue-700 text-xs\">\n                                  upcoming\n                                </Badge>\n                              </div>\n                              <div className=\"text-gray-600 text-xs\">\n                                {call.company || call.dmCompany || \"Company\"}\n                              </div>\n                              <div className=\"text-gray-500 text-xs\">\n                                {new Date(call.scheduledAt).toLocaleDateString(\n                                  \"en-US\",\n                                  {\n                                    month: \"short\",\n                                    day: \"numeric\",\n                                  },\n                                )}{\" \"}\n                                •{\" \"}\n                                {new Date(call.scheduledAt).toLocaleTimeString(\n                                  \"en-US\",\n                                  {\n                                    hour: \"numeric\",\n                                    minute: \"2-digit\",\n                                  },\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"w-2 h-2 bg-green-500 rounded-full mb-1\"></div>\n                              <div className=\"text-green-600 text-xs font-medium\">\n                                {call.engagementScore || \"--\"}%\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              size=\"sm\"\n                              className={`flex-1 h-7 text-xs ${(() => {\n                                const now = new Date();\n                                const callTime = new Date(call.scheduledAt);\n                                const joinWindowStart = new Date(\n                                  callTime.getTime() - 2 * 60 * 1000,\n                                ); // 2 minutes before\n                                const joinWindowEnd = new Date(\n                                  callTime.getTime() + 30 * 60 * 1000,\n                                ); // 30 minutes after\n                                const canJoin =\n                                  now >= joinWindowStart &&\n                                  now <= joinWindowEnd;\n\n                                return canJoin\n                                  ? \"bg-green-600 hover:bg-green-700 text-white\"\n                                  : \"bg-gray-400 text-gray-200 cursor-not-allowed\";\n                              })()}`}\n                              disabled={(() => {\n                                const now = new Date();\n                                const callTime = new Date(call.scheduledAt);\n                                const joinWindowStart = new Date(\n                                  callTime.getTime() - 2 * 60 * 1000,\n                                ); // 2 minutes before\n                                const joinWindowEnd = new Date(\n                                  callTime.getTime() + 30 * 60 * 1000,\n                                ); // 30 minutes after\n                                return !(\n                                  now >= joinWindowStart && now <= joinWindowEnd\n                                );\n                              })()}\n                              onClick={() => {\n                                const now = new Date();\n                                const callTime = new Date(call.scheduledAt);\n                                const joinWindowStart = new Date(\n                                  callTime.getTime() - 2 * 60 * 1000,\n                                );\n                                const joinWindowEnd = new Date(\n                                  callTime.getTime() + 30 * 60 * 1000,\n                                );\n\n                                if (now < joinWindowStart) {\n                                  const timeRemaining = formatTimeRemaining(joinWindowStart - now);\n                                  toast({\n                                    title: \"Meeting Not Yet Available\",\n                                    description: `You can join 2 minutes before the scheduled time. Available in ${timeRemaining}`,\n                                    variant: \"destructive\",\n                                  });\n                                  return;\n                                }\n\n                                if (now > joinWindowEnd) {\n                                  toast({\n                                    title: \"Meeting Window Closed\",\n                                    description:\n                                      \"The meeting window has passed. Contact support if you need assistance.\",\n                                    variant: \"destructive\",\n                                  });\n                                  return;\n                                }\n\n                                // Join call logic - open Google Meet link if available\n                                if (call.googleMeetLink) {\n                                  window.open(call.googleMeetLink, \"_blank\");\n                                } else if (call.meetingLink) {\n                                  window.open(call.meetingLink, \"_blank\");\n                                } else if (call.googleCalendarEventId) {\n                                  toast({\n                                    title: \"Opening Meeting\",\n                                    description:\n                                      \"Redirecting to Google Calendar event...\",\n                                  });\n                                  window.open(\n                                    `https://calendar.google.com/calendar/event?eid=${call.googleCalendarEventId}`,\n                                    \"_blank\",\n                                  );\n                                } else {\n                                  toast({\n                                    title: \"Meeting Link Not Available\",\n                                    description:\n                                      \"The meeting link will be available closer to the meeting time.\",\n                                  });\n                                }\n                              }}\n                            >\n                              <Phone className=\"w-3 h-3 mr-1\" />\n                              {(() => {\n                                const now = new Date();\n                                const callTime = new Date(call.scheduledAt);\n                                const joinWindowStart = new Date(\n                                  callTime.getTime() - 2 * 60 * 1000,\n                                );\n\n                                if (now < joinWindowStart) {\n                                  const timeRemaining = formatTimeRemaining(joinWindowStart - now);\n                                  return `Available in ${timeRemaining}`;\n                                } else {\n                                  return \"Join Call\";\n                                }\n                              })()}\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"flex-1 border-purple-300 text-purple-700 hover:bg-purple-50 h-7 text-xs\"\n                              onClick={() => {\n                                // Pitch assistant logic - could open AI assistant modal\n                                console.log(\n                                  \"Opening Pitch Assistant for call:\",\n                                  call._id,\n                                );\n                                toast({\n                                  title: \"Pitch Assistant\",\n                                  description:\n                                    \"AI-powered pitch assistance will be available soon!\",\n                                });\n                              }}\n                            >\n                              <Lightbulb className=\"w-3 h-3 mr-1\" />\n                              Pitch Assistant\n                            </Button>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <Calendar className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\n                        <p className=\"text-gray-500 mb-2\">\n                          No upcoming calls scheduled\n                        </p>\n                        <p className=\"text-sm text-gray-400\">\n                          Book a call with one of your decision makers to get\n                          started\n                        </p>\n                      </div>\n                    );\n                  })()\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Smart Suggestions */}\n            <Card className=\"border border-gray-200 shadow-lg\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"flex items-center text-gray-900\">\n                  <Lightbulb className=\"w-5 h-5 text-yellow-500 mr-2\" />\n                  Smart Suggestions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4 px-6 pb-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"p-3 bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg border border-blue-200\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\"></div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-blue-900 mb-1\">\n                          Follow up with high-engagement DMs\n                        </h4>\n                        <p className=\"text-sm text-blue-700\">\n                          {gatedDMs?.dms?.filter(\n                            (dm) => dm.engagementScore >= 90,\n                          ).length || 0}{\" \"}\n                          decision makers with 90%+ engagement available\n                        </p>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-blue-600 hover:text-blue-700 p-0 h-auto mt-1\"\n                        >\n                          View opportunities →\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"p-3 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border border-green-200\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-green-900 mb-1\">\n                          Optimal calling window\n                        </h4>\n                        <p className=\"text-sm text-green-700\">\n                          {metrics?.successRate\n                            ? `${metrics.successRate}% success rate`\n                            : \"Track calls to see optimal times\"}\n                        </p>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-green-600 hover:text-green-700 p-0 h-auto mt-1\"\n                        >\n                          Schedule calls →\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"p-3 bg-gradient-to-r from-orange-50 to-orange-100 rounded-lg border border-orange-200\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"w-2 h-2 bg-orange-500 rounded-full mt-2\"></div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-orange-900 mb-1\">\n                          Credit optimization\n                        </h4>\n                        <p className=\"text-sm text-orange-700\">\n                          {totalCredits > 0\n                            ? `You have ${totalCredits} referral credit${totalCredits === 1 ? \"\" : \"s\"} available`\n                            : \"Complete DM onboarding to earn referral credits\"}\n                        </p>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-orange-600 hover:text-orange-700 p-0 h-auto mt-1\"\n                        >\n                          Use credits →\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"pt-3 border-t border-gray-200\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full text-gray-600 hover:text-gray-700 border-gray-300\"\n                  >\n                    <TrendingUp className=\"w-4 h-4 mr-2\" />\n                    View all insights\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n      {/* Booking Modal */}\n      <BookingModal\n        isOpen={isBookingModalOpen}\n        onClose={handleCloseBookingModal}\n        decisionMaker={selectedDecisionMaker}\n        onConfirm={handleBookingConfirm}\n      />\n\n      {/* Email Addon Modal */}\n      {addonClientSecret && (\n        <Elements\n          stripe={stripePromise}\n          options={{\n            clientSecret: addonClientSecret,\n            appearance: {\n              theme: \"stripe\",\n            },\n          }}\n        >\n          <EmailAddonModal\n            isOpen={isAddonModalOpen}\n            onClose={() => {\n              setIsAddonModalOpen(false);\n              setAddonClientSecret(null);\n            }}\n            onSuccess={handleAddonSuccess}\n          />\n        </Elements>\n      )}\n      {/* Calendar Modal */}\n      <Dialog open={showCalendarModal} onOpenChange={setShowCalendarModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Upcoming Calendar Events</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n            {upcomingMeetingsLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"w-6 h-6 animate-spin\" />\n                <span className=\"ml-2\">Loading meetings...</span>\n              </div>\n            ) : upcomingMeetings && upcomingMeetings.length > 0 ? (\n              upcomingMeetings.map((meeting, index) => (\n                <div\n                  key={index}\n                  className=\"p-4 border rounded-lg hover:bg-gray-50\"\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium text-gray-900 mb-1\">\n                        {meeting.summary || \"Meeting\"}\n                      </h3>\n                      <p className=\"text-sm text-gray-600 mb-2\">\n                        {meeting.start?.dateTime\n                          ? new Date(meeting.start.dateTime).toLocaleString()\n                          : \"Time not specified\"}\n                      </p>\n                      {meeting.description && (\n                        <p className=\"text-sm text-gray-500 mb-2\">\n                          {meeting.description}\n                        </p>\n                      )}\n                      {meeting.attendees && meeting.attendees.length > 0 && (\n                        <div className=\"flex items-center gap-2\">\n                          <Users className=\"w-4 h-4 text-gray-400\" />\n                          <span className=\"text-xs text-gray-500\">\n                            {meeting.attendees.length} attendee\n                            {meeting.attendees.length !== 1 ? \"s\" : \"\"}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                    {meeting.htmlLink && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => window.open(meeting.htmlLink, \"_blank\")}\n                      >\n                        Join\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8\">\n                <Calendar className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No upcoming meetings found</p>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Google Calendar Setup Guide Modal */}\n      <Dialog open={showSetupGuide} onOpenChange={setShowSetupGuide}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <AlertCircle className=\"w-5 h-5 text-orange-500\" />\n              Google Calendar Setup Guide\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-6\">\n            <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\n              <div className=\"flex items-start gap-3\">\n                <AlertCircle className=\"w-5 h-5 text-orange-500 mt-0.5\" />\n                <div>\n                  <h3 className=\"font-semibold text-orange-900\">\n                    Issue Identified\n                  </h3>\n                  <p className=\"text-sm text-orange-700 mt-1\">\n                    The Google Cloud Console needs to be configured with the\n                    correct redirect URI. Our application is correctly\n                    configured, but Google is rejecting the connection during\n                    token exchange.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">\n                Step 1: Access Google Cloud Console\n              </h3>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm text-gray-700\">\n                  1. Go to{\" \"}\n                  <a\n                    href=\"https://console.cloud.google.com/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-blue-600 hover:underline inline-flex items-center gap-1\"\n                  >\n                    Google Cloud Console <ExternalLink className=\"w-3 h-3\" />\n                  </a>\n                </p>\n                <p className=\"text-sm text-gray-700\">\n                  2. Navigate to: <strong>APIs & Services → Credentials</strong>\n                </p>\n                <p className=\"text-sm text-gray-700\">\n                  3. Find your OAuth 2.0 Client ID and click on it\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">\n                Step 2: Configure Redirect URI\n              </h3>\n              <div className=\"space-y-3\">\n                <p className=\"text-sm text-gray-700\">\n                  In the \"Authorized redirect URIs\" section, add this exact URL:\n                </p>\n                <div className=\"bg-gray-50 border rounded-lg p-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <code className=\"text-sm font-mono text-gray-800\">\n                      https://decisionmaker.shrawantravels.com/api/auth/google/callback\n                    </code>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        navigator.clipboard.writeText(\n                          \"https://decisionmaker.shrawantravels.com/api/auth/google/callback\",\n                        );\n                        toast({\n                          title: \"Copied!\",\n                          description: \"Redirect URI copied to clipboard\",\n                        });\n                      }}\n                    >\n                      <Copy className=\"w-3 h-3 mr-1\" />\n                      Copy\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\n                  <div className=\"flex items-start gap-2\">\n                    <AlertCircle className=\"w-4 h-4 text-yellow-600 mt-0.5\" />\n                    <div>\n                      <p className=\"text-sm text-yellow-700 font-medium\">\n                        Important:\n                      </p>\n                      <ul className=\"text-sm text-yellow-700 mt-1 list-disc list-inside\">\n                        <li>Must be HTTPS (not HTTP)</li>\n                        <li>Must match exactly (case-sensitive)</li>\n                        <li>\n                          Do NOT add authorized domains (Google rejects\n                          replit.dev subdomains)\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Step 3: Add Test User</h3>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm text-gray-700\">\n                  1. Go to:{\" \"}\n                  <strong>APIs & Services → OAuth consent screen</strong>\n                </p>\n                <p className=\"text-sm text-gray-700\">\n                  2. Scroll to \"Test users\" section and click \"Add users\"\n                </p>\n                <p className=\"text-sm text-gray-700\">\n                  3. Add your email address:{\" \"}\n                  <strong>salesrep@techize.com</strong>\n                </p>\n                <div className=\"bg-gray-50 border rounded-lg p-3 mt-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <code className=\"text-sm font-mono text-gray-800\">\n                      salesrep@techize.com\n                    </code>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        navigator.clipboard.writeText(\"salesrep@techize.com\");\n                        toast({\n                          title: \"Copied!\",\n                          description: \"Test user email copied to clipboard\",\n                        });\n                      }}\n                    >\n                      <Copy className=\"w-3 h-3 mr-1\" />\n                      Copy\n                    </Button>\n                  </div>\n                </div>\n                <p className=\"text-sm text-gray-700\">4. Click \"Save\"</p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">\n                Step 4: Enable Google Calendar API\n              </h3>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm text-gray-700\">\n                  1. Go to: <strong>APIs & Services → Library</strong>\n                </p>\n                <p className=\"text-sm text-gray-700\">\n                  2. Search for \"Google Calendar API\"\n                </p>\n                <p className=\"text-sm text-gray-700\">\n                  3. Click it and click \"Enable\"\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">\n                Step 5: Test the Connection\n              </h3>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm text-gray-700\">\n                  1. Wait 5-10 minutes for changes to propagate\n                </p>\n                <p className=\"text-sm text-gray-700\">\n                  2. Try connecting your calendar again\n                </p>\n                <p className=\"text-sm text-gray-700\">\n                  3. Use an incognito browser window if you still encounter\n                  issues\n                </p>\n              </div>\n            </div>\n\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n              <div className=\"flex items-start gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                <div>\n                  <h3 className=\"font-semibold text-green-900\">\n                    Once Setup is Complete\n                  </h3>\n                  <p className=\"text-sm text-green-700 mt-1\">\n                    The calendar integration will work immediately. You'll be\n                    able to sync your Google Calendar, view upcoming meetings,\n                    and automatically create calendar events for scheduled\n                    calls.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <div className=\"flex items-start gap-3\">\n                <AlertCircle className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                <div>\n                  <h3 className=\"font-semibold text-blue-900\">Quick Test</h3>\n                  <p className=\"text-sm text-blue-700 mt-1 mb-3\">\n                    After completing the setup above, test the OAuth flow\n                    directly:\n                  </p>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => {\n                      const testUrl =\n                        \"https://accounts.google.com/o/oauth2/v2/auth?access_type=offline&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcalendar%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcalendar.events&prompt=consent&state=test-user-id&response_type=code&client_id=917137353724-ftng1fau0pm0hdl65l1i5et8fmssvedj.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Fdecisionmaker.shrawantravels.com%2Fapi%2Fauth%2Fgoogle%2Fcallback\";\n                      window.open(testUrl, \"_blank\");\n                    }}\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                  >\n                    <ExternalLink className=\"w-4 h-4 mr-2\" />\n                    Test OAuth Flow\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button\n                onClick={() => setShowSetupGuide(false)}\n                variant=\"outline\"\n                className=\"flex-1\"\n              >\n                Close Guide\n              </Button>\n              <Button\n                onClick={() => {\n                  window.open(\n                    \"https://console.cloud.google.com/apis/credentials\",\n                    \"_blank\",\n                  );\n                }}\n                className=\"flex-1\"\n              >\n                <ExternalLink className=\"w-4 h-4 mr-2\" />\n                Open Google Cloud Console\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":81141},"client/src/pages/sales-rep-evaluation.jsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft,\n  User,\n  Building,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n  XCircle,\n  Star\n} from \"lucide-react\";\n\nexport default function SalesRepEvaluation() {\n  const [, setLocation] = useLocation();\n  const [selectedRating, setSelectedRating] = useState(0);\n  const [feedback, setFeedback] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get call ID from URL params\n  const urlParams = new URLSearchParams(window.location.search);\n  const callId = urlParams.get('callId');\n\n  // Fetch call data\n  const { data: callData, isLoading: isLoadingCall } = useQuery({\n    queryKey: ['/api/sales-rep/call', callId],\n    enabled: !!callId,\n    queryFn: async () => {\n      const response = await apiRequest(`/api/sales-rep/calls`);\n      const calls = response || [];\n      return calls.find(call => call._id === callId);\n    }\n  });\n\n  // Submit evaluation mutation\n  const submitEvaluationMutation = useMutation({\n    mutationFn: async (evaluationData) => {\n      return await apiRequest(`/api/sales-rep/calls/${callId}/rate`, {\n        method: \"POST\",\n        body: JSON.stringify(evaluationData),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/sales-rep/calls\"],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/sales-rep/metrics\"],\n      });\n      toast({\n        title: \"Call Rated Successfully\",\n        description: \"Thank you for your feedback!\",\n      });\n      \n      // Redirect back to analytics or dashboard\n      setTimeout(() => {\n        setLocation(\"/analytics\");\n      }, 1500);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit rating\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = () => {\n    if (!selectedRating) {\n      toast({\n        title: \"Rating Required\",\n        description: \"Please select a star rating before submitting.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const evaluationData = {\n      rating: selectedRating,\n      feedback: feedback.trim(),\n    };\n\n    submitEvaluationMutation.mutate(evaluationData);\n  };\n\n  const renderStars = () => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <button\n        key={i}\n        onClick={() => setSelectedRating(i + 1)}\n        className={`p-2 transition-colors duration-200 ${\n          i < selectedRating ? \"text-yellow-400\" : \"text-gray-300 hover:text-yellow-200\"\n        }`}\n      >\n        <Star className=\"w-8 h-8 fill-current\" />\n      </button>\n    ));\n  };\n\n  if (isLoadingCall) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-slate-50 pt-16\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"animate-spin w-8 h-8 border-2 border-green-600 border-t-transparent rounded-full\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!callData) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-slate-50 pt-16\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center py-8\">\n            <XCircle className=\"mx-auto h-12 w-12 text-red-400 mb-4\" />\n            <h2 className=\"text-xl font-semibold text-gray-900\">Call not found</h2>\n            <p className=\"text-gray-600 mt-2\">The call you're trying to evaluate could not be found.</p>\n            <Link href=\"/analytics\">\n              <Button className=\"mt-4\">Return to Analytics</Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-slate-50 pt-16\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link href=\"/analytics\">\n            <Button variant=\"ghost\" className=\"mb-4 p-0 text-gray-600 hover:text-green-600\">\n              <ArrowLeft className=\"mr-2\" size={16} />\n              Back to Analytics\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Rate Your Call</h1>\n            <p className=\"text-gray-600 mt-1\">Share your experience from this meeting</p>\n          </div>\n        </div>\n\n        {/* Call Details */}\n        <Card className=\"shadow-lg border border-gray-200 bg-white mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                  <User className=\"text-green-600\" size={24} />\n                </div>\n                <div>\n                  <h3 className=\"font-bold text-gray-900\">\n                    {callData.decisionMakerName || \"Decision Maker\"}\n                  </h3>\n                  <p className=\"text-green-600 font-medium\">\n                    {callData.company || \"Company\"}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    {callData.industry || \"Industry\"}\n                  </p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"flex items-center text-gray-500 mb-1\">\n                  <Clock className=\"mr-1\" size={16} />\n                  <span className=\"text-sm\">\n                    {callData.scheduledAt\n                      ? new Date(callData.scheduledAt).toLocaleDateString()\n                      : \"Recently\"}\n                  </span>\n                </div>\n                <Badge className=\"bg-green-100 text-green-800\">\n                  Completed\n                </Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Evaluation Form */}\n        <Card className=\"shadow-lg border border-gray-200 bg-white\">\n          <CardContent className=\"p-8\">\n            <div className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">How was your call?</h2>\n              <p className=\"text-gray-600\">Rate your overall experience with this decision maker</p>\n            </div>\n\n            {/* Star Rating */}\n            <div className=\"mb-8\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                Overall Rating\n              </h3>\n              <div className=\"flex items-center space-x-1 mb-2\">\n                {renderStars()}\n              </div>\n              <p className=\"text-sm text-gray-500\">\n                {selectedRating === 0 && \"Click to rate\"}\n                {selectedRating === 1 && \"Poor - Very unsatisfied\"}\n                {selectedRating === 2 && \"Fair - Somewhat unsatisfied\"}\n                {selectedRating === 3 && \"Good - Neutral experience\"}\n                {selectedRating === 4 && \"Very Good - Satisfied\"}\n                {selectedRating === 5 && \"Excellent - Highly satisfied\"}\n              </p>\n            </div>\n\n            {/* Feedback */}\n            <div className=\"mb-8\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">\n                Additional feedback (optional)\n              </h3>\n              <Textarea\n                placeholder=\"Share your thoughts about the call, the decision maker's engagement, or any other relevant details...\"\n                value={feedback}\n                onChange={(e) => setFeedback(e.target.value)}\n                className=\"min-h-[120px] resize-none\"\n              />\n            </div>\n\n            {/* Submit Button */}\n            <div className=\"flex justify-end\">\n              <Button\n                onClick={handleSubmit}\n                disabled={!selectedRating || submitEvaluationMutation.isPending}\n                className=\"bg-green-600 hover:bg-green-700 px-8 py-3\"\n              >\n                {submitEvaluationMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                    Submitting...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className=\"mr-2\" size={16} />\n                    Submit Rating\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9078},"client/src/pages/super-admin-dashboard.jsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  Shield,\n  Users,\n  Phone,\n  CreditCard,\n  Activity,\n  Search,\n  Edit,\n  Trash2,\n  Plus,\n  BarChart3,\n  TrendingUp,\n  AlertTriangle,\n  LogOut,\n  UserCheck,\n  X,\n  MessageSquare,\n  Calendar,\n  DollarSign,\n  BarChart,\n  Download,\n  ExternalLink,\n  Settings,\n  Server,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  Clock,\n  Wifi,\n  Database,\n  Mail,\n  Zap,\n  Flag,\n  Eye,\n  Ban,\n  Coins,\n  Lock,\n  Unlock,\n  UserX,\n  Filter,\n} from \"lucide-react\";\nimport {\n  createSubscriptionPlanSchema,\n  updateSubscriptionPlanSchema,\n  updateUserSchema,\n} from \"@shared/schema\";\n\nexport default function SuperAdminDashboard() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [selectedPlan, setSelectedPlan] = useState(null);\n  const [userFilters, setUserFilters] = useState({\n    role: \"all\",\n    search: \"\",\n    page: 1,\n  });\n  const [isEditUserOpen, setIsEditUserOpen] = useState(false);\n  const [isCreatePlanOpen, setIsCreatePlanOpen] = useState(false);\n  const [isEditPlanOpen, setIsEditPlanOpen] = useState(false);\n  const [showSuspendModal, setShowSuspendModal] = useState(false);\n  const [showCreditsModal, setShowCreditsModal] = useState(false);\n  const [showMessageModal, setShowMessageModal] = useState(false);\n  const [actionUser, setActionUser] = useState(null);\n  const [showCompanyCreditsModal, setShowCompanyCreditsModal] = useState(false);\n  const [showCompanyEditModal, setShowCompanyEditModal] = useState(false);\n  const [selectedCompany, setSelectedCompany] = useState(null);\n  const [companyData, setCompanyData] = useState([\n    {\n      id: 1,\n      name: \"TechCorp Inc.\",\n      plan: \"Enterprise\",\n      allocated: 500,\n      used: 342,\n      remaining: 158,\n      renewal: \"15/07/2025\",\n      planColor: \"bg-purple-100 text-purple-800\",\n      remainingColor: \"text-green-600\",\n    },\n    {\n      id: 2,\n      name: \"StartupHub LLC\",\n      plan: \"Pro\",\n      allocated: 200,\n      used: 187,\n      remaining: 13,\n      renewal: \"22/07/2025\",\n      planColor: \"bg-blue-100 text-blue-800\",\n      remainingColor: \"text-orange-600\",\n    },\n    {\n      id: 3,\n      name: \"Enterprise Solutions\",\n      plan: \"Enterprise\",\n      allocated: 1000,\n      used: 445,\n      remaining: 555,\n      renewal: \"30/07/2025\",\n      planColor: \"bg-purple-100 text-purple-800\",\n      remainingColor: \"text-green-600\",\n    },\n  ]);\n\n  // Platform Settings State\n  const [platformSettings, setPlatformSettings] = useState({\n    // User Limits\n    maxDmsPerMonth: 50,\n    freeCallLimit: 3,\n\n    // Credit System\n    creditRefundNoShows: true,\n    creditValue: 5.0,\n    refundWindow: 24,\n\n    // Enterprise Features\n    nameVisibilityToggle: true,\n    emailUnlockFeature: true,\n    advancedAnalytics: true,\n    apiAccess: false,\n\n    // Security & Compliance\n    twoFactorAuth: false,\n    activityLogging: true,\n    sessionTimeout: 60,\n    passwordPolicy: \"medium\",\n  });\n\n  // Activity Logs Filters State\n  const [activityFilters, setActivityFilters] = useState({\n    search: \"\",\n    action: \"all\",\n    entityType: \"all\",\n    page: 1,\n    limit: 20,\n  });\n\n  // Flag Filters State\n  const [flagFilters, setFlagFilters] = useState({\n    status: \"all\",\n    flagType: \"all\",\n    dateRange: \"all\",\n    search: \"\",\n  });\n\n  // Flag Review Modal State\n  const [selectedFlag, setSelectedFlag] = useState(null);\n  const [showFlagReviewModal, setShowFlagReviewModal] = useState(false);\n  const [showFlagActionModal, setShowFlagActionModal] = useState(false);\n\n  // Platform Settings Query\n  const { data: platformSettingsData, refetch: refetchPlatformSettings } =\n    useQuery({\n      queryKey: [\"/api/super-admin/platform-settings\"],\n      retry: false,\n    });\n\n  // Update platform settings when data is loaded\n  useEffect(() => {\n    if (platformSettingsData) {\n      setPlatformSettings({\n        maxDmsPerMonth: platformSettingsData.maxDmsPerMonth || 50,\n        freeCallLimit: platformSettingsData.freeCallLimit || 3,\n        creditRefundNoShows:\n          platformSettingsData.creditRefundNoShows !== undefined\n            ? platformSettingsData.creditRefundNoShows\n            : true,\n        creditValue: platformSettingsData.creditValue || 5.0,\n        refundWindow: platformSettingsData.refundWindow || 24,\n        nameVisibilityToggle:\n          platformSettingsData.nameVisibilityToggle !== undefined\n            ? platformSettingsData.nameVisibilityToggle\n            : true,\n        emailUnlockFeature:\n          platformSettingsData.emailUnlockFeature !== undefined\n            ? platformSettingsData.emailUnlockFeature\n            : true,\n        advancedAnalytics:\n          platformSettingsData.advancedAnalytics !== undefined\n            ? platformSettingsData.advancedAnalytics\n            : true,\n        apiAccess:\n          platformSettingsData.apiAccess !== undefined\n            ? platformSettingsData.apiAccess\n            : false,\n        twoFactorAuth:\n          platformSettingsData.twoFactorAuth !== undefined\n            ? platformSettingsData.twoFactorAuth\n            : false,\n        activityLogging:\n          platformSettingsData.activityLogging !== undefined\n            ? platformSettingsData.activityLogging\n            : true,\n        sessionTimeout: platformSettingsData.sessionTimeout || 60,\n        passwordPolicy: platformSettingsData.passwordPolicy || \"medium\",\n      });\n    }\n  }, [platformSettingsData]);\n\n  // Analytics Queries\n  const { data: userAnalytics } = useQuery({\n    queryKey: [\"/api/super-admin/analytics/users\"],\n    retry: false,\n  });\n\n  const { data: callAnalytics } = useQuery({\n    queryKey: [\"/api/super-admin/analytics/calls\"],\n    retry: false,\n  });\n\n  const { data: subscriptionAnalytics } = useQuery({\n    queryKey: [\"/api/super-admin/analytics/subscriptions\"],\n    retry: false,\n  });\n\n  // Flag Statistics Query\n  const { data: flagStatistics } = useQuery({\n    queryKey: [\"/api/super-admin/flag-statistics\"],\n    retry: false,\n  });\n\n  // All Flags Query for the reports table with filters\n  const { data: allFlagsData = [] } = useQuery({\n    queryKey: [\"/api/flags\"],\n    retry: false,\n  });\n\n  // Filter flags based on filters\n  const filteredFlags = useMemo(() => {\n    let filtered = allFlagsData;\n\n    // Apply status filter\n    if (flagFilters.status !== \"all\") {\n      filtered = filtered.filter((flag) => flag.status === flagFilters.status);\n    }\n\n    // Apply flag type filter\n    if (flagFilters.flagType !== \"all\") {\n      filtered = filtered.filter(\n        (flag) => flag.flagType === flagFilters.flagType,\n      );\n    }\n\n    // Apply date range filter\n    if (flagFilters.dateRange !== \"all\") {\n      const now = new Date();\n      const filterDate = new Date();\n\n      switch (flagFilters.dateRange) {\n        case \"today\":\n          filterDate.setHours(0, 0, 0, 0);\n          break;\n        case \"week\":\n          filterDate.setDate(now.getDate() - 7);\n          break;\n        case \"month\":\n          filterDate.setMonth(now.getMonth() - 1);\n          break;\n        case \"quarter\":\n          filterDate.setMonth(now.getMonth() - 3);\n          break;\n      }\n\n      filtered = filtered.filter(\n        (flag) => new Date(flag.createdAt) >= filterDate,\n      );\n    }\n\n    // Apply search filter\n    if (flagFilters.search.trim()) {\n      const searchTerm = flagFilters.search.toLowerCase().trim();\n      filtered = filtered.filter(\n        (flag) =>\n          flag.description?.toLowerCase().includes(searchTerm) ||\n          flag.flaggedBy?.email?.toLowerCase().includes(searchTerm) ||\n          flag.dmId?.email?.toLowerCase().includes(searchTerm) ||\n          flag.flagType?.toLowerCase().includes(searchTerm),\n      );\n    }\n\n    return filtered;\n  }, [allFlagsData, flagFilters]);\n\n  // Flag action mutations\n  const updateFlagStatusMutation = useMutation({\n    mutationFn: async ({ flagId, status, action }) => {\n      const response = await apiRequest(\n        \"PATCH\",\n        `/api/flags/${flagId}/status`,\n        {\n          status,\n          action,\n        },\n      );\n      if (!response.ok) {\n        let errorMessage = \"Failed to update flag\";\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.message || errorMessage;\n        } catch (parseError) {\n          console.error(\"Failed to parse error response:\", parseError);\n        }\n        throw new Error(errorMessage);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/flags\"] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/super-admin/flag-statistics\"],\n      });\n      toast({\n        title: \"Flag Updated\",\n        description: \"Flag status has been updated successfully.\",\n      });\n      setShowFlagActionModal(false);\n      setShowFlagReviewModal(false);\n      setSelectedFlag(null);\n    },\n    onError: (error) => {\n      console.error(\"Flag update error:\", error);\n      toast({\n        title: \"Error\",\n        description:\n          error.message || \"Failed to update flag status. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Flag review handlers\n  const handleFlagReview = (flag) => {\n    setSelectedFlag(flag);\n    setShowFlagReviewModal(true);\n  };\n\n  const handleFlagAction = (flag) => {\n    setSelectedFlag(flag);\n    setShowFlagActionModal(true);\n  };\n\n  const handleUpdateFlagStatus = (status, action = null) => {\n    if (selectedFlag) {\n      updateFlagStatusMutation.mutate({\n        flagId: selectedFlag._id,\n        status,\n        action,\n      });\n    }\n  };\n\n  // Users Query\n  const { data: usersData, isLoading: usersLoading } = useQuery({\n    queryKey: [\"/api/super-admin/users\", userFilters],\n    retry: false,\n    onSuccess: (data) => {\n      // Debug: Check user data\n      if (data?.users) {\n        const suspendedUsers = data.users.filter(\n          (u) => u.standing === \"suspended\",\n        );\n        console.log(\"Frontend Debug - Total users:\", data.users.length);\n        console.log(\n          \"Frontend Debug - Suspended users:\",\n          suspendedUsers.map((u) => ({\n            name: `${u.firstName} ${u.lastName}`,\n            standing: u.standing,\n            isActive: u.isActive,\n          })),\n        );\n        console.log(\n          \"Frontend Debug - All user standings:\",\n          data.users.map((u) => ({\n            name: `${u.firstName} ${u.lastName}`,\n            standing: u.standing,\n          })),\n        );\n      }\n    },\n  });\n\n  // Filter users based on selected role and search\n  const filteredUsers = useMemo(() => {\n    let filtered = usersData?.users || [];\n\n    // Apply role filter\n    if (userFilters.role !== \"all\") {\n      if (userFilters.role === \"flagged\") {\n        filtered = filtered.filter(\n          (user) =>\n            user.standing === \"flagged\" || (user.flags && user.flags > 0),\n        );\n      } else if (userFilters.role === \"suspended\") {\n        filtered = filtered.filter(\n          (user) => user.standing === \"suspended\" || !user.isActive,\n        );\n      } else {\n        filtered = filtered.filter((user) => user.role === userFilters.role);\n      }\n    }\n\n    // Apply search filter\n    if (userFilters.search.trim()) {\n      const searchTerm = userFilters.search.toLowerCase().trim();\n      filtered = filtered.filter(\n        (user) =>\n          user.firstName?.toLowerCase().includes(searchTerm) ||\n          user.lastName?.toLowerCase().includes(searchTerm) ||\n          user.email?.toLowerCase().includes(searchTerm) ||\n          user.company?.toLowerCase().includes(searchTerm),\n      );\n    }\n\n    return filtered;\n  }, [usersData?.users, userFilters]);\n\n  // Get user counts for tabs\n  const userCounts = useMemo(() => {\n    const users = usersData?.users || [];\n    return {\n      all: users.length,\n      sales_rep: users.filter((u) => u.role === \"sales_rep\").length,\n      decision_maker: users.filter((u) => u.role === \"decision_maker\").length,\n      flagged: users.filter(\n        (u) => u.standing === \"flagged\" || (u.flags && u.flags > 0),\n      ).length,\n      suspended: users.filter((u) => u.standing === \"suspended\" || !u.isActive)\n        .length,\n    };\n  }, [usersData?.users]);\n\n  // Subscription Plans Query\n  const { data: subscriptionPlans } = useQuery({\n    queryKey: [\"/api/super-admin/subscription-plans\"],\n    retry: false,\n  });\n\n  // Activity Logs Query\n  const { data: activityLogs, isLoading: activityLogsLoading } = useQuery({\n    queryKey: [\"/api/super-admin/activity-logs\", activityFilters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      params.append(\"page\", activityFilters.page.toString());\n      params.append(\"limit\", activityFilters.limit.toString());\n      if (activityFilters.search)\n        params.append(\"search\", activityFilters.search);\n      if (activityFilters.action !== \"all\")\n        params.append(\"action\", activityFilters.action);\n      if (activityFilters.entityType !== \"all\")\n        params.append(\"entityType\", activityFilters.entityType);\n\n      const url = `/api/super-admin/activity-logs?${params}`;\n      return apiRequest(url, { method: \"GET\" });\n    },\n    retry: false,\n  });\n\n  // Helper function to get action badge variant\n  const getActionBadgeVariant = (action) => {\n    switch (action) {\n      case \"USER_CREATED\":\n      case \"PLAN_CREATED\":\n        return \"default\";\n      case \"USER_UPDATED\":\n      case \"PLAN_UPDATED\":\n      case \"UPDATE_PLATFORM_SETTINGS\":\n        return \"secondary\";\n      case \"USER_SUSPENDED\":\n      case \"USER_DELETED\":\n      case \"PLAN_DELETED\":\n        return \"destructive\";\n      case \"USER_REINSTATED\":\n      case \"CREDITS_UPDATED\":\n        return \"outline\";\n      case \"LOGIN\":\n      case \"LOGOUT\":\n        return \"secondary\";\n      default:\n        return \"default\";\n    }\n  };\n\n  // Helper function to format action text\n  const formatActionText = (action) => {\n    return action\n      .replace(/_/g, \" \")\n      .toLowerCase()\n      .replace(/\\b\\w/g, (l) => l.toUpperCase());\n  };\n\n  // Since we're doing server-side filtering, we just use the logs from the API\n  const filteredActivityLogs = activityLogs?.logs || [];\n\n  // Edit User Form\n  const editUserForm = useForm({\n    resolver: zodResolver(updateUserSchema),\n    defaultValues: {\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"\",\n      packageType: \"\",\n      isActive: true,\n      standing: \"good\",\n    },\n  });\n\n  // Create Plan Form\n  const createPlanForm = useForm({\n    resolver: zodResolver(createSubscriptionPlanSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      price: \"\",\n      billingInterval: \"monthly\",\n      features: [\"\"],\n      maxCallCredits: 0,\n      maxInvitations: 0,\n      prioritySupport: false,\n      bestSeller: false,\n      isActive: true,\n    },\n  });\n\n  // Edit Plan Form\n  const editPlanForm = useForm({\n    resolver: zodResolver(updateSubscriptionPlanSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      price: \"\",\n      billingInterval: \"monthly\",\n      features: [\"\"],\n      maxCallCredits: 0,\n      maxInvitations: 0,\n      prioritySupport: false,\n      bestSeller: false,\n      isActive: true,\n    },\n  });\n\n  // Mutations\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, updates }) => {\n      return await apiRequest(`/api/super-admin/users/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(updates),\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"User updated successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/super-admin/users\"] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/super-admin/analytics/users\"],\n      });\n      setIsEditUserOpen(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (id) => {\n      return await apiRequest(`/api/super-admin/users/${id}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"User deleted successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/super-admin/users\"] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/super-admin/analytics/users\"],\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createPlanMutation = useMutation({\n    mutationFn: async (planData) => {\n      return await apiRequest(\"/api/super-admin/subscription-plans\", {\n        method: \"POST\",\n        body: JSON.stringify(planData),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Subscription plan created successfully\",\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/super-admin/subscription-plans\"],\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/subscription-plans\"] });\n      setIsCreatePlanOpen(false);\n      createPlanForm.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePlanMutation = useMutation({\n    mutationFn: async ({ id, updates }) => {\n      return await apiRequest(`/api/super-admin/subscription-plans/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(updates),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Subscription plan updated successfully\",\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/super-admin/subscription-plans\"],\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/subscription-plans\"] });\n      setIsEditPlanOpen(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePlanMutation = useMutation({\n    mutationFn: async (id) => {\n      return await apiRequest(`/api/super-admin/subscription-plans/${id}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Subscription plan deleted successfully\",\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/super-admin/subscription-plans\"],\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/subscription-plans\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"/api/logout\", { method: \"POST\" });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been logged out successfully\",\n      });\n      setLocation(\"/super-admin/login\");\n    },\n  });\n\n  const handleEditUser = (user) => {\n    setSelectedUser(user);\n    editUserForm.reset({\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      role: user.role,\n      packageType: user.packageType,\n      isActive: user.isActive,\n      standing: user.standing,\n    });\n    setIsEditUserOpen(true);\n  };\n\n  const handleDeleteUser = (userId) => {\n    if (\n      confirm(\n        \"Are you sure you want to delete this user? This action cannot be undone.\",\n      )\n    ) {\n      deleteUserMutation.mutate(userId);\n    }\n  };\n\n  // User Management Action Handlers\n  const handleSuspendUser = async (userId) => {\n    const user = usersData?.users?.find((u) => u._id === userId);\n    if (!user) return;\n\n    setActionUser(user);\n    setShowSuspendModal(true);\n  };\n\n  const handleReinstateUser = async (userId) => {\n    const user = usersData?.users?.find((u) => u._id === userId);\n    if (!user) return;\n\n    if (\n      confirm(\n        `Are you sure you want to reinstate ${user.firstName} ${user.lastName}? This will restore their account access.`,\n      )\n    ) {\n      try {\n        await apiRequest(\"/api/super-admin/users/\" + userId + \"/reinstate\", {\n          method: \"POST\",\n        });\n        toast({\n          title: \"User Reinstated\",\n          description: `${user.firstName} ${user.lastName} has been successfully reinstated.`,\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/super-admin/users\"] });\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to reinstate user. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleRemoveUser = async (userId) => {\n    if (\n      window.confirm(\n        \"Are you sure you want to remove this user? This action cannot be undone.\",\n      )\n    ) {\n      try {\n        await apiRequest(`/api/super-admin/users/${userId}`, {\n          method: \"DELETE\",\n        });\n        toast({\n          title: \"User Removed\",\n          description: \"User has been successfully removed from the platform.\",\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/super-admin/users\"] });\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to remove user. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleManageCredits = (userId) => {\n    const user = usersData?.users?.find((u) => u._id === userId);\n    if (!user) return;\n\n    setActionUser(user);\n    setShowCreditsModal(true);\n  };\n\n  const handleMessageUser = (userId) => {\n    const user = usersData?.users?.find((u) => u._id === userId);\n    if (!user) return;\n\n    setActionUser(user);\n    setShowMessageModal(true);\n  };\n\n  // Company Credits Management Handlers\n  const handleAddCompanyCredits = (company) => {\n    setSelectedCompany(company);\n    setShowCompanyCreditsModal(true);\n  };\n\n  const handleEditCompany = (company) => {\n    setSelectedCompany(company);\n    setShowCompanyEditModal(true);\n  };\n\n  const updateCompanyCredits = (companyId, additionalCredits) => {\n    setCompanyData((prevData) =>\n      prevData.map((company) => {\n        if (company.id === companyId) {\n          const newRemaining = company.remaining + parseInt(additionalCredits);\n          const newAllocated = company.allocated + parseInt(additionalCredits);\n          return {\n            ...company,\n            remaining: newRemaining,\n            allocated: newAllocated,\n            remainingColor:\n              newRemaining > 100\n                ? \"text-green-600\"\n                : newRemaining > 50\n                  ? \"text-orange-600\"\n                  : \"text-red-600\",\n          };\n        }\n        return company;\n      }),\n    );\n  };\n\n  const updateCompanySettings = (companyId, updates) => {\n    setCompanyData((prevData) =>\n      prevData.map((company) => {\n        if (company.id === companyId) {\n          const newRemaining = updates.allocated\n            ? updates.allocated - company.used\n            : company.remaining;\n          return {\n            ...company,\n            ...updates,\n            remaining: newRemaining,\n            remainingColor:\n              newRemaining > 100\n                ? \"text-green-600\"\n                : newRemaining > 50\n                  ? \"text-orange-600\"\n                  : \"text-red-600\",\n          };\n        }\n        return company;\n      }),\n    );\n  };\n\n  // Platform Settings Handlers\n  const updatePlatformSetting = (key, value) => {\n    setPlatformSettings((prev) => ({\n      ...prev,\n      [key]: value,\n    }));\n  };\n\n  // Platform Settings Save Mutation\n  const saveSettingsMutation = useMutation({\n    mutationFn: async (settings) => {\n      return apiRequest(\"/api/super-admin/platform-settings\", {\n        method: \"PUT\",\n        body: JSON.stringify(settings),\n      });\n    },\n    onSuccess: (updatedSettings) => {\n      // Update local state with saved settings\n      setPlatformSettings({\n        maxDmsPerMonth: updatedSettings.maxDmsPerMonth || 50,\n        freeCallLimit: updatedSettings.freeCallLimit || 3,\n        creditRefundNoShows:\n          updatedSettings.creditRefundNoShows !== undefined\n            ? updatedSettings.creditRefundNoShows\n            : true,\n        creditValue: updatedSettings.creditValue || 5.0,\n        refundWindow: updatedSettings.refundWindow || 24,\n        nameVisibilityToggle:\n          updatedSettings.nameVisibilityToggle !== undefined\n            ? updatedSettings.nameVisibilityToggle\n            : true,\n        emailUnlockFeature:\n          updatedSettings.emailUnlockFeature !== undefined\n            ? updatedSettings.emailUnlockFeature\n            : true,\n        advancedAnalytics:\n          updatedSettings.advancedAnalytics !== undefined\n            ? updatedSettings.advancedAnalytics\n            : true,\n        apiAccess:\n          updatedSettings.apiAccess !== undefined\n            ? updatedSettings.apiAccess\n            : false,\n        twoFactorAuth:\n          updatedSettings.twoFactorAuth !== undefined\n            ? updatedSettings.twoFactorAuth\n            : false,\n        activityLogging:\n          updatedSettings.activityLogging !== undefined\n            ? updatedSettings.activityLogging\n            : true,\n        sessionTimeout: updatedSettings.sessionTimeout || 60,\n        passwordPolicy: updatedSettings.passwordPolicy || \"medium\",\n      });\n\n      // Invalidate and refetch platform settings\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/super-admin/platform-settings\"],\n      });\n\n      toast({\n        title: \"Settings Saved\",\n        description: \"Platform settings have been updated successfully.\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Error saving platform settings:\", error);\n      toast({\n        title: \"Error\",\n        description:\n          error.message || \"Failed to save settings. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveSettings = () => {\n    saveSettingsMutation.mutate(platformSettings);\n  };\n\n  const confirmSuspendUser = async (reason) => {\n    try {\n      await apiRequest(`/api/super-admin/users/${actionUser._id}/suspend`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          reason,\n          suspendedBy: \"super_admin\",\n        }),\n      });\n      toast({\n        title: \"User Suspended\",\n        description: `${actionUser.firstName} ${actionUser.lastName} has been suspended.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/super-admin/users\"] });\n      setShowSuspendModal(false);\n      setActionUser(null);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to suspend user. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const onEditUserSubmit = (data) => {\n    updateUserMutation.mutate({ id: selectedUser.id, updates: data });\n  };\n\n  const onCreatePlanSubmit = (data) => {\n    // Filter out empty features before submission\n    const cleanData = {\n      ...data,\n      features: data.features.filter((feature) => feature.trim() !== \"\"),\n    };\n    createPlanMutation.mutate(cleanData);\n  };\n\n  const handleEditPlan = (plan) => {\n    setSelectedPlan(plan);\n    // Ensure features array has at least one empty string if empty\n    const features =\n      plan.features && plan.features.length > 0 ? plan.features : [\"\"];\n    editPlanForm.reset({\n      name: plan.name,\n      description: plan.description,\n      price: plan.price,\n      billingInterval: plan.billingInterval,\n      features: features,\n      maxCallCredits: plan.maxCallCredits,\n      maxInvitations: plan.maxInvitations,\n      prioritySupport: plan.prioritySupport,\n      bestSeller: plan.bestSeller,\n      isActive: plan.isActive,\n    });\n    setIsEditPlanOpen(true);\n  };\n\n  const handleDeletePlan = (planId) => {\n    if (\n      confirm(\n        \"Are you sure you want to delete this subscription plan? This action cannot be undone.\",\n      )\n    ) {\n      deletePlanMutation.mutate(planId);\n    }\n  };\n\n  const onEditPlanSubmit = (data) => {\n    // Filter out empty features before submission\n    const cleanData = {\n      ...data,\n      features: data.features.filter((feature) => feature.trim() !== \"\"),\n    };\n    updatePlanMutation.mutate({ id: selectedPlan.id, updates: cleanData });\n  };\n\n  const getRoleColor = (role) => {\n    switch (role) {\n      case \"super_admin\":\n        return \"bg-red-100 text-red-800\";\n      case \"sales_rep\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"decision_maker\":\n        return \"bg-green-100 text-green-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusColor = (status) => {\n    return status ? \"bg-green-100 text-green-800\" : \"bg-red-100 text-red-800\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-16\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center\">\n              <Shield className=\"h-8 w-8 text-red-600 mr-3\" />\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">\n                  Super Admin Panel\n                </h1>\n                <p className=\"text-sm text-gray-600\">\n                  Naeberly Platform Management\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Tabs defaultValue=\"overview\" className=\"space-y-8\">\n          <div className=\"overflow-x-auto\">\n            <TabsList className=\"inline-flex h-12 p-1 gap-1\">\n              <TabsTrigger\n                value=\"overview\"\n                className=\"text-sm whitespace-nowrap px-4 py-2\"\n              >\n                Overview\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"users\"\n                className=\"text-sm whitespace-nowrap px-4 py-2\"\n              >\n                User Management\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"flags\"\n                className=\"text-sm whitespace-nowrap px-4 py-2\"\n              >\n                Flags\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"credits\"\n                className=\"text-sm whitespace-nowrap px-4 py-2\"\n              >\n                Credits\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"subscriptions\"\n                className=\"text-sm whitespace-nowrap px-4 py-2\"\n              >\n                Subscriptions\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"analytics\"\n                className=\"text-sm whitespace-nowrap px-4 py-2\"\n              >\n                Analytics\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"activity\"\n                className=\"text-sm whitespace-nowrap px-4 py-2\"\n              >\n                Activity Logs\n              </TabsTrigger>\n              {/* <TabsTrigger\n                value=\"settings\"\n                className=\"text-sm whitespace-nowrap px-4 py-2\"\n              >\n                Settings\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"system\"\n                className=\"text-sm whitespace-nowrap px-4 py-2\"\n              >\n                System\n              </TabsTrigger> */}\n            </TabsList>\n          </div>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">\n                    Total Users\n                  </CardTitle>\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {userAnalytics?.totalUsers || 0}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    +{userAnalytics?.newUsersThisMonth || 0} this month\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">\n                    Total Calls\n                  </CardTitle>\n                  <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {callAnalytics?.totalCalls || 0}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {callAnalytics?.completionRate || 0}% completion rate\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">\n                    Active Users\n                  </CardTitle>\n                  <UserCheck className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {userAnalytics?.activeUsers || 0}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {userAnalytics?.inactiveUsers || 0} inactive\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">\n                    Premium Users\n                  </CardTitle>\n                  <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {subscriptionAnalytics?.premiumUsers || 0}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {subscriptionAnalytics?.premiumPercentage || 0}% of total\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>User Distribution</CardTitle>\n                  <CardDescription>Breakdown by user roles</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Sales Representatives</span>\n                      <Badge className=\"bg-blue-100 text-blue-800\">\n                        {userAnalytics?.salesReps || 0}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Decision Makers</span>\n                      <Badge className=\"bg-green-100 text-green-800\">\n                        {userAnalytics?.decisionMakers || 0}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Subscription Breakdown</CardTitle>\n                  <CardDescription>Users by subscription type</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Free Plan</span>\n                      <Badge variant=\"outline\">\n                        {subscriptionAnalytics?.freeUsers || 0} (\n                        {subscriptionAnalytics?.freePercentage || 0}%)\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Basic Plan</span>\n                      <Badge className=\"bg-yellow-100 text-yellow-800\">\n                        {subscriptionAnalytics?.basicUsers || 0} (\n                        {subscriptionAnalytics?.basicPercentage || 0}%)\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Premium Plan</span>\n                      <Badge className=\"bg-purple-100 text-purple-800\">\n                        {subscriptionAnalytics?.premiumUsers || 0} (\n                        {subscriptionAnalytics?.premiumPercentage || 0}%)\n                      </Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Users Tab */}\n          <TabsContent value=\"users\" className=\"space-y-6\">\n            <Card>\n              <CardHeader className=\"border-b pb-4\">\n                <div className=\"flex items-center gap-3\">\n                  <Users className=\"h-6 w-6 text-gray-700\" />\n                  <CardTitle className=\"text-xl\">User Management</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                {/* Search and Filters */}\n                <div className=\"p-6 border-b\">\n                  <div className=\"relative mb-4\">\n                    <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <Input\n                      placeholder=\"Search by name, company, or email...\"\n                      className=\"pl-10 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      value={userFilters.search}\n                      onChange={(e) =>\n                        setUserFilters((prev) => ({\n                          ...prev,\n                          search: e.target.value,\n                          page: 1,\n                        }))\n                      }\n                    />\n                  </div>\n\n                  {/* Role Tabs - Responsive */}\n                  <div className=\"flex flex-wrap gap-2 sm:gap-3\">\n                    <button\n                      className={`px-2 sm:px-3 py-2 rounded-md text-xs sm:text-sm font-medium transition-colors ${\n                        userFilters.role === \"all\"\n                          ? \"bg-blue-600 text-white\"\n                          : \"text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n                      }`}\n                      onClick={() =>\n                        setUserFilters((prev) => ({\n                          ...prev,\n                          role: \"all\",\n                          page: 1,\n                        }))\n                      }\n                    >\n                      <span className=\"hidden sm:inline\">All</span>\n                      <span className=\"sm:hidden\">All</span>\n                      <span className=\"ml-1\">({userCounts.all})</span>\n                    </button>\n                    <button\n                      className={`px-2 sm:px-3 py-2 rounded-md text-xs sm:text-sm font-medium transition-colors ${\n                        userFilters.role === \"sales_rep\"\n                          ? \"bg-blue-600 text-white\"\n                          : \"text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n                      }`}\n                      onClick={() =>\n                        setUserFilters((prev) => ({\n                          ...prev,\n                          role: \"sales_rep\",\n                          page: 1,\n                        }))\n                      }\n                    >\n                      <span className=\"hidden sm:inline\">Sales Reps</span>\n                      <span className=\"sm:hidden\">Sales</span>\n                      <span className=\"ml-1\">({userCounts.sales_rep})</span>\n                    </button>\n                    <button\n                      className={`px-2 sm:px-3 py-2 rounded-md text-xs sm:text-sm font-medium transition-colors ${\n                        userFilters.role === \"decision_maker\"\n                          ? \"bg-blue-600 text-white\"\n                          : \"text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n                      }`}\n                      onClick={() =>\n                        setUserFilters((prev) => ({\n                          ...prev,\n                          role: \"decision_maker\",\n                          page: 1,\n                        }))\n                      }\n                    >\n                      <span className=\"hidden sm:inline\">Decision Makers</span>\n                      <span className=\"sm:hidden\">DMs</span>\n                      <span className=\"ml-1\">\n                        ({userCounts.decision_maker})\n                      </span>\n                    </button>\n                    <button\n                      className={`px-2 sm:px-3 py-2 rounded-md text-xs sm:text-sm font-medium transition-colors ${\n                        userFilters.role === \"flagged\"\n                          ? \"bg-blue-600 text-white\"\n                          : \"text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n                      }`}\n                      onClick={() =>\n                        setUserFilters((prev) => ({\n                          ...prev,\n                          role: \"flagged\",\n                          page: 1,\n                        }))\n                      }\n                    >\n                      Flagged{\" \"}\n                      <span className=\"ml-1\">({userCounts.flagged})</span>\n                    </button>\n                    <button\n                      className={`px-2 sm:px-3 py-2 rounded-md text-xs sm:text-sm font-medium transition-colors ${\n                        userFilters.role === \"suspended\"\n                          ? \"bg-blue-600 text-white\"\n                          : \"text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n                      }`}\n                      onClick={() =>\n                        setUserFilters((prev) => ({\n                          ...prev,\n                          role: \"suspended\",\n                          page: 1,\n                        }))\n                      }\n                    >\n                      Suspended{\" \"}\n                      <span className=\"ml-1\">({userCounts.suspended})</span>\n                    </button>\n                  </div>\n                </div>\n\n                {/* Responsive Table Header */}\n                <div className=\"hidden lg:grid lg:grid-cols-12 gap-4 px-6 py-3 bg-gray-50 text-gray-700 text-sm font-medium\">\n                  <div className=\"col-span-3\">Name & Email</div>\n                  <div className=\"col-span-2\">Company</div>\n                  <div className=\"col-span-1\">Plan</div>\n                  <div className=\"col-span-1\">Flags</div>\n                  <div className=\"col-span-1\">Score</div>\n                  <div className=\"col-span-1\">Status</div>\n                  <div className=\"col-span-3\">Actions</div>\n                </div>\n\n                {/* User Rows */}\n                <div className=\"divide-y divide-gray-200\">\n                  {filteredUsers.length > 0 ? (\n                    filteredUsers.map((user) => (\n                      <div\n                        key={user.id || user._id}\n                        className=\"p-6 hover:bg-gray-50 transition-colors\"\n                      >\n                        {/* Desktop Layout */}\n                        <div className=\"hidden lg:grid lg:grid-cols-12 gap-4\">\n                          <div className=\"col-span-3\">\n                            <div className=\"text-gray-900 font-medium\">\n                              {user.firstName} {user.lastName}\n                            </div>\n                            <div className=\"text-gray-500 text-sm\">\n                              {user.email}\n                            </div>\n                          </div>\n                          <div className=\"col-span-2\">\n                            <div className=\"text-gray-700\">\n                              {user.company || \"N/A\"}\n                            </div>\n                          </div>\n                          <div className=\"col-span-1\">\n                            <Badge\n                              className={\n                                user.packageType === \"enterprise\"\n                                  ? \"bg-orange-100 text-orange-800\"\n                                  : user.packageType === \"premium\"\n                                    ? \"bg-purple-100 text-purple-800\"\n                                    : \"bg-gray-100 text-gray-800\"\n                              }\n                            >\n                              {user.packageType === \"enterprise\"\n                                ? \"Enterprise\"\n                                : user.packageType === \"premium\"\n                                  ? \"Pro\"\n                                  : \"Free\"}\n                            </Badge>\n                          </div>\n                          <div className=\"col-span-1\">\n                            <div className=\"flex items-center justify-center w-6 h-6 rounded-full bg-red-100 text-red-700 text-xs font-medium\">\n                              {user.flags || 0}\n                            </div>\n                          </div>\n                          <div className=\"col-span-1\">\n                            <div className=\"text-green-600 font-medium\">\n                              {user.role === \"sales_rep\" ? \"85%\" : \"92%\"}\n                            </div>\n                          </div>\n                          <div className=\"col-span-1\">\n                            <Badge\n                              className={\n                                user.standing === \"suspended\"\n                                  ? \"bg-red-100 text-red-800\"\n                                  : user.isActive\n                                    ? \"bg-green-100 text-green-800\"\n                                    : \"bg-yellow-100 text-yellow-800\"\n                              }\n                            >\n                              {user.standing === \"suspended\"\n                                ? \"Suspended\"\n                                : user.isActive\n                                  ? \"Active\"\n                                  : \"Inactive\"}\n                            </Badge>\n                          </div>\n                          <div className=\"col-span-3 flex gap-2 flex-wrap\">\n                            {user.standing === \"suspended\" ? (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() =>\n                                  handleReinstateUser(user._id || user.id)\n                                }\n                                className=\"text-green-600 border-green-200 hover:bg-green-50\"\n                              >\n                                <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                Reinstate\n                              </Button>\n                            ) : (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() =>\n                                  handleSuspendUser(user._id || user.id)\n                                }\n                                className=\"text-yellow-600 border-yellow-200 hover:bg-yellow-50\"\n                              >\n                                <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                                Suspend\n                              </Button>\n                            )}\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() =>\n                                handleRemoveUser(user._id || user.id)\n                              }\n                              className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                            >\n                              <X className=\"w-3 h-3 mr-1\" />\n                              Remove\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() =>\n                                handleManageCredits(user._id || user.id)\n                              }\n                              className=\"text-green-600 border-green-200 hover:bg-green-50\"\n                            >\n                              <Plus className=\"w-3 h-3 mr-1\" />\n                              Credits\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() =>\n                                handleMessageUser(user._id || user.id)\n                              }\n                              className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                            >\n                              <MessageSquare className=\"w-3 h-3 mr-1\" />\n                              Message\n                            </Button>\n                          </div>\n                        </div>\n\n                        {/* Mobile/Tablet Layout */}\n                        <div className=\"lg:hidden space-y-4\">\n                          <div className=\"flex justify-between items-start\">\n                            <div>\n                              <div className=\"text-gray-900 font-medium text-lg\">\n                                {user.firstName} {user.lastName}\n                              </div>\n                              <div className=\"text-gray-500 text-sm\">\n                                {user.email}\n                              </div>\n                              <div className=\"text-gray-600 text-sm mt-1\">\n                                {user.company || \"N/A\"}\n                              </div>\n                            </div>\n                            <div className=\"flex flex-col items-end gap-2\">\n                              <Badge\n                                className={\n                                  user.packageType === \"enterprise\"\n                                    ? \"bg-orange-100 text-orange-800\"\n                                    : user.packageType === \"premium\"\n                                      ? \"bg-purple-100 text-purple-800\"\n                                      : \"bg-gray-100 text-gray-800\"\n                                }\n                              >\n                                {user.packageType === \"enterprise\"\n                                  ? \"Enterprise\"\n                                  : user.packageType === \"premium\"\n                                    ? \"Pro\"\n                                    : \"Free\"}\n                              </Badge>\n                              <Badge\n                                className={\n                                  user.standing === \"suspended\"\n                                    ? \"bg-red-100 text-red-800\"\n                                    : user.isActive\n                                      ? \"bg-green-100 text-green-800\"\n                                      : \"bg-yellow-100 text-yellow-800\"\n                                }\n                              >\n                                {user.standing === \"suspended\"\n                                  ? \"Suspended\"\n                                  : user.isActive\n                                    ? \"Active\"\n                                    : \"Inactive\"}\n                              </Badge>\n                            </div>\n                          </div>\n\n                          <div className=\"flex justify-between items-center text-sm\">\n                            <div className=\"flex items-center gap-4\">\n                              <div className=\"flex items-center gap-1\">\n                                <span className=\"text-gray-500\">Flags:</span>\n                                <div className=\"flex items-center justify-center w-5 h-5 rounded-full bg-red-100 text-red-700 text-xs font-medium\">\n                                  {user.flags || 0}\n                                </div>\n                              </div>\n                              <div className=\"text-gray-500\">\n                                Score:{\" \"}\n                                <span className=\"text-green-600 font-medium\">\n                                  {user.role === \"sales_rep\" ? \"85%\" : \"92%\"}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-2\">\n                            {user.standing === \"suspended\" ? (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() =>\n                                  handleReinstateUser(user._id || user.id)\n                                }\n                                className=\"text-green-600 border-green-200 hover:bg-green-50\"\n                              >\n                                <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                Reinstate\n                              </Button>\n                            ) : (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() =>\n                                  handleSuspendUser(user._id || user.id)\n                                }\n                                className=\"text-yellow-600 border-yellow-200 hover:bg-yellow-50\"\n                              >\n                                <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                                Suspend\n                              </Button>\n                            )}\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() =>\n                                handleRemoveUser(user._id || user.id)\n                              }\n                              className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                            >\n                              <X className=\"w-3 h-3 mr-1\" />\n                              Remove\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() =>\n                                handleManageCredits(user._id || user.id)\n                              }\n                              className=\"text-green-600 border-green-200 hover:bg-green-50\"\n                            >\n                              <Plus className=\"w-3 h-3 mr-1\" />\n                              Credits\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() =>\n                                handleMessageUser(user._id || user.id)\n                              }\n                              className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                            >\n                              <MessageSquare className=\"w-3 h-3 mr-1\" />\n                              Message\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"px-6 py-8 text-center text-gray-500\">\n                      {userFilters.search\n                        ? \"No users found matching your search\"\n                        : \"No users found\"}\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Subscription Plans Tab */}\n          <TabsContent value=\"subscriptions\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <CardTitle>Subscription Plans</CardTitle>\n                    <CardDescription>\n                      Manage platform subscription plans\n                    </CardDescription>\n                  </div>\n                  <Dialog\n                    open={isCreatePlanOpen}\n                    onOpenChange={setIsCreatePlanOpen}\n                  >\n                    <DialogTrigger asChild>\n                      <Button>\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Create Plan\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"sm:max-w-md\">\n                      <DialogHeader>\n                        <DialogTitle>Create Subscription Plan</DialogTitle>\n                        <DialogDescription>\n                          Add a new subscription plan to the platform\n                        </DialogDescription>\n                      </DialogHeader>\n                      <Form {...createPlanForm}>\n                        <form\n                          onSubmit={createPlanForm.handleSubmit(\n                            onCreatePlanSubmit,\n                          )}\n                          className=\"space-y-4\"\n                        >\n                          <FormField\n                            control={createPlanForm.control}\n                            name=\"name\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Plan Name</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    placeholder=\"e.g., Premium Plan\"\n                                    {...field}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={createPlanForm.control}\n                            name=\"price\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Price</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., $29\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={createPlanForm.control}\n                            name=\"maxCallCredits\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Max Call Credits</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    type=\"number\"\n                                    placeholder=\"10\"\n                                    {...field}\n                                    onChange={(e) =>\n                                      field.onChange(\n                                        parseInt(e.target.value) || 0,\n                                      )\n                                    }\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={createPlanForm.control}\n                            name=\"maxInvitations\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Max Invitations</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    type=\"number\"\n                                    placeholder=\"5\"\n                                    {...field}\n                                    onChange={(e) =>\n                                      field.onChange(\n                                        parseInt(e.target.value) || 0,\n                                      )\n                                    }\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          {/* Features Management */}\n                          <div className=\"col-span-2\">\n                            <FormLabel>Plan Features</FormLabel>\n                            <div className=\"space-y-2 mt-2\">\n                              {createPlanForm\n                                .watch(\"features\")\n                                .map((feature, index) => (\n                                  <div key={index} className=\"flex gap-2\">\n                                    <FormField\n                                      control={createPlanForm.control}\n                                      name={`features.${index}`}\n                                      render={({ field }) => (\n                                        <FormItem className=\"flex-1\">\n                                          <FormControl>\n                                            <Input\n                                              placeholder=\"Enter feature description\"\n                                              {...field}\n                                            />\n                                          </FormControl>\n                                          <FormMessage />\n                                        </FormItem>\n                                      )}\n                                    />\n                                    {createPlanForm.watch(\"features\").length >\n                                      1 && (\n                                      <Button\n                                        type=\"button\"\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => {\n                                          const features =\n                                            createPlanForm.getValues(\n                                              \"features\",\n                                            );\n                                          features.splice(index, 1);\n                                          createPlanForm.setValue(\n                                            \"features\",\n                                            features,\n                                          );\n                                        }}\n                                      >\n                                        <Trash2 className=\"h-4 w-4\" />\n                                      </Button>\n                                    )}\n                                  </div>\n                                ))}\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  const features =\n                                    createPlanForm.getValues(\"features\");\n                                  features.push(\"\");\n                                  createPlanForm.setValue(\"features\", features);\n                                }}\n                                className=\"w-full\"\n                              >\n                                <Plus className=\"h-4 w-4 mr-2\" />\n                                Add Feature\n                              </Button>\n                            </div>\n                          </div>\n                          <div className=\"flex gap-4\">\n                            <FormField\n                              control={createPlanForm.control}\n                              name=\"prioritySupport\"\n                              render={({ field }) => (\n                                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 flex-1\">\n                                  <div className=\"space-y-0.5\">\n                                    <FormLabel>Priority Support</FormLabel>\n                                  </div>\n                                  <FormControl>\n                                    <Switch\n                                      checked={field.value}\n                                      onCheckedChange={field.onChange}\n                                    />\n                                  </FormControl>\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={createPlanForm.control}\n                              name=\"bestSeller\"\n                              render={({ field }) => (\n                                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 flex-1\">\n                                  <div className=\"space-y-0.5\">\n                                    <FormLabel>Best Seller</FormLabel>\n                                  </div>\n                                  <FormControl>\n                                    <Switch\n                                      checked={field.value}\n                                      onCheckedChange={field.onChange}\n                                    />\n                                  </FormControl>\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n                          <DialogFooter>\n                            <Button\n                              type=\"submit\"\n                              disabled={createPlanMutation.isPending}\n                            >\n                              Create Plan\n                            </Button>\n                          </DialogFooter>\n                        </form>\n                      </Form>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {subscriptionPlans?.map((plan) => (\n                    <Card key={plan.id} className=\"relative\">\n                      {plan.bestSeller && (\n                        <div className=\"absolute -top-3 -right-3\">\n                          <Badge className=\"bg-blue-600 text-white px-3 py-1 rounded-full text-xs\">\n                            Best Seller\n                          </Badge>\n                        </div>\n                      )}\n                      <CardHeader>\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <CardTitle className=\"text-lg\">\n                              {plan.name}\n                            </CardTitle>\n                            <CardDescription>\n                              {plan.description}\n                            </CardDescription>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Badge\n                              className={\n                                plan.isActive\n                                  ? \"bg-green-100 text-green-800\"\n                                  : \"bg-gray-100 text-gray-800\"\n                              }\n                            >\n                              {plan.isActive ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-4\">\n                          <div className=\"text-3xl font-bold\">{plan.price}</div>\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Call Credits:</span>\n                              <span>\n                                {plan.maxCallCredits === -1\n                                  ? \"Unlimited\"\n                                  : plan.maxCallCredits}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Invitations:</span>\n                              <span>\n                                {plan.maxInvitations === -1\n                                  ? \"Unlimited\"\n                                  : plan.maxInvitations}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Priority Support:</span>\n                              <span>{plan.prioritySupport ? \"Yes\" : \"No\"}</span>\n                            </div>\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Best Seller:</span>\n                              <span>{plan.bestSeller ? \"Yes\" : \"No\"}</span>\n                            </div>\n                          </div>\n                          <div className=\"flex gap-2 pt-4\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEditPlan(plan)}\n                              className=\"flex-1\"\n                            >\n                              <Edit className=\"h-4 w-4 mr-2\" />\n                              Edit\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleDeletePlan(plan.id)}\n                              className=\"flex-1 text-red-600 hover:text-red-800\"\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Call Analytics</CardTitle>\n                  <CardDescription>\n                    Platform call performance metrics\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span>Total Calls</span>\n                      <span className=\"font-semibold\">\n                        {callAnalytics?.totalCalls || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>Completed</span>\n                      <span className=\"font-semibold text-green-600\">\n                        {callAnalytics?.completedCalls || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>Scheduled</span>\n                      <span className=\"font-semibold text-blue-600\">\n                        {callAnalytics?.scheduledCalls || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>Cancelled</span>\n                      <span className=\"font-semibold text-red-600\">\n                        {callAnalytics?.cancelledCalls || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>Average Rating</span>\n                      <span className=\"font-semibold\">\n                        {callAnalytics?.averageRating || 0}/5\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>User Growth</CardTitle>\n                  <CardDescription>\n                    Platform user growth metrics\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span>Total Users</span>\n                      <span className=\"font-semibold\">\n                        {userAnalytics?.totalUsers || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>New This Month</span>\n                      <span className=\"font-semibold text-green-600\">\n                        {userAnalytics?.newUsersThisMonth || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>Growth Rate</span>\n                      <span className=\"font-semibold\">\n                        {userAnalytics?.userGrowthRate || 0}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>Active Users</span>\n                      <span className=\"font-semibold text-blue-600\">\n                        {userAnalytics?.activeUsers || 0}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Settings Tab */}\n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2 flex items-center gap-2\">\n                <Settings className=\"w-6 h-6 text-purple-600\" />\n                Platform Settings Panel\n              </h2>\n              <p className=\"text-gray-600\">\n                Configure platform-wide settings and restrictions. Changes are\n                saved automatically when you click \"Save Settings\".\n              </p>\n              <div className=\"mt-2 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                <p className=\"text-sm text-blue-800 flex items-center gap-2\">\n                  <CheckCircle className=\"w-4 h-4\" />\n                  All fields are live-editable. Modify values and click Save\n                  Settings to apply changes.\n                </p>\n              </div>\n            </div>\n\n            {/* User Limits & Restrictions */}\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">\n                  User Limits & Restrictions\n                </CardTitle>\n                <CardDescription>\n                  Set platform usage limits and user restrictions\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label\n                      htmlFor=\"max-dms\"\n                      className=\"text-sm font-medium text-gray-700 mb-2 block\"\n                    >\n                      Max DMs per Rep/Month\n                    </Label>\n                    <Input\n                      id=\"max-dms\"\n                      type=\"number\"\n                      value={platformSettings.maxDmsPerMonth}\n                      onChange={(e) =>\n                        updatePlatformSetting(\n                          \"maxDmsPerMonth\",\n                          parseInt(e.target.value),\n                        )\n                      }\n                      className=\"bg-white border-gray-300\"\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      Maximum decision makers a sales rep can contact monthly\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label\n                      htmlFor=\"free-call-limit\"\n                      className=\"text-sm font-medium text-gray-700 mb-2 block\"\n                    >\n                      Free Plan Call Limit\n                    </Label>\n                    <Input\n                      id=\"free-call-limit\"\n                      type=\"number\"\n                      value={platformSettings.freeCallLimit}\n                      onChange={(e) =>\n                        updatePlatformSetting(\n                          \"freeCallLimit\",\n                          parseInt(e.target.value),\n                        )\n                      }\n                      className=\"bg-white border-gray-300\"\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      Number of calls allowed for free plan users\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Credit System */}\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">Credit System</CardTitle>\n                <CardDescription>\n                  Configure credit management and refund policies\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-1\">\n                        Credit Refund for No-Shows\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Automatically refund credits when DMs don't show up\n                      </p>\n                    </div>\n                    <Switch\n                      checked={platformSettings.creditRefundNoShows}\n                      onCheckedChange={(checked) =>\n                        updatePlatformSetting(\"creditRefundNoShows\", checked)\n                      }\n                      className=\"data-[state=checked]:bg-blue-600\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label\n                        htmlFor=\"credit-value\"\n                        className=\"text-sm font-medium text-gray-700 mb-2 block\"\n                      >\n                        Credit Value (USD)\n                      </Label>\n                      <Input\n                        id=\"credit-value\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={platformSettings.creditValue}\n                        onChange={(e) =>\n                          updatePlatformSetting(\n                            \"creditValue\",\n                            parseFloat(e.target.value),\n                          )\n                        }\n                        className=\"bg-white border-gray-300\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label\n                        htmlFor=\"refund-window\"\n                        className=\"text-sm font-medium text-gray-700 mb-2 block\"\n                      >\n                        Refund Window (hours)\n                      </Label>\n                      <Input\n                        id=\"refund-window\"\n                        type=\"number\"\n                        value={platformSettings.refundWindow}\n                        onChange={(e) =>\n                          updatePlatformSetting(\n                            \"refundWindow\",\n                            parseInt(e.target.value),\n                          )\n                        }\n                        className=\"bg-white border-gray-300\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Enterprise Features */}\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">\n                  Enterprise Features\n                </CardTitle>\n                <CardDescription>\n                  Control enterprise-level functionality and permissions\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-1\">\n                        Name Visibility Toggle\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Allow enterprise users to see real DM names before\n                        booking\n                      </p>\n                    </div>\n                    <Switch\n                      checked={platformSettings.nameVisibilityToggle}\n                      onCheckedChange={(checked) =>\n                        updatePlatformSetting(\"nameVisibilityToggle\", checked)\n                      }\n                      className=\"data-[state=checked]:bg-blue-600\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-1\">\n                        Email Unlock Feature\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Allow enterprise users to unlock DM email addresses\n                      </p>\n                    </div>\n                    <Switch\n                      checked={platformSettings.emailUnlockFeature}\n                      onCheckedChange={(checked) =>\n                        updatePlatformSetting(\"emailUnlockFeature\", checked)\n                      }\n                      className=\"data-[state=checked]:bg-blue-600\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-1\">\n                        Advanced Analytics\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Enable detailed performance analytics for enterprise\n                        accounts\n                      </p>\n                    </div>\n                    <Switch\n                      checked={platformSettings.advancedAnalytics}\n                      onCheckedChange={(checked) =>\n                        updatePlatformSetting(\"advancedAnalytics\", checked)\n                      }\n                      className=\"data-[state=checked]:bg-blue-600\"\n                    />\n                  </div>\n\n                  {/* <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-1\">\n                        API Access\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Allow enterprise users to access platform APIs\n                      </p>\n                    </div>\n                    <Switch\n                      checked={platformSettings.apiAccess}\n                      onCheckedChange={(checked) =>\n                        updatePlatformSetting(\"apiAccess\", checked)\n                      }\n                      className=\"data-[state=checked]:bg-blue-600\"\n                    />\n                  </div> */}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Security & Compliance */}\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">\n                  Security & Compliance\n                </CardTitle>\n                <CardDescription>\n                  Configure security policies and compliance settings\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-1\">\n                        Two-Factor Authentication\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Require 2FA for enterprise admin accounts\n                      </p>\n                    </div>\n                    <Switch\n                      checked={platformSettings.twoFactorAuth}\n                      onCheckedChange={(checked) =>\n                        updatePlatformSetting(\"twoFactorAuth\", checked)\n                      }\n                      className=\"data-[state=checked]:bg-blue-600\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-1\">\n                        Activity Logging\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Log all user actions for audit purposes\n                      </p>\n                    </div>\n                    <Switch\n                      checked={platformSettings.activityLogging}\n                      onCheckedChange={(checked) =>\n                        updatePlatformSetting(\"activityLogging\", checked)\n                      }\n                      className=\"data-[state=checked]:bg-blue-600\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label\n                        htmlFor=\"session-timeout\"\n                        className=\"text-sm font-medium text-gray-700 mb-2 block\"\n                      >\n                        Session Timeout (minutes)\n                      </Label>\n                      <Input\n                        id=\"session-timeout\"\n                        type=\"number\"\n                        value={platformSettings.sessionTimeout}\n                        onChange={(e) =>\n                          updatePlatformSetting(\n                            \"sessionTimeout\",\n                            parseInt(e.target.value),\n                          )\n                        }\n                        className=\"bg-white border-gray-300\"\n                      />\n                    </div>\n\n                    {/* <div>\n                      <Label\n                        htmlFor=\"password-policy\"\n                        className=\"text-sm font-medium text-gray-700 mb-2 block\"\n                      >\n                        Password Policy\n                      </Label>\n                      <Select\n                        value={platformSettings.passwordPolicy}\n                        onValueChange={(value) =>\n                          updatePlatformSetting(\"passwordPolicy\", value)\n                        }\n                      >\n                        <SelectTrigger className=\"bg-white border-gray-300\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"low\">Basic (8+ chars)</SelectItem>\n                          <SelectItem value=\"medium\">\n                            Medium (8+ chars, mixed case)\n                          </SelectItem>\n                          <SelectItem value=\"high\">\n                            Strong (12+ chars, mixed case, symbols)\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div> */}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Save Settings Button */}\n            <div className=\"flex justify-end\">\n              <Button\n                onClick={handleSaveSettings}\n                className=\"bg-purple-600 hover:bg-purple-700 text-white px-8 py-2\"\n              >\n                <Settings className=\"w-4 h-4 mr-2\" />\n                Save Settings\n              </Button>\n            </div>\n          </TabsContent>\n\n          {/* System Tab */}\n          <TabsContent value=\"system\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2 flex items-center gap-2\">\n                <Server className=\"w-6 h-6 text-purple-600\" />\n                System Logs & Diagnostics\n              </h2>\n              <p className=\"text-gray-600\">\n                Monitor system health and troubleshoot issues\n              </p>\n            </div>\n\n            {/* System Health Status */}\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">\n                  System Health Status\n                </CardTitle>\n                <CardDescription>\n                  Real-time status of all system components\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n                  <div className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className=\"w-4 h-4 text-blue-600\" />\n                      <span className=\"text-sm font-medium text-gray-700\">\n                        Calendar Sync\n                      </span>\n                    </div>\n                    <span className=\"text-xs text-red-600 font-medium\">\n                      Issues Detected\n                    </span>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-3 bg-red-50 rounded-lg border border-red-200\">\n                    <div className=\"flex items-center gap-2\">\n                      <Mail className=\"w-4 h-4 text-red-600\" />\n                      <span className=\"text-sm font-medium text-gray-700\">\n                        Email Delivery\n                      </span>\n                    </div>\n                    <span className=\"text-xs text-red-600 font-medium\">\n                      Issues Detected\n                    </span>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg border border-green-200\">\n                    <div className=\"flex items-center gap-2\">\n                      <Wifi className=\"w-4 h-4 text-green-600\" />\n                      <span className=\"text-sm font-medium text-gray-700\">\n                        API Services\n                      </span>\n                    </div>\n                    <span className=\"text-xs text-green-600 font-medium\">\n                      All OK\n                    </span>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-3 bg-yellow-50 rounded-lg border border-yellow-200\">\n                    <div className=\"flex items-center gap-2\">\n                      <CreditCard className=\"w-4 h-4 text-yellow-600\" />\n                      <span className=\"text-sm font-medium text-gray-700\">\n                        Payments\n                      </span>\n                    </div>\n                    <span className=\"text-xs text-green-600 font-medium\">\n                      All OK\n                    </span>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg border border-green-200\">\n                    <div className=\"flex items-center gap-2\">\n                      <Database className=\"w-4 h-4 text-green-600\" />\n                      <span className=\"text-sm font-medium text-gray-700\">\n                        Database\n                      </span>\n                    </div>\n                    <span className=\"text-xs text-green-600 font-medium\">\n                      All OK\n                    </span>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg border border-green-200\">\n                    <div className=\"flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4 text-green-600\" />\n                      <span className=\"text-sm font-medium text-gray-700\">\n                        Performance\n                      </span>\n                    </div>\n                    <span className=\"text-xs text-green-600 font-medium\">\n                      All OK\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* System Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n              <Card className=\"bg-red-50 border-red-200\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-3 bg-red-100 rounded-lg\">\n                      <XCircle className=\"w-6 h-6 text-red-600\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-red-700 font-medium\">Errors</p>\n                      <p className=\"text-2xl font-bold text-red-900\">2</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-yellow-50 border-yellow-200\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-3 bg-yellow-100 rounded-lg\">\n                      <AlertCircle className=\"w-6 h-6 text-yellow-600\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-yellow-700 font-medium\">\n                        Warnings\n                      </p>\n                      <p className=\"text-2xl font-bold text-yellow-900\">1</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-green-50 border-green-200\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-3 bg-green-100 rounded-lg\">\n                      <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-green-700 font-medium\">\n                        Resolved\n                      </p>\n                      <p className=\"text-2xl font-bold text-green-900\">1</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent System Logs */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">\n                  Recent System Logs\n                </CardTitle>\n                <CardDescription>\n                  Latest system events and error reports\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Error Log Entry */}\n                  <div className=\"flex items-center justify-between p-4 bg-red-50 rounded-lg border border-red-200\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"p-1 bg-red-100 rounded\">\n                        <XCircle className=\"w-4 h-4 text-red-600\" />\n                      </div>\n                      <div>\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <Badge variant=\"destructive\" className=\"text-xs\">\n                            Error\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          Failed to sync calendar for user john.doe@company.com\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          30/06/2025, 10:00:58\n                        </p>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"bg-white border-gray-300\"\n                    >\n                      Mark Resolved\n                    </Button>\n                  </div>\n\n                  {/* Warning Log Entry */}\n                  <div className=\"flex items-center justify-between p-4 bg-yellow-50 rounded-lg border border-yellow-200\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"p-1 bg-yellow-100 rounded\">\n                        <AlertCircle className=\"w-4 h-4 text-yellow-600\" />\n                      </div>\n                      <div>\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <Badge\n                            variant=\"secondary\"\n                            className=\"text-xs bg-yellow-100 text-yellow-800\"\n                          >\n                            Warning\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          Email bounced for jane.smith@invaliddomain.com\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          30/06/2025, 14:45:22\n                        </p>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"bg-white border-gray-300\"\n                    >\n                      Mark Resolved\n                    </Button>\n                  </div>\n\n                  {/* Resolved Log Entry */}\n                  <div className=\"flex items-center justify-between p-4 bg-green-50 rounded-lg border border-green-200\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"p-1 bg-green-100 rounded\">\n                        <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                      </div>\n                      <div>\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <Badge className=\"text-xs bg-red-100 text-red-800\">\n                            Error\n                          </Badge>\n                          <Badge className=\"text-xs bg-green-100 text-green-800\">\n                            Resolved\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          LinkedIn verification API timeout\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          30/06/2025, 14:30:56\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-xs text-green-600 font-medium\">\n                        Resolved\n                      </span>\n                    </div>\n                  </div>\n\n                  {/* Another Error Log Entry */}\n                  <div className=\"flex items-center justify-between p-4 bg-red-50 rounded-lg border border-red-200\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"p-1 bg-red-100 rounded\">\n                        <XCircle className=\"w-4 h-4 text-red-600\" />\n                      </div>\n                      <div>\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <Badge variant=\"destructive\" className=\"text-xs\">\n                            Error\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          Stripe webhook verification failed\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          30/06/2025, 14:10:56\n                        </p>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"bg-white border-gray-300\"\n                    >\n                      Mark Resolved\n                    </Button>\n                  </div>\n                </div>\n\n                {/* View More Logs */}\n                <div className=\"mt-6 text-center\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"bg-white border-gray-300\"\n                  >\n                    <Activity className=\"w-4 h-4 mr-2\" />\n                    View All System Logs\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Flags Tab */}\n          <TabsContent value=\"flags\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2 flex items-center gap-2\">\n                <Flag className=\"w-6 h-6 text-purple-600\" />\n                Flag & Behavior Reports\n              </h2>\n              <p className=\"text-gray-600\">\n                Monitor and manage user behavior reports and flagged content\n              </p>\n            </div>\n\n            {/* Flag Statistics */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n              <Card className=\"bg-red-50 border-red-200\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-3 bg-red-100 rounded-lg\">\n                      <Flag className=\"w-6 h-6 text-red-600\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-red-700 font-medium\">\n                        Open Reports\n                      </p>\n                      <p className=\"text-2xl font-bold text-red-900\">\n                        {flagStatistics?.open || 0}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-yellow-50 border-yellow-200\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-3 bg-yellow-100 rounded-lg\">\n                      <Eye className=\"w-6 h-6 text-yellow-600\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-yellow-700 font-medium\">\n                        Under Review\n                      </p>\n                      <p className=\"text-2xl font-bold text-yellow-900\">\n                        {flagStatistics?.investigating || 0}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-orange-50 border-orange-200\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-3 bg-orange-100 rounded-lg\">\n                      <UserX className=\"w-6 h-6 text-orange-600\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-orange-700 font-medium\">\n                        Suspended Users\n                      </p>\n                      <p className=\"text-2xl font-bold text-orange-900\">\n                        {flagStatistics?.suspendedUsers || 0}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-green-50 border-green-200\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-3 bg-green-100 rounded-lg\">\n                      <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-green-700 font-medium\">\n                        Resolved\n                      </p>\n                      <p className=\"text-2xl font-bold text-green-900\">\n                        {flagStatistics?.resolved || 0}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Filters and Search */}\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">Filter Reports</CardTitle>\n                <CardDescription>\n                  Filter and search through behavior reports\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <div>\n                    <Label\n                      htmlFor=\"report-status\"\n                      className=\"text-sm font-medium text-gray-700 mb-2 block\"\n                    >\n                      Report Status\n                    </Label>\n                    <Select\n                      value={flagFilters.status}\n                      onValueChange={(value) =>\n                        setFlagFilters((prev) => ({ ...prev, status: value }))\n                      }\n                    >\n                      <SelectTrigger className=\"bg-white border-gray-300\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Reports</SelectItem>\n                        <SelectItem value=\"open\">Open</SelectItem>\n                        <SelectItem value=\"investigating\">\n                          Under Review\n                        </SelectItem>\n                        <SelectItem value=\"resolved\">Resolved</SelectItem>\n                        <SelectItem value=\"dismissed\">Dismissed</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label\n                      htmlFor=\"report-type\"\n                      className=\"text-sm font-medium text-gray-700 mb-2 block\"\n                    >\n                      Report Type\n                    </Label>\n                    <Select\n                      value={flagFilters.flagType}\n                      onValueChange={(value) =>\n                        setFlagFilters((prev) => ({ ...prev, flagType: value }))\n                      }\n                    >\n                      <SelectTrigger className=\"bg-white border-gray-300\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Types</SelectItem>\n                        <SelectItem value=\"inappropriate_behavior\">\n                          Inappropriate Behavior\n                        </SelectItem>\n                        <SelectItem value=\"unresponsive\">\n                          Unresponsive\n                        </SelectItem>\n                        <SelectItem value=\"fake_profile\">\n                          Fake Profile\n                        </SelectItem>\n                        <SelectItem value=\"low_engagement\">\n                          Low Engagement\n                        </SelectItem>\n                        <SelectItem value=\"scheduling_issues\">\n                          Scheduling Issues\n                        </SelectItem>\n                        <SelectItem value=\"quality_concern\">\n                          Quality Concern\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label\n                      htmlFor=\"date-range\"\n                      className=\"text-sm font-medium text-gray-700 mb-2 block\"\n                    >\n                      Date Range\n                    </Label>\n                    <Select\n                      value={flagFilters.dateRange}\n                      onValueChange={(value) =>\n                        setFlagFilters((prev) => ({\n                          ...prev,\n                          dateRange: value,\n                        }))\n                      }\n                    >\n                      <SelectTrigger className=\"bg-white border-gray-300\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"today\">Today</SelectItem>\n                        <SelectItem value=\"week\">This Week</SelectItem>\n                        <SelectItem value=\"month\">This Month</SelectItem>\n                        <SelectItem value=\"quarter\">This Quarter</SelectItem>\n                        <SelectItem value=\"all\">All Time</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label\n                      htmlFor=\"search-reports\"\n                      className=\"text-sm font-medium text-gray-700 mb-2 block\"\n                    >\n                      Search\n                    </Label>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                      <Input\n                        id=\"search-reports\"\n                        placeholder=\"Search reports...\"\n                        className=\"pl-10 bg-white border-gray-300\"\n                        value={flagFilters.search}\n                        onChange={(e) =>\n                          setFlagFilters((prev) => ({\n                            ...prev,\n                            search: e.target.value,\n                          }))\n                        }\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Flag Reports */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">\n                  Recent Flag Reports\n                </CardTitle>\n                <CardDescription>\n                  Latest behavior reports and moderation actions\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Reporter</TableHead>\n                        <TableHead>Reported User</TableHead>\n                        <TableHead>Type</TableHead>\n                        <TableHead>Description</TableHead>\n                        <TableHead>Date</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredFlags.length === 0 ? (\n                        <TableRow>\n                          <TableCell\n                            colSpan={7}\n                            className=\"text-center py-8 text-gray-500\"\n                          >\n                            No flag reports found\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        filteredFlags.slice(0, 10).map((flag) => {\n                          const getStatusColor = (status) => {\n                            switch (status) {\n                              case \"open\":\n                                return \"bg-red-100 text-red-800\";\n                              case \"investigating\":\n                                return \"bg-yellow-100 text-yellow-800\";\n                              case \"resolved\":\n                                return \"bg-green-100 text-green-800\";\n                              case \"dismissed\":\n                                return \"bg-gray-100 text-gray-800\";\n                              default:\n                                return \"bg-gray-100 text-gray-800\";\n                            }\n                          };\n\n                          const getFlagTypeColor = (flagType) => {\n                            switch (flagType) {\n                              case \"inappropriate_behavior\":\n                                return \"bg-red-100 text-red-800\";\n                              case \"unresponsive\":\n                                return \"bg-orange-100 text-orange-800\";\n                              case \"fake_profile\":\n                                return \"bg-red-100 text-red-800\";\n                              case \"low_engagement\":\n                                return \"bg-yellow-100 text-yellow-800\";\n                              case \"scheduling_issues\":\n                                return \"bg-orange-100 text-orange-800\";\n                              case \"quality_concern\":\n                                return \"bg-purple-100 text-purple-800\";\n                              default:\n                                return \"bg-gray-100 text-gray-800\";\n                            }\n                          };\n\n                          const formatFlagType = (flagType) => {\n                            return (\n                              flagType\n                                ?.replace(/_/g, \" \")\n                                .replace(/\\b\\w/g, (l) => l.toUpperCase()) ||\n                              \"Unknown\"\n                            );\n                          };\n\n                          const formatDate = (dateString) => {\n                            if (!dateString) return \"N/A\";\n                            return new Date(dateString).toLocaleDateString(\n                              \"en-GB\",\n                            );\n                          };\n\n                          return (\n                            <TableRow key={flag._id}>\n                              <TableCell>\n                                {flag.flaggedBy?.email || \"Unknown\"}\n                              </TableCell>\n                              <TableCell>\n                                {flag.dmId?.email || \"Unknown\"}\n                              </TableCell>\n                              <TableCell>\n                                <Badge\n                                  variant=\"secondary\"\n                                  className={getFlagTypeColor(flag.flagType)}\n                                >\n                                  {formatFlagType(flag.flagType)}\n                                </Badge>\n                              </TableCell>\n                              <TableCell className=\"max-w-xs truncate\">\n                                {flag.description || \"No description\"}\n                              </TableCell>\n                              <TableCell>\n                                {formatDate(flag.createdAt)}\n                              </TableCell>\n                              <TableCell>\n                                <Badge className={getStatusColor(flag.status)}>\n                                  {flag.status?.charAt(0).toUpperCase() +\n                                    flag.status?.slice(1) || \"Unknown\"}\n                                </Badge>\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"flex gap-2\">\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    className=\"bg-white border-gray-300\"\n                                    onClick={() => handleFlagReview(flag)}\n                                  >\n                                    <Eye className=\"w-3 h-3 mr-1\" />\n                                    {flag.status === \"resolved\"\n                                      ? \"View\"\n                                      : \"Review\"}\n                                  </Button>\n                                  {flag.status !== \"resolved\" && (\n                                    <Button\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      className=\"bg-white border-gray-300 text-red-600\"\n                                      onClick={() => handleFlagAction(flag)}\n                                    >\n                                      <Ban className=\"w-3 h-3 mr-1\" />\n                                      Action\n                                    </Button>\n                                  )}\n                                </div>\n                              </TableCell>\n                            </TableRow>\n                          );\n                        })\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n\n                <div className=\"mt-6 text-center\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"bg-white border-gray-300\"\n                  >\n                    <Flag className=\"w-4 h-4 mr-2\" />\n                    View All Reports\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Credits Tab */}\n          <TabsContent value=\"credits\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2 flex items-center gap-2\">\n                <Coins className=\"w-6 h-6 text-purple-600\" />\n                Credits & Access Management\n              </h2>\n              <p className=\"text-gray-600\">\n                Manage credit allocations and access permissions across the\n                platform\n              </p>\n            </div>\n\n            {/* Credit Statistics */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n              <Card className=\"bg-blue-50 border-blue-200\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-3 bg-blue-100 rounded-lg\">\n                      <Coins className=\"w-6 h-6 text-blue-600\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-blue-700 font-medium\">\n                        Total Credits Issued\n                      </p>\n                      <p className=\"text-2xl font-bold text-blue-900\">15,742</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-green-50 border-green-200\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-3 bg-green-100 rounded-lg\">\n                      <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-green-700 font-medium\">\n                        Credits Used\n                      </p>\n                      <p className=\"text-2xl font-bold text-green-900\">\n                        12,389\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-yellow-50 border-yellow-200\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-3 bg-yellow-100 rounded-lg\">\n                      <Clock className=\"w-6 h-6 text-yellow-600\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-yellow-700 font-medium\">\n                        Pending Credits\n                      </p>\n                      <p className=\"text-2xl font-bold text-yellow-900\">\n                        3,353\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-purple-50 border-purple-200\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-3 bg-purple-100 rounded-lg\">\n                      <Lock className=\"w-6 h-6 text-purple-600\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-purple-700 font-medium\">\n                        Access Requests\n                      </p>\n                      <p className=\"text-2xl font-bold text-purple-900\">23</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Company Credit Management */}\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">\n                  Company Credit Allocations\n                </CardTitle>\n                <CardDescription>\n                  Manage credit pools for enterprise clients\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Company</TableHead>\n                        <TableHead>Plan</TableHead>\n                        <TableHead>Credits Allocated</TableHead>\n                        <TableHead>Credits Used</TableHead>\n                        <TableHead>Credits Remaining</TableHead>\n                        <TableHead>Next Renewal</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {companyData.map((company) => (\n                        <TableRow key={company.id}>\n                          <TableCell className=\"font-medium\">\n                            {company.name}\n                          </TableCell>\n                          <TableCell>\n                            <Badge className={company.planColor}>\n                              {company.plan}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>{company.allocated}</TableCell>\n                          <TableCell>{company.used}</TableCell>\n                          <TableCell>\n                            <span\n                              className={`${company.remainingColor} font-medium`}\n                            >\n                              {company.remaining}\n                            </span>\n                          </TableCell>\n                          <TableCell>{company.renewal}</TableCell>\n                          <TableCell>\n                            <div className=\"flex gap-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"bg-white border-gray-300\"\n                                onClick={() => handleAddCompanyCredits(company)}\n                              >\n                                <Plus className=\"w-3 h-3 mr-1\" />\n                                Add Credits\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"bg-white border-gray-300\"\n                                onClick={() => handleEditCompany(company)}\n                              >\n                                <Edit className=\"w-3 h-3 mr-1\" />\n                                Edit\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Access Management */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">\n                  Access Management\n                </CardTitle>\n                <CardDescription>\n                  Manage special access permissions and feature unlocks\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-1\">\n                        Enterprise Email Unlock\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Allow enterprise users to unlock DM email addresses\n                      </p>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <span className=\"text-sm text-green-600 font-medium\">\n                        47 companies enabled\n                      </span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"bg-white border-gray-300\"\n                      >\n                        <Unlock className=\"w-3 h-3 mr-1\" />\n                        Manage\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-1\">\n                        Premium Analytics Access\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Advanced reporting and analytics features\n                      </p>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <span className=\"text-sm text-blue-600 font-medium\">\n                        23 companies enabled\n                      </span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"bg-white border-gray-300\"\n                      >\n                        <BarChart className=\"w-3 h-3 mr-1\" />\n                        Manage\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-1\">\n                        API Access\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Platform API access for enterprise integrations\n                      </p>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <span className=\"text-sm text-purple-600 font-medium\">\n                        12 companies enabled\n                      </span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"bg-white border-gray-300\"\n                      >\n                        <Settings className=\"w-3 h-3 mr-1\" />\n                        Manage\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-1\">\n                        White-label Features\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Custom branding and white-label capabilities\n                      </p>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <span className=\"text-sm text-orange-600 font-medium\">\n                        8 companies enabled\n                      </span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"bg-white border-gray-300\"\n                      >\n                        <Shield className=\"w-3 h-3 mr-1\" />\n                        Manage\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Activity Logs Tab */}\n          <TabsContent value=\"activity\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Activity</CardTitle>\n                <CardDescription>\n                  Monitor platform activity and admin actions\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Activity Logs Filters */}\n                  <div className=\"flex flex-col sm:flex-row gap-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"relative\">\n                        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                        <Input\n                          placeholder=\"Search activity logs...\"\n                          className=\"pl-9\"\n                          value={activityFilters.search}\n                          onChange={(e) =>\n                            setActivityFilters((prev) => ({\n                              ...prev,\n                              search: e.target.value,\n                            }))\n                          }\n                        />\n                      </div>\n                    </div>\n                    <Select\n                      value={activityFilters.action}\n                      onValueChange={(value) =>\n                        setActivityFilters((prev) => ({\n                          ...prev,\n                          action: value,\n                        }))\n                      }\n                    >\n                      <SelectTrigger className=\"w-full sm:w-48\">\n                        <SelectValue placeholder=\"Filter by action\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Actions</SelectItem>\n                        <SelectItem value=\"USER_CREATED\">\n                          User Created\n                        </SelectItem>\n                        <SelectItem value=\"USER_UPDATED\">\n                          User Updated\n                        </SelectItem>\n                        <SelectItem value=\"USER_SUSPENDED\">\n                          User Suspended\n                        </SelectItem>\n                        <SelectItem value=\"USER_REINSTATED\">\n                          User Reinstated\n                        </SelectItem>\n                        <SelectItem value=\"USER_DELETED\">\n                          User Deleted\n                        </SelectItem>\n                        <SelectItem value=\"CREDITS_UPDATED\">\n                          Credits Updated\n                        </SelectItem>\n                        <SelectItem value=\"PLAN_CREATED\">\n                          Plan Created\n                        </SelectItem>\n                        <SelectItem value=\"PLAN_UPDATED\">\n                          Plan Updated\n                        </SelectItem>\n                        <SelectItem value=\"PLAN_DELETED\">\n                          Plan Deleted\n                        </SelectItem>\n                        <SelectItem value=\"UPDATE_PLATFORM_SETTINGS\">\n                          Platform Settings\n                        </SelectItem>\n                        <SelectItem value=\"LOGIN\">Login</SelectItem>\n                        <SelectItem value=\"LOGOUT\">Logout</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <Select\n                      value={activityFilters.entityType}\n                      onValueChange={(value) =>\n                        setActivityFilters((prev) => ({\n                          ...prev,\n                          entityType: value,\n                        }))\n                      }\n                    >\n                      <SelectTrigger className=\"w-full sm:w-48\">\n                        <SelectValue placeholder=\"Filter by entity\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Entities</SelectItem>\n                        <SelectItem value=\"user\">User</SelectItem>\n                        <SelectItem value=\"subscription_plan\">\n                          Subscription Plan\n                        </SelectItem>\n                        <SelectItem value=\"platform_settings\">\n                          Platform Settings\n                        </SelectItem>\n                        <SelectItem value=\"call\">Call</SelectItem>\n                        <SelectItem value=\"invitation\">Invitation</SelectItem>\n                        <SelectItem value=\"credits\">Credits</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Activity Logs Table */}\n                  <div className=\"border rounded-lg\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Timestamp</TableHead>\n                          <TableHead>User</TableHead>\n                          <TableHead>Action</TableHead>\n                          <TableHead>Entity</TableHead>\n                          <TableHead>Details</TableHead>\n                          <TableHead>IP Address</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {activityLogsLoading ? (\n                          <TableRow>\n                            <TableCell colSpan={6} className=\"text-center py-8\">\n                              <div className=\"flex items-center justify-center\">\n                                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n                                <span className=\"ml-2\">\n                                  Loading activity logs...\n                                </span>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ) : filteredActivityLogs.length === 0 ? (\n                          <TableRow>\n                            <TableCell\n                              colSpan={6}\n                              className=\"text-center py-8 text-gray-500\"\n                            >\n                              <Activity className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                              <p>No activity logs found</p>\n                              <p className=\"text-sm\">\n                                {activityFilters.search ||\n                                activityFilters.action !== \"all\" ||\n                                activityFilters.entityType !== \"all\"\n                                  ? \"Try adjusting your filters\"\n                                  : \"Activity logs will appear here as actions are performed\"}\n                              </p>\n                            </TableCell>\n                          </TableRow>\n                        ) : (\n                          filteredActivityLogs.map((log) => (\n                            <TableRow key={log._id}>\n                              <TableCell>\n                                <div className=\"text-sm\">\n                                  {new Date(log.timestamp).toLocaleString()}\n                                </div>\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"font-medium\">\n                                  {log.user?.firstName} {log.user?.lastName}\n                                </div>\n                                <div className=\"text-sm text-gray-500\">\n                                  {log.user?.email}\n                                </div>\n                              </TableCell>\n                              <TableCell>\n                                <Badge\n                                  variant={getActionBadgeVariant(log.action)}\n                                >\n                                  {formatActionText(log.action)}\n                                </Badge>\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"text-sm\">{log.entityType}</div>\n                              </TableCell>\n                              <TableCell>\n                                <div\n                                  className=\"text-sm max-w-xs truncate\"\n                                  title={log.details}\n                                >\n                                  {log.details}\n                                </div>\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"text-sm font-mono\">\n                                  {log.ipAddress || \"N/A\"}\n                                </div>\n                              </TableCell>\n                            </TableRow>\n                          ))\n                        )}\n                      </TableBody>\n                    </Table>\n                  </div>\n\n                  {/* Activity Logs Pagination */}\n                  {activityLogs?.total > 0 && (\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-sm text-gray-500\">\n                        Showing{\" \"}\n                        {(activityFilters.page - 1) * activityFilters.limit + 1}{\" \"}\n                        to{\" \"}\n                        {Math.min(\n                          activityFilters.page * activityFilters.limit,\n                          activityLogs.total,\n                        )}{\" \"}\n                        of {activityLogs.total} entries\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() =>\n                            setActivityFilters((prev) => ({\n                              ...prev,\n                              page: prev.page - 1,\n                            }))\n                          }\n                          disabled={activityFilters.page === 1}\n                        >\n                          Previous\n                        </Button>\n                        <div className=\"flex items-center gap-1\">\n                          {Array.from(\n                            {\n                              length: Math.min(\n                                5,\n                                Math.ceil(\n                                  activityLogs.total / activityFilters.limit,\n                                ),\n                              ),\n                            },\n                            (_, i) => {\n                              const page = i + 1;\n                              return (\n                                <Button\n                                  key={page}\n                                  variant={\n                                    activityFilters.page === page\n                                      ? \"default\"\n                                      : \"outline\"\n                                  }\n                                  size=\"sm\"\n                                  onClick={() =>\n                                    setActivityFilters((prev) => ({\n                                      ...prev,\n                                      page,\n                                    }))\n                                  }\n                                >\n                                  {page}\n                                </Button>\n                              );\n                            },\n                          )}\n                        </div>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() =>\n                            setActivityFilters((prev) => ({\n                              ...prev,\n                              page: prev.page + 1,\n                            }))\n                          }\n                          disabled={\n                            activityFilters.page >=\n                            Math.ceil(\n                              activityLogs.total / activityFilters.limit,\n                            )\n                          }\n                        >\n                          Next\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Edit User Dialog */}\n      <Dialog open={isEditUserOpen} onOpenChange={setIsEditUserOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit User</DialogTitle>\n            <DialogDescription>\n              Modify user information and settings\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...editUserForm}>\n            <form\n              onSubmit={editUserForm.handleSubmit(onEditUserSubmit)}\n              className=\"space-y-4\"\n            >\n              <FormField\n                control={editUserForm.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>First Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={editUserForm.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Last Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={editUserForm.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role</FormLabel>\n                    <Select\n                      onValueChange={field.onChange}\n                      defaultValue={field.value || \"\"}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"sales_rep\">Sales Rep</SelectItem>\n                        <SelectItem value=\"decision_maker\">\n                          Decision Maker\n                        </SelectItem>\n                        <SelectItem value=\"super_admin\">Super Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={editUserForm.control}\n                name=\"packageType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Package Type</FormLabel>\n                    <Select\n                      onValueChange={field.onChange}\n                      defaultValue={field.value || \"\"}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select package\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"free\">Free</SelectItem>\n                        <SelectItem value=\"basic\">Basic</SelectItem>\n                        <SelectItem value=\"premium\">Premium</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button type=\"submit\" disabled={updateUserMutation.isPending}>\n                  Update User\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Plan Dialog */}\n      <Dialog open={isEditPlanOpen} onOpenChange={setIsEditPlanOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Subscription Plan</DialogTitle>\n            <DialogDescription>\n              Update the subscription plan details\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...editPlanForm}>\n            <form\n              onSubmit={editPlanForm.handleSubmit(onEditPlanSubmit)}\n              className=\"space-y-4\"\n            >\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editPlanForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Plan Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter plan name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editPlanForm.control}\n                  name=\"price\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Price</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., $29/month\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={editPlanForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Plan description\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editPlanForm.control}\n                  name=\"billingInterval\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Billing Interval</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select interval\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"monthly\">Monthly</SelectItem>\n                          <SelectItem value=\"yearly\">Yearly</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editPlanForm.control}\n                  name=\"maxCallCredits\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Max Call Credits</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"Enter credits (-1 for unlimited)\"\n                          {...field}\n                          onChange={(e) =>\n                            field.onChange(parseInt(e.target.value))\n                          }\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editPlanForm.control}\n                  name=\"maxInvitations\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Max Invitations</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"Enter invitations (-1 for unlimited)\"\n                          {...field}\n                          onChange={(e) =>\n                            field.onChange(parseInt(e.target.value))\n                          }\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"space-y-4\">\n                  <FormField\n                    control={editPlanForm.control}\n                    name=\"prioritySupport\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                        <div className=\"space-y-0.5\">\n                          <FormLabel>Priority Support</FormLabel>\n                        </div>\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Features Management for Edit Form */}\n              <div>\n                <FormLabel>Plan Features</FormLabel>\n                <div className=\"space-y-2 mt-2\">\n                  {editPlanForm.watch(\"features\").map((feature, index) => (\n                    <div key={index} className=\"flex gap-2\">\n                      <FormField\n                        control={editPlanForm.control}\n                        name={`features.${index}`}\n                        render={({ field }) => (\n                          <FormItem className=\"flex-1\">\n                            <FormControl>\n                              <Input\n                                placeholder=\"Enter feature description\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      {editPlanForm.watch(\"features\").length > 1 && (\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            const features = editPlanForm.getValues(\"features\");\n                            features.splice(index, 1);\n                            editPlanForm.setValue(\"features\", features);\n                          }}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  ))}\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      const features = editPlanForm.getValues(\"features\");\n                      features.push(\"\");\n                      editPlanForm.setValue(\"features\", features);\n                    }}\n                    className=\"w-full\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Feature\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editPlanForm.control}\n                  name=\"bestSeller\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel>Best Seller</FormLabel>\n                        <FormDescription>\n                          Only one plan can be marked as best seller\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editPlanForm.control}\n                  name=\"isActive\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel>Active</FormLabel>\n                        <FormDescription>\n                          Plan visibility status\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <DialogFooter>\n                <Button type=\"submit\" disabled={updatePlanMutation.isPending}>\n                  Update Plan\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Suspend User Modal */}\n      <Dialog open={showSuspendModal} onOpenChange={setShowSuspendModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Suspend User</DialogTitle>\n            <DialogDescription>\n              Suspend {actionUser?.firstName} {actionUser?.lastName} from the\n              platform\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">\n                Reason for suspension\n              </label>\n              <textarea\n                className=\"w-full mt-1 p-2 border rounded-md\"\n                rows=\"3\"\n                placeholder=\"Enter reason for suspension...\"\n                id=\"suspension-reason\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowSuspendModal(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              className=\"bg-yellow-600 hover:bg-yellow-700\"\n              onClick={() => {\n                const reason =\n                  document.getElementById(\"suspension-reason\").value;\n                if (reason.trim()) {\n                  confirmSuspendUser(reason);\n                } else {\n                  toast({\n                    title: \"Error\",\n                    description: \"Please provide a reason for suspension.\",\n                    variant: \"destructive\",\n                  });\n                }\n              }}\n            >\n              Suspend User\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Credits Management Modal */}\n      <Dialog open={showCreditsModal} onOpenChange={setShowCreditsModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Manage Credits</DialogTitle>\n            <DialogDescription>\n              Manage credits for {actionUser?.firstName} {actionUser?.lastName}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Current Credits</label>\n                <div className=\"mt-1 p-2 border rounded-md bg-gray-50\">\n                  {actionUser?.role === \"sales_rep\" ? \"25\" : \"N/A\"}\n                </div>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">\n                  Add/Remove Credits\n                </label>\n                <input\n                  type=\"number\"\n                  className=\"w-full mt-1 p-2 border rounded-md\"\n                  placeholder=\"Enter amount (+ or -)\"\n                  id=\"credits-amount\"\n                />\n              </div>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Notes</label>\n              <textarea\n                className=\"w-full mt-1 p-2 border rounded-md\"\n                rows=\"2\"\n                placeholder=\"Optional notes for credit adjustment...\"\n                id=\"credits-notes\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowCreditsModal(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              className=\"bg-green-600 hover:bg-green-700\"\n              onClick={async () => {\n                const amount = document.getElementById(\"credits-amount\").value;\n                const notes = document.getElementById(\"credits-notes\").value;\n                if (amount) {\n                  try {\n                    await apiRequest(\n                      `/api/super-admin/users/${actionUser._id}/credits`,\n                      {\n                        method: \"POST\",\n                        body: JSON.stringify({ amount, notes }),\n                      },\n                    );\n                    toast({\n                      title: \"Credits Updated\",\n                      description: `Credits adjusted by ${amount} for ${actionUser?.firstName} ${actionUser?.lastName}`,\n                    });\n                    setShowCreditsModal(false);\n                    setActionUser(null);\n                  } catch (error) {\n                    toast({\n                      title: \"Error\",\n                      description:\n                        \"Failed to update credits. Please try again.\",\n                      variant: \"destructive\",\n                    });\n                  }\n                } else {\n                  toast({\n                    title: \"Error\",\n                    description: \"Please enter a credit amount.\",\n                    variant: \"destructive\",\n                  });\n                }\n              }}\n            >\n              Update Credits\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Message User Modal */}\n      <Dialog open={showMessageModal} onOpenChange={setShowMessageModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Send Message</DialogTitle>\n            <DialogDescription>\n              Send a message to {actionUser?.firstName} {actionUser?.lastName}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Subject</label>\n              <input\n                type=\"text\"\n                className=\"w-full mt-1 p-2 border rounded-md\"\n                placeholder=\"Message subject...\"\n                id=\"message-subject\"\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Message</label>\n              <textarea\n                className=\"w-full mt-1 p-2 border rounded-md\"\n                rows=\"4\"\n                placeholder=\"Type your message here...\"\n                id=\"message-content\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowMessageModal(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              className=\"bg-blue-600 hover:bg-blue-700\"\n              onClick={async () => {\n                const subject =\n                  document.getElementById(\"message-subject\").value;\n                const content =\n                  document.getElementById(\"message-content\").value;\n                if (subject && content) {\n                  try {\n                    await apiRequest(\n                      `/api/super-admin/users/${actionUser._id}/message`,\n                      {\n                        method: \"POST\",\n                        body: JSON.stringify({ subject, message: content }),\n                      },\n                    );\n                    toast({\n                      title: \"Message Sent\",\n                      description: `Message sent to ${actionUser?.firstName} ${actionUser?.lastName}`,\n                    });\n                    setShowMessageModal(false);\n                    setActionUser(null);\n                    // Clear form\n                    document.getElementById(\"message-subject\").value = \"\";\n                    document.getElementById(\"message-content\").value = \"\";\n                  } catch (error) {\n                    toast({\n                      title: \"Error\",\n                      description: \"Failed to send message. Please try again.\",\n                      variant: \"destructive\",\n                    });\n                  }\n                } else {\n                  toast({\n                    title: \"Error\",\n                    description: \"Please fill in both subject and message.\",\n                    variant: \"destructive\",\n                  });\n                }\n              }}\n            >\n              Send Message\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Company Credits Modal */}\n      <Dialog\n        open={showCompanyCreditsModal}\n        onOpenChange={setShowCompanyCreditsModal}\n      >\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add Credits</DialogTitle>\n            <DialogDescription>\n              Add credits to {selectedCompany?.name}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Current Credits</label>\n                <div className=\"mt-1 p-2 border rounded-md bg-gray-50\">\n                  {selectedCompany?.remaining || 0}\n                </div>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Add Credits</label>\n                <input\n                  type=\"number\"\n                  className=\"w-full mt-1 p-2 border rounded-md\"\n                  placeholder=\"Enter amount to add\"\n                  id=\"company-credits-amount\"\n                />\n              </div>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Notes</label>\n              <textarea\n                className=\"w-full mt-1 p-2 border rounded-md\"\n                rows=\"2\"\n                placeholder=\"Optional notes for credit addition...\"\n                id=\"company-credits-notes\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowCompanyCreditsModal(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              className=\"bg-green-600 hover:bg-green-700\"\n              onClick={async () => {\n                const amount = document.getElementById(\n                  \"company-credits-amount\",\n                ).value;\n                const notes = document.getElementById(\n                  \"company-credits-notes\",\n                ).value;\n                if (amount && parseInt(amount) > 0) {\n                  try {\n                    // Update the company credits in state\n                    updateCompanyCredits(selectedCompany.id, amount);\n\n                    // Simulate API call\n                    await new Promise((resolve) => setTimeout(resolve, 500));\n\n                    toast({\n                      title: \"Credits Added\",\n                      description: `Successfully added ${amount} credits to ${selectedCompany?.name}`,\n                    });\n                    setShowCompanyCreditsModal(false);\n                    setSelectedCompany(null);\n                    // Clear form\n                    document.getElementById(\"company-credits-amount\").value =\n                      \"\";\n                    document.getElementById(\"company-credits-notes\").value = \"\";\n                  } catch (error) {\n                    toast({\n                      title: \"Error\",\n                      description: \"Failed to add credits. Please try again.\",\n                      variant: \"destructive\",\n                    });\n                  }\n                } else {\n                  toast({\n                    title: \"Error\",\n                    description: \"Please enter a valid credit amount.\",\n                    variant: \"destructive\",\n                  });\n                }\n              }}\n            >\n              Add Credits\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Company Edit Modal */}\n      <Dialog\n        open={showCompanyEditModal}\n        onOpenChange={setShowCompanyEditModal}\n      >\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Company Settings</DialogTitle>\n            <DialogDescription>\n              Modify settings for {selectedCompany?.name}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Company Name</label>\n              <input\n                type=\"text\"\n                className=\"w-full mt-1 p-2 border rounded-md\"\n                defaultValue={selectedCompany?.name}\n                id=\"company-name\"\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Plan Type</label>\n              <select\n                className=\"w-full mt-1 p-2 border rounded-md\"\n                defaultValue={selectedCompany?.plan}\n                id=\"company-plan\"\n              >\n                <option value=\"Free\">Free</option>\n                <option value=\"Pro\">Pro</option>\n                <option value=\"Enterprise\">Enterprise</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">\n                Monthly Credit Allocation\n              </label>\n              <input\n                type=\"number\"\n                className=\"w-full mt-1 p-2 border rounded-md\"\n                defaultValue={selectedCompany?.allocated}\n                id=\"company-allocation\"\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Next Renewal Date</label>\n              <input\n                type=\"date\"\n                className=\"w-full mt-1 p-2 border rounded-md\"\n                id=\"company-renewal\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowCompanyEditModal(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              className=\"bg-blue-600 hover:bg-blue-700\"\n              onClick={async () => {\n                const name = document.getElementById(\"company-name\").value;\n                const plan = document.getElementById(\"company-plan\").value;\n                const allocation = parseInt(\n                  document.getElementById(\"company-allocation\").value,\n                );\n                const renewal =\n                  document.getElementById(\"company-renewal\").value;\n\n                if (name && plan && allocation) {\n                  try {\n                    // Update the company settings in state\n                    const updates = {\n                      name: name,\n                      plan: plan,\n                      allocated: allocation,\n                      renewal: renewal || selectedCompany.renewal,\n                      planColor:\n                        plan === \"Enterprise\"\n                          ? \"bg-purple-100 text-purple-800\"\n                          : plan === \"Pro\"\n                            ? \"bg-blue-100 text-blue-800\"\n                            : \"bg-gray-100 text-gray-800\",\n                    };\n\n                    updateCompanySettings(selectedCompany.id, updates);\n\n                    // Simulate API call\n                    await new Promise((resolve) => setTimeout(resolve, 500));\n\n                    toast({\n                      title: \"Company Updated\",\n                      description: `Successfully updated settings for ${name}`,\n                    });\n                    setShowCompanyEditModal(false);\n                    setSelectedCompany(null);\n                  } catch (error) {\n                    toast({\n                      title: \"Error\",\n                      description:\n                        \"Failed to update company. Please try again.\",\n                      variant: \"destructive\",\n                    });\n                  }\n                } else {\n                  toast({\n                    title: \"Error\",\n                    description: \"Please fill in all required fields.\",\n                    variant: \"destructive\",\n                  });\n                }\n              }}\n            >\n              Save Changes\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Flag Review Modal */}\n      <Dialog open={showFlagReviewModal} onOpenChange={setShowFlagReviewModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Flag Report Review</DialogTitle>\n            <DialogDescription>\n              Review the details of this flag report and take appropriate\n              action.\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedFlag && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"font-semibold text-gray-700\">\n                    Reporter\n                  </Label>\n                  <p className=\"text-sm text-gray-600\">\n                    {selectedFlag.flaggedBy?.email || \"Unknown\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold text-gray-700\">\n                    Reported User\n                  </Label>\n                  <p className=\"text-sm text-gray-600\">\n                    {selectedFlag.dmId?.email || \"Unknown\"}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"font-semibold text-gray-700\">\n                    Flag Type\n                  </Label>\n                  <p className=\"text-sm text-gray-600\">\n                    {selectedFlag.flagType\n                      ?.replace(/_/g, \" \")\n                      .replace(/\\b\\w/g, (l) => l.toUpperCase()) || \"Unknown\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold text-gray-700\">Status</Label>\n                  <Badge\n                    className={\n                      selectedFlag.status === \"open\"\n                        ? \"bg-red-100 text-red-800\"\n                        : selectedFlag.status === \"investigating\"\n                          ? \"bg-yellow-100 text-yellow-800\"\n                          : selectedFlag.status === \"resolved\"\n                            ? \"bg-green-100 text-green-800\"\n                            : \"bg-gray-100 text-gray-800\"\n                    }\n                  >\n                    {selectedFlag.status?.charAt(0).toUpperCase() +\n                      selectedFlag.status?.slice(1)}\n                  </Badge>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"font-semibold text-gray-700\">\n                  Description\n                </Label>\n                <p className=\"text-sm text-gray-600 bg-gray-50 p-3 rounded-md\">\n                  {selectedFlag.description || \"No description provided\"}\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"font-semibold text-gray-700\">\n                    Reported Date\n                  </Label>\n                  <p className=\"text-sm text-gray-600\">\n                    {selectedFlag.createdAt\n                      ? new Date(selectedFlag.createdAt).toLocaleDateString(\n                          \"en-GB\",\n                        )\n                      : \"N/A\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold text-gray-700\">\n                    Severity\n                  </Label>\n                  <p className=\"text-sm text-gray-600\">\n                    {selectedFlag.severity || \"Medium\"}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowFlagReviewModal(false)}\n            >\n              Close\n            </Button>\n            {selectedFlag?.status !== \"resolved\" && (\n              <>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    handleUpdateFlagStatus(\"investigating\");\n                  }}\n                  disabled={updateFlagStatusMutation.isPending}\n                >\n                  Mark Under Review\n                </Button>\n                <Button\n                  onClick={() => {\n                    setShowFlagReviewModal(false);\n                    setShowFlagActionModal(true);\n                  }}\n                  className=\"bg-red-600 hover:bg-red-700 text-white\"\n                >\n                  Take Action\n                </Button>\n              </>\n            )}\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Flag Action Modal */}\n      <Dialog open={showFlagActionModal} onOpenChange={setShowFlagActionModal}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Take Action on Flag</DialogTitle>\n            <DialogDescription>\n              Choose the appropriate action for this flag report.\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <Button\n              className=\"w-full justify-start\"\n              variant=\"outline\"\n              onClick={() =>\n                handleUpdateFlagStatus(\"resolved\", \"warning_issued\")\n              }\n              disabled={updateFlagStatusMutation.isPending}\n            >\n              <AlertTriangle className=\"w-4 h-4 mr-2\" />\n              Issue Warning\n            </Button>\n\n            <Button\n              className=\"w-full justify-start\"\n              variant=\"outline\"\n              onClick={() =>\n                handleUpdateFlagStatus(\"resolved\", \"user_suspended\")\n              }\n              disabled={updateFlagStatusMutation.isPending}\n            >\n              <Ban className=\"w-4 h-4 mr-2\" />\n              Suspend User\n            </Button>\n\n            <Button\n              className=\"w-full justify-start\"\n              variant=\"outline\"\n              onClick={() =>\n                handleUpdateFlagStatus(\"dismissed\", \"no_action_required\")\n              }\n              disabled={updateFlagStatusMutation.isPending}\n            >\n              <X className=\"w-4 h-4 mr-2\" />\n              Dismiss Flag\n            </Button>\n\n            <Button\n              className=\"w-full justify-start\"\n              variant=\"outline\"\n              onClick={() =>\n                handleUpdateFlagStatus(\"resolved\", \"resolved_with_contact\")\n              }\n              disabled={updateFlagStatusMutation.isPending}\n            >\n              <MessageSquare className=\"w-4 h-4 mr-2\" />\n              Resolve with Contact\n            </Button>\n          </div>\n\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowFlagActionModal(false)}\n            >\n              Cancel\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":183535},"client/src/pages/super-admin-login.jsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, Loader2, Eye, EyeOff } from \"lucide-react\";\nimport { superAdminLoginSchema } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function SuperAdminLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm({\n    resolver: zodResolver(superAdminLoginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data) => {\n      const response = await apiRequest(\"/api/super-admin/login\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome to the Super Admin Panel\",\n      });\n      setLocation(\"/super-admin/dashboard\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid super admin credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md shadow-2xl border-gray-700\">\n        <CardHeader className=\"text-center pb-6\">\n          <div className=\"mx-auto w-16 h-16 bg-red-600 rounded-full flex items-center justify-center mb-4\">\n            <Shield className=\"h-8 w-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">\n            Super Admin Access\n          </CardTitle>\n          <p className=\"text-gray-600 text-sm\">Authorized personnel only</p>\n        </CardHeader>\n\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm font-medium text-gray-700\">\n                      Admin Email\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"admin@naeberly.com\"\n                        {...field}\n                        className=\"bg-gray-50 border-gray-300\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm font-medium text-gray-700\">\n                      Admin Password\n                    </FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Enter admin password\"\n                          {...field}\n                          className=\"bg-gray-50 border-gray-300 pr-10\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowPassword(!showPassword)}\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4 text-gray-400\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                disabled={loginMutation.isPending}\n                className=\"w-full bg-red-600 hover:bg-red-700 text-white font-semibold py-3\"\n              >\n                {loginMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                    Authenticating...\n                  </>\n                ) : (\n                  <>\n                    <Shield className=\"h-4 w-4 mr-2\" />\n                    Access Admin Panel\n                  </>\n                )}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-xs text-gray-500\">\n              This area is restricted to authorized administrators only. All\n              access attempts are logged and monitored.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5725},"client/src/pages/test-signup.jsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function TestSignup() {\n  const [step, setStep] = useState(1);\n  const [userId, setUserId] = useState(null);\n  const { toast } = useToast();\n\n  const testStep1 = async () => {\n    try {\n      const response = await apiRequest('POST', '/api/sales-rep/personal-info', {\n        firstName: \"Test\",\n        lastName: \"User\",\n        email: `test${Date.now()}@example.com`,\n        password: \"TestPass123!\",\n        confirmPassword: \"TestPass123!\",\n        linkedinUrl: \"https://linkedin.com/in/testuser\",\n        linkedinVerified: true\n      });\n      const data = await response.json();\n      setUserId(data.userId);\n      setStep(2);\n      toast({ title: \"Step 1 Complete\", description: \"Personal info saved\" });\n    } catch (error) {\n      toast({ title: \"Step 1 Failed\", description: error.message, variant: \"destructive\" });\n    }\n  };\n\n  const testStep2 = async () => {\n    try {\n      const response = await apiRequest('/api/sales-rep/professional-info', {\n        method: 'POST',\n        body: JSON.stringify({\n          jobTitle: \"Sales Representative\",\n          company: \"Test Company\",\n          industry: \"Technology\",\n          companySize: \"51-200 employees\",\n          yearsInRole: \"1-2 years\"\n        })\n      });\n      setStep(3);\n      toast({ title: \"Step 2 Complete\", description: \"Professional info saved\" });\n    } catch (error) {\n      toast({ title: \"Step 2 Failed\", description: error.message, variant: \"destructive\" });\n    }\n  };\n\n  const testStep3 = async () => {\n    try {\n      const response = await apiRequest('/api/sales-rep/invites', {\n        method: 'POST',\n        body: JSON.stringify({\n          decisionMakers: [\n            { name: \"Test Decision Maker\", email: \"dm@test.com\" }\n          ]\n        })\n      });\n      setStep(4);\n      toast({ title: \"Step 3 Complete\", description: \"Invites saved\" });\n    } catch (error) {\n      toast({ title: \"Step 3 Failed\", description: error.message, variant: \"destructive\" });\n    }\n  };\n\n  const testStep4 = async () => {\n    try {\n      const response = await apiRequest('/api/sales-rep/package', {\n        method: 'POST',\n        body: JSON.stringify({\n          packageType: \"premium\"\n        })\n      });\n      setStep(5);\n      toast({ title: \"Step 4 Complete\", description: \"Signup completed!\" });\n    } catch (error) {\n      toast({ title: \"Step 4 Failed\", description: error.message, variant: \"destructive\" });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50 p-8\">\n      <div className=\"max-w-2xl mx-auto\">\n        <Card>\n          <CardContent className=\"p-8\">\n            <h1 className=\"text-2xl font-bold mb-6\">Test 4-Step Signup Flow</h1>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-4\">\n                <span className={`w-8 h-8 rounded-full flex items-center justify-center text-white ${step > 1 ? 'bg-green-500' : step === 1 ? 'bg-blue-500' : 'bg-gray-300'}`}>\n                  1\n                </span>\n                <span>Personal Information</span>\n                {step === 1 && (\n                  <Button onClick={testStep1} className=\"ml-auto\">\n                    Test Step 1\n                  </Button>\n                )}\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <span className={`w-8 h-8 rounded-full flex items-center justify-center text-white ${step > 2 ? 'bg-green-500' : step === 2 ? 'bg-blue-500' : 'bg-gray-300'}`}>\n                  2\n                </span>\n                <span>Professional Background</span>\n                {step === 2 && (\n                  <Button onClick={testStep2} className=\"ml-auto\">\n                    Test Step 2\n                  </Button>\n                )}\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <span className={`w-8 h-8 rounded-full flex items-center justify-center text-white ${step > 3 ? 'bg-green-500' : step === 3 ? 'bg-blue-500' : 'bg-gray-300'}`}>\n                  3\n                </span>\n                <span>Invite Decision Makers</span>\n                {step === 3 && (\n                  <Button onClick={testStep3} className=\"ml-auto\">\n                    Test Step 3\n                  </Button>\n                )}\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <span className={`w-8 h-8 rounded-full flex items-center justify-center text-white ${step > 4 ? 'bg-green-500' : step === 4 ? 'bg-blue-500' : 'bg-gray-300'}`}>\n                  4\n                </span>\n                <span>Choose Package</span>\n                {step === 4 && (\n                  <Button onClick={testStep4} className=\"ml-auto\">\n                    Test Step 4\n                  </Button>\n                )}\n              </div>\n\n              {step === 5 && (\n                <div className=\"bg-green-50 p-4 rounded-lg\">\n                  <h3 className=\"text-green-800 font-semibold\">✅ All Steps Complete!</h3>\n                  <p className=\"text-green-700\">User ID: {userId}</p>\n                  <p className=\"text-green-700\">The 4-step signup flow is working correctly.</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5573},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n));\nAlert.displayName = \"Alert\";\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nAlertTitle.displayName = \"AlertTitle\";\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n));\nAlertDescription.displayName = \"AlertDescription\";\n\nexport { Alert, AlertTitle, AlertDescription };\n","size_bytes":1596},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n","size_bytes":1135},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode;\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />);\nBreadcrumb.displayName = \"Breadcrumb\";\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className,\n    )}\n    {...props}\n  />\n));\nBreadcrumbList.displayName = \"BreadcrumbList\";\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n));\nBreadcrumbItem.displayName = \"BreadcrumbItem\";\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean;\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  );\n});\nBreadcrumbLink.displayName = \"BreadcrumbLink\";\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n));\nBreadcrumbPage.displayName = \"BreadcrumbPage\";\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n);\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\";\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n);\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\";\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n};\n","size_bytes":2736},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":776},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}","size_bytes":2764},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/feedback/dm-feedback.jsx":{"content":"import { useState } from \"react\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CheckCircle, XCircle, MessageSquare } from \"lucide-react\";\n\nexport default function DMFeedback() {\n  const [, params] = useRoute(\"/feedback/dm/:callId\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const callId = params?.callId;\n\n  const [formData, setFormData] = useState({\n    callTookPlace: \"\",\n    wasPoliteEngaged: \"\",\n    comments: \"\"\n  });\n\n  const submitInitialFeedbackMutation = useMutation({\n    mutationFn: async (data) => {\n      return await apiRequest(`/api/decision-maker/initial-feedback/${callId}`, {\n        method: \"POST\",\n        body: JSON.stringify(data)\n      });\n    },\n    onSuccess: (data) => {\n      if (data.proceedToRating) {\n        // Proceed to rep evaluation page for decision maker\n        setLocation(`/evaluation/rep?callId=${callId}`);\n      } else {\n        // Show success message and redirect to dashboard\n        toast({\n          title: \"Feedback Submitted\",\n          description: \"Thank you for your feedback. Your input helps us improve the platform.\",\n        });\n        setLocation(\"/decision-dashboard\");\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit feedback. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (!formData.callTookPlace || !formData.wasPoliteEngaged) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please answer both required questions.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    submitInitialFeedbackMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  if (!callId) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <XCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n              <h2 className=\"text-lg font-semibold mb-2\">Invalid Feedback Link</h2>\n              <p className=\"text-gray-600 mb-4\">This feedback link is not valid or has expired.</p>\n              <Button onClick={() => setLocation(\"/decision-dashboard\")}>\n                Go to Dashboard\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50 py-8\">\n      <div className=\"max-w-2xl mx-auto px-4\">\n        <Card className=\"shadow-lg\">\n          <CardHeader className=\"text-center bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-t-lg\">\n            <CardTitle className=\"text-2xl font-bold flex items-center justify-center gap-2\">\n              <MessageSquare className=\"h-6 w-6\" />\n              Quick Feedback\n            </CardTitle>\n            <p className=\"text-blue-100 mt-2\">\n              Help us ensure quality connections for everyone\n            </p>\n          </CardHeader>\n          \n          <CardContent className=\"p-8\">\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Question 1: Did the call take place? */}\n              <div className=\"space-y-3\">\n                <Label className=\"text-lg font-semibold text-gray-800\">\n                  1. Did the call take place?\n                </Label>\n                <RadioGroup\n                  value={formData.callTookPlace}\n                  onValueChange={(value) => handleInputChange(\"callTookPlace\", value)}\n                  className=\"space-y-2\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"yes\" id=\"call-yes\" />\n                    <Label htmlFor=\"call-yes\" className=\"flex items-center gap-2 cursor-pointer\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      Yes, the call took place\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"no\" id=\"call-no\" />\n                    <Label htmlFor=\"call-no\" className=\"flex items-center gap-2 cursor-pointer\">\n                      <XCircle className=\"h-4 w-4 text-red-600\" />\n                      No, the call did not take place\n                    </Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              {/* Question 2: Was the other person polite and engaged? */}\n              <div className=\"space-y-3\">\n                <Label className=\"text-lg font-semibold text-gray-800\">\n                  2. Was the sales representative polite and engaged?\n                </Label>\n                <RadioGroup\n                  value={formData.wasPoliteEngaged}\n                  onValueChange={(value) => handleInputChange(\"wasPoliteEngaged\", value)}\n                  className=\"space-y-2\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"yes\" id=\"polite-yes\" />\n                    <Label htmlFor=\"polite-yes\" className=\"flex items-center gap-2 cursor-pointer\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      Yes, they were polite and engaged\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"no\" id=\"polite-no\" />\n                    <Label htmlFor=\"polite-no\" className=\"flex items-center gap-2 cursor-pointer\">\n                      <XCircle className=\"h-4 w-4 text-red-600\" />\n                      No, they were not polite or engaged\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"other\" id=\"polite-other\" />\n                    <Label htmlFor=\"polite-other\" className=\"flex items-center gap-2 cursor-pointer\">\n                      <MessageSquare className=\"h-4 w-4 text-yellow-600\" />\n                      Other (please explain below)\n                    </Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              {/* Optional comments */}\n              <div className=\"space-y-3\">\n                <Label className=\"text-lg font-semibold text-gray-800\">\n                  Additional Comments (Optional)\n                </Label>\n                <Textarea\n                  value={formData.comments}\n                  onChange={(e) => handleInputChange(\"comments\", e.target.value)}\n                  placeholder=\"Any additional feedback or details you'd like to share...\"\n                  rows={4}\n                  className=\"resize-none\"\n                />\n              </div>\n\n              {/* Submit button */}\n              <div className=\"flex justify-end pt-6\">\n                <Button\n                  type=\"submit\"\n                  disabled={submitInitialFeedbackMutation.isPending}\n                  className=\"px-8 py-2 bg-blue-600 hover:bg-blue-700\"\n                >\n                  {submitInitialFeedbackMutation.isPending ? \"Submitting...\" : \"Submit Feedback\"}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-6 text-center text-sm text-gray-600\">\n          <p>Your feedback helps maintain quality and trust across the Naeberly platform.</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8275},"client/src/pages/feedback/rep-feedback.jsx":{"content":"import { useState } from \"react\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CheckCircle, XCircle, MessageSquare } from \"lucide-react\";\n\nexport default function RepFeedback() {\n  const [, params] = useRoute(\"/feedback/rep/:callId\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const callId = params?.callId;\n\n  const [formData, setFormData] = useState({\n    callTookPlace: \"\",\n    wasPoliteEngaged: \"\",\n    comments: \"\"\n  });\n\n  const submitInitialFeedbackMutation = useMutation({\n    mutationFn: async (data) => {\n      return await apiRequest(`/api/sales-rep/initial-feedback/${callId}`, {\n        method: \"POST\",\n        body: JSON.stringify(data)\n      });\n    },\n    onSuccess: (data) => {\n      if (data.proceedToRating) {\n        // Proceed to sales rep evaluation page\n        setLocation(`/evaluation/sales-rep?callId=${callId}`);\n      } else {\n        // Show success message and redirect to dashboard\n        toast({\n          title: \"Feedback Submitted\",\n          description: \"Thank you for your feedback. Your input helps us improve the platform.\",\n        });\n        setLocation(\"/sales-dashboard\");\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit feedback. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (!formData.callTookPlace || !formData.wasPoliteEngaged) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please answer both required questions.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    submitInitialFeedbackMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  if (!callId) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <XCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n              <h2 className=\"text-lg font-semibold mb-2\">Invalid Feedback Link</h2>\n              <p className=\"text-gray-600 mb-4\">This feedback link is not valid or has expired.</p>\n              <Button onClick={() => setLocation(\"/sales-dashboard\")}>\n                Go to Dashboard\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-slate-50 py-8\">\n      <div className=\"max-w-2xl mx-auto px-4\">\n        <Card className=\"shadow-lg\">\n          <CardHeader className=\"text-center bg-gradient-to-r from-green-600 to-green-700 text-white rounded-t-lg\">\n            <CardTitle className=\"text-2xl font-bold flex items-center justify-center gap-2\">\n              <MessageSquare className=\"h-6 w-6\" />\n              Quick Feedback\n            </CardTitle>\n            <p className=\"text-green-100 mt-2\">\n              Help us maintain quality connections across the platform\n            </p>\n          </CardHeader>\n          \n          <CardContent className=\"p-8\">\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Question 1: Did the call take place? */}\n              <div className=\"space-y-3\">\n                <Label className=\"text-lg font-semibold text-gray-800\">\n                  1. Did the call take place?\n                </Label>\n                <RadioGroup\n                  value={formData.callTookPlace}\n                  onValueChange={(value) => handleInputChange(\"callTookPlace\", value)}\n                  className=\"space-y-2\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"yes\" id=\"call-yes\" />\n                    <Label htmlFor=\"call-yes\" className=\"flex items-center gap-2 cursor-pointer\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      Yes, the call took place\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"no\" id=\"call-no\" />\n                    <Label htmlFor=\"call-no\" className=\"flex items-center gap-2 cursor-pointer\">\n                      <XCircle className=\"h-4 w-4 text-red-600\" />\n                      No, the call did not take place\n                    </Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              {/* Question 2: Was the other person polite and engaged? */}\n              <div className=\"space-y-3\">\n                <Label className=\"text-lg font-semibold text-gray-800\">\n                  2. Was the decision maker polite and engaged?\n                </Label>\n                <RadioGroup\n                  value={formData.wasPoliteEngaged}\n                  onValueChange={(value) => handleInputChange(\"wasPoliteEngaged\", value)}\n                  className=\"space-y-2\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"yes\" id=\"polite-yes\" />\n                    <Label htmlFor=\"polite-yes\" className=\"flex items-center gap-2 cursor-pointer\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      Yes, they were polite and engaged\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"no\" id=\"polite-no\" />\n                    <Label htmlFor=\"polite-no\" className=\"flex items-center gap-2 cursor-pointer\">\n                      <XCircle className=\"h-4 w-4 text-red-600\" />\n                      No, they were not polite or engaged\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"other\" id=\"polite-other\" />\n                    <Label htmlFor=\"polite-other\" className=\"flex items-center gap-2 cursor-pointer\">\n                      <MessageSquare className=\"h-4 w-4 text-yellow-600\" />\n                      Other (please explain below)\n                    </Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              {/* Optional comments */}\n              <div className=\"space-y-3\">\n                <Label className=\"text-lg font-semibold text-gray-800\">\n                  Additional Comments (Optional)\n                </Label>\n                <Textarea\n                  value={formData.comments}\n                  onChange={(e) => handleInputChange(\"comments\", e.target.value)}\n                  placeholder=\"Any additional feedback or details you'd like to share...\"\n                  rows={4}\n                  className=\"resize-none\"\n                />\n              </div>\n\n              {/* Submit button */}\n              <div className=\"flex justify-end pt-6\">\n                <Button\n                  type=\"submit\"\n                  disabled={submitInitialFeedbackMutation.isPending}\n                  className=\"px-8 py-2 bg-green-600 hover:bg-green-700\"\n                >\n                  {submitInitialFeedbackMutation.isPending ? \"Submitting...\" : \"Submit Feedback\"}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-6 text-center text-sm text-gray-600\">\n          <p>Your feedback helps maintain quality and trust across the Naeberly platform.</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8268},"client/src/pages/signup/availability-preferences.jsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { ArrowLeft, X } from \"lucide-react\";\n\nexport default function AvailabilityPreferences() {\n  const [, setLocation] = useLocation();\n  const [formData, setFormData] = useState({\n    weeklyCallSlots: \"\",\n    timeZone: \"\",\n    callTypes: [],\n  });\n\n  const callTypeOptions = [\n    \"Product Demos\",\n    \"Industry Insights\",\n    \"Partnership Discussions\",\n    \"Investment Opportunities\",\n    \"Recruitment\",\n    \"Advisory Calls\",\n  ];\n\n  const handleInputChange = (field, value) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const toggleCallType = (type) => {\n    setFormData((prev) => ({\n      ...prev,\n      callTypes: prev.callTypes.includes(type)\n        ? prev.callTypes.filter((t) => t !== type)\n        : [...prev.callTypes, type],\n    }));\n  };\n\n  const handleNext = () => {\n    setLocation(\"/signup/nominate\");\n  };\n\n  const handleBack = () => {\n    setLocation(\"/signup/professional\");\n  };\n\n  const canProceed =\n    formData.weeklyCallSlots &&\n    formData.timeZone &&\n    formData.callTypes.length > 0;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50\">\n      <div className=\"max-w-2xl mx-auto px-4 py-8\">\n        {/* Progress Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-sm font-medium text-gray-600\">\n              Step 3 of 5\n            </span>\n            <span className=\"text-sm font-medium text-gray-600\">\n              60% Complete\n            </span>\n          </div>\n          <Progress value={60} className=\"h-2\" />\n        </div>\n\n        {/* Main Form Card */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Availability Preferences\n              </h1>\n              <p className=\"text-gray-600\">\n                Set your calling preferences and availability\n              </p>\n            </div>\n\n            <div className=\"space-y-8\">\n              {/* Weekly Call Slots and Time Zone */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label\n                    htmlFor=\"weeklyCallSlots\"\n                    className=\"text-sm font-medium text-gray-700\"\n                  >\n                    Weekly Call Slots *\n                  </Label>\n                  <Select\n                    onValueChange={(value) =>\n                      handleInputChange(\"weeklyCallSlots\", value)\n                    }\n                  >\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue placeholder=\"3-5 calls per week\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1-2\">1-2 calls per week</SelectItem>\n                      <SelectItem value=\"3-5\">3-5 calls per week</SelectItem>\n                      <SelectItem value=\"5-10\">5-10 calls per week</SelectItem>\n                      <SelectItem value=\"10+\">10+ calls per week</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label\n                    htmlFor=\"timeZone\"\n                    className=\"text-sm font-medium text-gray-700\"\n                  >\n                    Preferred Time Zone *\n                  </Label>\n                  <Select\n                    onValueChange={(value) =>\n                      handleInputChange(\"timeZone\", value)\n                    }\n                  >\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue placeholder=\"EST\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"PST\">PST</SelectItem>\n                      <SelectItem value=\"MST\">MST</SelectItem>\n                      <SelectItem value=\"CST\">CST</SelectItem>\n                      <SelectItem value=\"EST\">EST</SelectItem>\n                      <SelectItem value=\"GMT\">GMT</SelectItem>\n                      <SelectItem value=\"CET\">CET</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Types of Calls */}\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-4 block\">\n                  Types of Calls You're Open To *\n                </Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  {callTypeOptions.map((type) => (\n                    <div\n                      key={type}\n                      className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${\n                        formData.callTypes.includes(type)\n                          ? \"bg-purple-50 border-purple-300\"\n                          : \"bg-white border-gray-200 hover:border-gray-300\"\n                      }`}\n                      onClick={() => toggleCallType(type)}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <span\n                          className={`font-medium ${\n                            formData.callTypes.includes(type)\n                              ? \"text-purple-700\"\n                              : \"text-gray-900\"\n                          }`}\n                        >\n                          {type}\n                        </span>\n                        {formData.callTypes.includes(type) && (\n                          <div className=\"w-6 h-6 bg-purple-600 rounded-full flex items-center justify-center\">\n                            <X className=\"text-white\" size={12} />\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Navigation */}\n        <div className=\"flex justify-between items-center mt-8\">\n          <Button\n            variant=\"ghost\"\n            onClick={handleBack}\n            className=\"text-gray-600\"\n          >\n            <ArrowLeft className=\"mr-2\" size={16} />\n            Back\n          </Button>\n          <Button\n            onClick={handleNext}\n            disabled={!canProceed}\n            className=\"bg-purple-600 hover:bg-purple-700 px-8\"\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6984},"client/src/pages/signup/choose-package.jsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, CheckCircle, User, Users, Crown } from \"lucide-react\";\n\nexport default function ChoosePackage() {\n  const [, setLocation] = useLocation();\n  const [selectedPackage, setSelectedPackage] = useState(\"individual\");\n\n  const handleBack = () => {\n    setLocation(\"/signup/nominate\");\n  };\n\n  const handleComplete = () => {\n    // Complete registration and redirect to dashboard\n    setLocation(\"/decision-dashboard\");\n  };\n\n  const packages = [\n    {\n      id: \"individual\",\n      name: \"Individual DM\",\n      description: \"Perfect for individual decision makers\",\n      icon: User,\n      features: [\n        \"Personal call calendar\",\n        \"Direct rep connections\",\n        \"Individual analytics\",\n      ],\n      color: \"blue\",\n      selected: selectedPackage === \"individual\",\n    },\n    {\n      id: \"pro-team\",\n      name: \"Pro Team Access\",\n      description: \"For DMs who want to grant their entire sales team access\",\n      icon: Users,\n      badge: \"Popular\",\n      features: [\n        \"Everything in Individual\",\n        \"Up to 10 team members\",\n        \"8 calls per rep per month\",\n        \"Team analytics dashboard\",\n        \"Priority support\",\n      ],\n      color: \"blue\",\n      selected: selectedPackage === \"pro-team\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50\">\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        {/* Progress Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-sm font-medium text-gray-600\">\n              Step 5 of 5\n            </span>\n            <span className=\"text-sm font-medium text-gray-600\">\n              100% Complete\n            </span>\n          </div>\n          <Progress value={100} className=\"h-2\" />\n        </div>\n\n        {/* Main Content */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Choose Your Package\n          </h1>\n          <p className=\"text-gray-600\">\n            Select the option that best fits your needs\n          </p>\n        </div>\n\n        {/* Package Options */}\n        <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto mb-8\">\n          {packages.map((pkg) => {\n            const IconComponent = pkg.icon;\n            return (\n              <Card\n                key={pkg.id}\n                className={`relative cursor-pointer transition-all ${\n                  pkg.selected\n                    ? `border-2 border-blue-600 shadow-xl`\n                    : \"border border-gray-200 shadow-lg hover:shadow-xl\"\n                }`}\n                onClick={() => setSelectedPackage(pkg.id)}\n              >\n                {pkg.badge && (\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                    <Badge className=\"bg-blue-600 text-white\">\n                      <Crown className=\"mr-1\" size={12} />\n                      {pkg.badge}\n                    </Badge>\n                  </div>\n                )}\n                <CardContent className=\"p-8\">\n                  <div className=\"text-center mb-6\">\n                    <div className=\"w-16 h-16 mx-auto mb-4 rounded-2xl flex items-center justify-center bg-blue-100\">\n                      <IconComponent className=\"text-blue-600\" size={32} />\n                    </div>\n                    <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                      {pkg.name}\n                    </h3>\n                    <p className=\"text-gray-600\">{pkg.description}</p>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    {pkg.features.map((feature, index) => (\n                      <div\n                        key={index}\n                        className=\"flex items-center text-gray-600\"\n                      >\n                        <CheckCircle\n                          className=\"text-green-600 mr-3 flex-shrink-0\"\n                          size={16}\n                        />\n                        <span className=\"text-sm\">{feature}</span>\n                      </div>\n                    ))}\n                  </div>\n\n                  {pkg.selected && (\n                    <div className=\"mt-6 text-center\">\n                      <div className=\"inline-flex items-center px-4 py-2 rounded-full text-sm font-medium bg-blue-100 text-blue-700\">\n                        <CheckCircle className=\"mr-2\" size={16} />\n                        Selected\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Navigation */}\n        <div className=\"flex justify-between items-center\">\n          <Button\n            variant=\"ghost\"\n            onClick={handleBack}\n            className=\"text-gray-600\"\n          >\n            <ArrowLeft className=\"mr-2\" size={16} />\n            Back\n          </Button>\n          <Button\n            onClick={handleComplete}\n            className=\"bg-blue-600 hover:bg-blue-700 px-8\"\n          >\n            <CheckCircle className=\"mr-2\" size={16} />\n            Complete Registration\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5583},"client/src/pages/signup/nominate-sales-rep.jsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ArrowLeft, Users } from \"lucide-react\";\n\nexport default function NominateSalesRep() {\n  const [, setLocation] = useLocation();\n  const [formData, setFormData] = useState({\n    salesRepEmail: \"\",\n    relationship: \"\"\n  });\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleNext = () => {\n    setLocation(\"/signup/package\");\n  };\n\n  const handleBack = () => {\n    setLocation(\"/signup/availability\");\n  };\n\n  const relationshipOptions = [\n    \"Current business partner\",\n    \"Former colleague\",\n    \"Industry contact\",\n    \"Vendor/supplier\",\n    \"Customer/client\",\n    \"Other\"\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50\">\n      <div className=\"max-w-2xl mx-auto px-4 py-8\">\n        {/* Progress Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-sm font-medium text-gray-600\">Step 4 of 5</span>\n            <span className=\"text-sm font-medium text-gray-600\">80% Complete</span>\n          </div>\n          <Progress value={80} className=\"h-2\" />\n        </div>\n\n        {/* Main Form Card */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Nominate a Sales Rep</h1>\n              <p className=\"text-gray-600\">Optional: Nominate a sales rep to gain platform access</p>\n            </div>\n\n            <div className=\"space-y-6\">\n              {/* How Rep Nomination Works */}\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-blue-600 rounded flex items-center justify-center\">\n                    <Users className=\"text-white\" size={16} />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold text-gray-900 mb-2\">How Rep Nomination Works</h3>\n                    <ul className=\"space-y-1 text-sm text-blue-700\">\n                      <li>• Nominate a sales rep you know to get platform access</li>\n                      <li>• They'll receive an invitation to join Naeborly</li>\n                      <li>• You both benefit from the connection</li>\n                      <li>• This step is completely optional</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n\n              {/* Sales Rep Email */}\n              <div>\n                <Label htmlFor=\"salesRepEmail\" className=\"text-sm font-medium text-gray-700\">\n                  Sales Rep Email\n                </Label>\n                <Input\n                  id=\"salesRepEmail\"\n                  type=\"email\"\n                  placeholder=\"mjp@gmail.com\"\n                  value={formData.salesRepEmail}\n                  onChange={(e) => handleInputChange(\"salesRepEmail\", e.target.value)}\n                  className=\"mt-1\"\n                />\n              </div>\n\n              {/* Relationship */}\n              <div>\n                <Label htmlFor=\"relationship\" className=\"text-sm font-medium text-gray-700\">\n                  Your Relationship\n                </Label>\n                <Select onValueChange={(value) => handleInputChange(\"relationship\", value)}>\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue placeholder=\"Current business partner\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {relationshipOptions.map((option) => (\n                      <SelectItem key={option} value={option.toLowerCase().replace(/\\s+/g, '-')}>\n                        {option}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Navigation */}\n        <div className=\"flex justify-between items-center mt-8\">\n          <Button variant=\"ghost\" onClick={handleBack} className=\"text-gray-600\">\n            <ArrowLeft className=\"mr-2\" size={16} />\n            Back\n          </Button>\n          <Button\n            onClick={handleNext}\n            className=\"bg-blue-600 hover:bg-purple-700 px-8\"\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4938},"client/src/pages/signup/personal-info.jsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ArrowLeft, Linkedin, CheckCircle } from \"lucide-react\";\n\nexport default function PersonalInfo() {\n  const [, setLocation] = useLocation();\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    linkedinUrl: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const [linkedinVerified, setLinkedinVerified] = useState(false);\n\n  const handleInputChange = (field, value) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleLinkedinVerify = async () => {\n    if (!formData.linkedinUrl) {\n      return;\n    }\n\n    try {\n      const response = await fetch(\"/api/verify-linkedin\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ linkedinUrl: formData.linkedinUrl }),\n      });\n\n      const result = await response.json();\n\n      if (result.verified) {\n        setLinkedinVerified(true);\n      }\n    } catch (error) {\n      console.error(\"LinkedIn verification failed:\", error);\n    }\n  };\n\n  const handleNext = () => {\n    // Validate form and proceed to next step\n    setLocation(\"/signup/professional\");\n  };\n\n  const canProceed =\n    formData.firstName &&\n    formData.lastName &&\n    formData.email &&\n    linkedinVerified &&\n    formData.password &&\n    formData.confirmPassword;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50\">\n      <div className=\"max-w-2xl mx-auto px-4 py-8\">\n        {/* Progress Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-sm font-medium text-gray-600\">\n              Step 1 of 5\n            </span>\n            <span className=\"text-sm font-medium text-gray-600\">\n              20% Complete\n            </span>\n          </div>\n          <Progress value={20} className=\"h-2\" />\n        </div>\n\n        {/* Main Form Card */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Personal Information\n              </h1>\n              <p className=\"text-gray-600\">\n                Let's start with your basic details and LinkedIn verification\n              </p>\n            </div>\n\n            <div className=\"space-y-6\">\n              {/* Name Fields */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label\n                    htmlFor=\"firstName\"\n                    className=\"text-sm font-medium text-gray-700\"\n                  >\n                    First Name *\n                  </Label>\n                  <Input\n                    id=\"firstName\"\n                    placeholder=\"Enter your first name\"\n                    value={formData.firstName}\n                    onChange={(e) =>\n                      handleInputChange(\"firstName\", e.target.value)\n                    }\n                    className=\"mt-1\"\n                  />\n                </div>\n                <div>\n                  <Label\n                    htmlFor=\"lastName\"\n                    className=\"text-sm font-medium text-gray-700\"\n                  >\n                    Last Name *\n                  </Label>\n                  <Input\n                    id=\"lastName\"\n                    placeholder=\"Enter your last name\"\n                    value={formData.lastName}\n                    onChange={(e) =>\n                      handleInputChange(\"lastName\", e.target.value)\n                    }\n                    className=\"mt-1\"\n                  />\n                </div>\n              </div>\n\n              {/* Email */}\n              <div>\n                <Label\n                  htmlFor=\"email\"\n                  className=\"text-sm font-medium text-gray-700\"\n                >\n                  Email Address *\n                </Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email address\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                  className=\"mt-1\"\n                />\n              </div>\n\n              {/* LinkedIn Verification */}\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6\">\n                <div className=\"flex items-start space-x-3 mb-4\">\n                  <div className=\"w-8 h-8 bg-blue-600 rounded flex items-center justify-center\">\n                    <Linkedin className=\"text-white\" size={16} />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold text-gray-900 mb-1\">\n                      LinkedIn Verification Required\n                    </h3>\n                    <p className=\"text-sm text-gray-600\">\n                      We verify all decision makers through LinkedIn to ensure\n                      authentic connections\n                    </p>\n                  </div>\n                  {linkedinVerified && (\n                    <CheckCircle className=\"text-green-600\" size={20} />\n                  )}\n                </div>\n\n                <div className=\"mb-4\">\n                  <Label\n                    htmlFor=\"linkedinUrl\"\n                    className=\"text-sm font-medium text-gray-700\"\n                  >\n                    LinkedIn Profile URL *\n                  </Label>\n                  <Input\n                    id=\"linkedinUrl\"\n                    placeholder=\"https://linkedin.com/in/your-profile\"\n                    value={formData.linkedinUrl}\n                    onChange={(e) =>\n                      handleInputChange(\"linkedinUrl\", e.target.value)\n                    }\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                {linkedinVerified ? (\n                  <div className=\"flex items-center text-green-600 text-sm font-medium\">\n                    <CheckCircle className=\"mr-2\" size={16} />\n                    LinkedIn Verified\n                  </div>\n                ) : (\n                  <Button\n                    onClick={handleLinkedinVerify}\n                    disabled={!formData.linkedinUrl}\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                  >\n                    <Linkedin className=\"mr-2\" size={16} />\n                    Verify LinkedIn Profile\n                  </Button>\n                )}\n              </div>\n\n              {/* Password Fields */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label\n                    htmlFor=\"password\"\n                    className=\"text-sm font-medium text-gray-700\"\n                  >\n                    Password *\n                  </Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Create a password\"\n                    value={formData.password}\n                    onChange={(e) =>\n                      handleInputChange(\"password\", e.target.value)\n                    }\n                    className=\"mt-1\"\n                  />\n                </div>\n                <div>\n                  <Label\n                    htmlFor=\"confirmPassword\"\n                    className=\"text-sm font-medium text-gray-700\"\n                  >\n                    Confirm Password *\n                  </Label>\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    placeholder=\"Confirm your password\"\n                    value={formData.confirmPassword}\n                    onChange={(e) =>\n                      handleInputChange(\"confirmPassword\", e.target.value)\n                    }\n                    className=\"mt-1\"\n                  />\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Navigation */}\n        <div className=\"flex justify-between items-center mt-8\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(\"/\")}\n            className=\"text-gray-600\"\n          >\n            <ArrowLeft className=\"mr-2\" size={16} />\n            Back\n          </Button>\n          <Button\n            onClick={handleNext}\n            disabled={!canProceed}\n            className=\"bg-blue-600 hover:bg-purple-700 px-8\"\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8984},"client/src/pages/signup/professional-background.jsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function ProfessionalBackground() {\n  const [, setLocation] = useLocation();\n  const [formData, setFormData] = useState({\n    jobTitle: \"\",\n    company: \"\",\n    industry: \"\",\n    companySize: \"\",\n    yearsInRole: \"\",\n  });\n\n  const handleInputChange = (field, value) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleNext = () => {\n    setLocation(\"/signup/availability\");\n  };\n\n  const handleBack = () => {\n    setLocation(\"/signup/personal\");\n  };\n\n  const canProceed =\n    formData.jobTitle &&\n    formData.company &&\n    formData.industry &&\n    formData.companySize &&\n    formData.yearsInRole;\n\n  const industries = [\n    \"Technology\",\n    \"Healthcare\",\n    \"Finance\",\n    \"Manufacturing\",\n    \"Retail\",\n    \"Education\",\n    \"Government\",\n    \"Non-profit\",\n    \"Other\",\n  ];\n\n  const companySizes = [\n    \"1-10 employees\",\n    \"11-50 employees\",\n    \"51-200 employees\",\n    \"201-500 employees\",\n    \"501-1000 employees\",\n    \"1000+ employees\",\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50\">\n      <div className=\"max-w-2xl mx-auto px-4 py-8\">\n        {/* Progress Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-sm font-medium text-gray-600\">\n              Step 2 of 5\n            </span>\n            <span className=\"text-sm font-medium text-gray-600\">\n              40% Complete\n            </span>\n          </div>\n          <Progress value={40} className=\"h-2\" />\n        </div>\n\n        {/* Main Form Card */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Professional Background\n              </h1>\n              <p className=\"text-gray-600\">\n                Tell us about your role and company\n              </p>\n            </div>\n\n            <div className=\"space-y-6\">\n              {/* Job Title */}\n              <div>\n                <Label\n                  htmlFor=\"jobTitle\"\n                  className=\"text-sm font-medium text-gray-700\"\n                >\n                  Job Title *\n                </Label>\n                <Input\n                  id=\"jobTitle\"\n                  placeholder=\"e.g., Chief Revenue Officer, VP of Sales\"\n                  value={formData.jobTitle}\n                  onChange={(e) =>\n                    handleInputChange(\"jobTitle\", e.target.value)\n                  }\n                  className=\"mt-1\"\n                />\n              </div>\n\n              {/* Company */}\n              <div>\n                <Label\n                  htmlFor=\"company\"\n                  className=\"text-sm font-medium text-gray-700\"\n                >\n                  Company *\n                </Label>\n                <Input\n                  id=\"company\"\n                  placeholder=\"Enter your company name\"\n                  value={formData.company}\n                  onChange={(e) => handleInputChange(\"company\", e.target.value)}\n                  className=\"mt-1\"\n                />\n              </div>\n\n              {/* Industry and Company Size */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label\n                    htmlFor=\"industry\"\n                    className=\"text-sm font-medium text-gray-700\"\n                  >\n                    Industry *\n                  </Label>\n                  <Select\n                    onValueChange={(value) =>\n                      handleInputChange(\"industry\", value)\n                    }\n                  >\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue placeholder=\"Select your industry\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {industries.map((industry) => (\n                        <SelectItem\n                          key={industry}\n                          value={industry.toLowerCase()}\n                        >\n                          {industry}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label\n                    htmlFor=\"companySize\"\n                    className=\"text-sm font-medium text-gray-700\"\n                  >\n                    Company Size *\n                  </Label>\n                  <Select\n                    onValueChange={(value) =>\n                      handleInputChange(\"companySize\", value)\n                    }\n                  >\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue placeholder=\"Select company size\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {companySizes.map((size) => (\n                        <SelectItem key={size} value={size}>\n                          {size}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Years in Current Role */}\n              <div>\n                <Label\n                  htmlFor=\"yearsInRole\"\n                  className=\"text-sm font-medium text-gray-700\"\n                >\n                  Years in Current Role\n                </Label>\n                <Input\n                  id=\"yearsInRole\"\n                  placeholder=\"e.g., 3\"\n                  value={formData.yearsInRole}\n                  onChange={(e) =>\n                    handleInputChange(\"yearsInRole\", e.target.value)\n                  }\n                  className=\"mt-1\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Navigation */}\n        <div className=\"flex justify-between items-center mt-8\">\n          <Button\n            variant=\"ghost\"\n            onClick={handleBack}\n            className=\"text-gray-600\"\n          >\n            <ArrowLeft className=\"mr-2\" size={16} />\n            Back\n          </Button>\n          <Button\n            onClick={handleNext}\n            disabled={!canProceed}\n            className=\"bg-blue-600 hover:bg-purple-700 px-8\"\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6983},"client/src/pages/signup/decision-maker/availability.jsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Clock, Calendar } from \"lucide-react\";\n\nconst availabilitySchema = z.object({\n  preferredTimeZone: z.string().min(1, \"Please select a time zone\"),\n});\n\nconst timeZones = [\n  { value: \"UTC-8\", label: \"Pacific Time (UTC-8)\" },\n  { value: \"UTC-7\", label: \"Mountain Time (UTC-7)\" },\n  { value: \"UTC-6\", label: \"Central Time (UTC-6)\" },\n  { value: \"UTC-5\", label: \"Eastern Time (UTC-5)\" },\n  { value: \"UTC+0\", label: \"GMT (UTC+0)\" },\n  { value: \"UTC+1\", label: \"Central European Time (UTC+1)\" },\n  { value: \"UTC+5:30\", label: \"India Standard Time (UTC+5:30)\" },\n  { value: \"UTC+8\", label: \"China Standard Time (UTC+8)\" },\n];\n\n// Removed unused arrays since we now use defaults\n\nexport default function DecisionMakerAvailability() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm({\n    resolver: zodResolver(availabilitySchema),\n    defaultValues: {\n      preferredTimeZone: \"\",\n    },\n  });\n\n  const saveAvailabilityMutation = useMutation({\n    mutationFn: (data) => apiRequest(\"/api/decision-maker/availability\", {\n      method: \"POST\",\n      body: JSON.stringify(data)\n    }),\n    onSuccess: (data) => {\n      toast({\n        title: \"Availability Preferences Saved\",\n        description: \"Your availability has been saved successfully.\",\n      });\n      setLocation(\"/signup/decision-maker/nominate\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save availability preferences\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data) => {\n    // Add default values for all availability preferences\n    const fullData = {\n      ...data,\n      availableDays: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n      preferredTimes: [\"9:00 AM - 11:00 AM\", \"11:00 AM - 1:00 PM\", \"1:00 PM - 3:00 PM\", \"3:00 PM - 5:00 PM\", \"5:00 PM - 7:00 PM\", \"7:00 PM - 9:00 PM\"],\n      maxCallsPerWeek: \"3\",\n      availabilityType: \"flexible\",\n      timezone: data.preferredTimeZone // Also send timezone field for compatibility\n    };\n    console.log(\"Submitting availability data:\", fullData);\n    saveAvailabilityMutation.mutate(fullData);\n  };\n\n  // Removed handlers for days and times since they're now set as defaults\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50\">\n      <div className=\"max-w-2xl mx-auto mt-16 px-4 py-8\">\n        {/* Progress Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-sm font-medium text-gray-600\">\n              Step 3 of 4\n            </span>\n            <span className=\"text-sm font-medium text-gray-600\">\n              75% Complete\n            </span>\n          </div>\n          <Progress value={75} className=\"h-2\" />\n        </div>\n\n        {/* Main Form Card */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Availability Preferences\n              </h1>\n              <p className=\"text-gray-600\">\n                Please select your preferred timezone. You'll be available for calls all days and times with a maximum of 3 calls per month.\n              </p>\n            </div>\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Time Zone */}\n                <FormField\n                  control={form.control}\n                  name=\"preferredTimeZone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700 flex items-center space-x-2\">\n                        <Clock className=\"h-4 w-4\" />\n                        <span>Preferred Time Zone *</span>\n                      </FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select your time zone\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {timeZones.map((tz) => (\n                            <SelectItem key={tz.value} value={tz.value}>\n                              {tz.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Availability Summary */}\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Calendar className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                    <div>\n                      <h3 className=\"text-sm font-medium text-blue-900 mb-1\">\n                        Default Availability Settings\n                      </h3>\n                      <div className=\"text-sm text-blue-700 space-y-1\">\n                        <p>• Available all days of the week</p>\n                        <p>• Available all business hours (9:00 AM - 9:00 PM)</p>\n                        <p>• Maximum 3 calls per month</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Submit Button */}\n                <div className=\"flex justify-between pt-6\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setLocation(\"/signup/decision-maker/professional-info\")}\n                  >\n                    Back\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={saveAvailabilityMutation.isPending}\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                  >\n                    {saveAvailabilityMutation.isPending ? \"Saving...\" : \"Continue\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7118},"client/src/pages/signup/decision-maker/nominate.jsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  ArrowLeft,\n  ArrowRight,\n  Plus,\n  Trash2,\n  Users,\n  Loader2,\n} from \"lucide-react\";\nimport { decisionMakerNominationSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function DecisionMakerNominate() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [salesReps, setSalesReps] = useState([\n    { name: \"\", email: \"\", company: \"\", referralReason: \"\" },\n  ]);\n\n  const form = useForm({\n    resolver: zodResolver(decisionMakerNominationSchema),\n    defaultValues: {\n      nominatedSalesReps: [\n        { name: \"\", email: \"\", company: \"\", referralReason: \"\" },\n      ],\n    },\n  });\n\n  const saveNominationMutation = useMutation({\n    mutationFn: async (data) => {\n      console.log(\"Submitting decision maker nomination data:\", data);\n      const response = await apiRequest(\"/api/decision-maker/nominate\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      console.log(\"Decision maker nominations saved successfully:\", data);\n      toast({\n        title: \"Registration Complete!\",\n        description: data.message || \"Registration completed successfully!\",\n      });\n      // Redirect to dashboard\n      setTimeout(() => {\n        setLocation(\"/login\");\n      }, 2000);\n    },\n    onError: (error) => {\n      console.error(\"Decision maker nomination save error:\", error);\n      toast({\n        title: \"Save Failed\",\n        description:\n          error.message || \"Failed to save nominations. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data) => {\n    // Filter out empty entries\n    const validNominations = data.nominatedSalesReps.filter(\n      (rep) => rep.name || rep.email,\n    );\n    saveNominationMutation.mutate({ nominatedSalesReps: validNominations });\n  };\n\n  const addSalesRep = () => {\n    const newSalesReps = [\n      ...salesReps,\n      { name: \"\", email: \"\", company: \"\", referralReason: \"\" },\n    ];\n    setSalesReps(newSalesReps);\n    form.setValue(\"nominatedSalesReps\", newSalesReps);\n  };\n\n  const removeSalesRep = (index) => {\n    if (salesReps.length > 1) {\n      const newSalesReps = salesReps.filter((_, i) => i !== index);\n      setSalesReps(newSalesReps);\n      form.setValue(\"nominatedSalesReps\", newSalesReps);\n    }\n  };\n\n  const skipStep = () => {\n    // Submit empty nominations to complete registration\n    saveNominationMutation.mutate({ nominatedSalesReps: [] });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50\">\n      <div className=\"max-w-2xl mx-auto mt-16 px-4 py-8\">\n        {/* Progress Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-sm font-medium text-gray-600\">\n              Step 4 of 4\n            </span>\n            <span className=\"text-sm font-medium text-gray-600\">\n              100% Complete\n            </span>\n          </div>\n          <Progress value={100} className=\"h-2\" />\n        </div>\n\n        {/* Main Form Card */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Nominate Sales Representatives\n              </h1>\n              <p className=\"text-gray-600\">\n                Complete your registration! You've been allocated 3 calls per month.\n                Optionally nominate quality sales reps to help build our community.\n              </p>\n            </div>\n\n            {/* Info Box */}\n            <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-6 mb-8\">\n              <div className=\"flex items-start space-x-3\">\n                <Users className=\"text-purple-600 mt-0.5\" size={20} />\n                <div>\n                  <h3 className=\"text-sm font-medium text-purple-900 mb-2\">\n                    Earn Credits by Nominating\n                  </h3>\n                  <p className=\"text-sm text-purple-700 mb-3\">\n                    For each sales rep you nominate who successfully joins and\n                    completes calls, you earn credits that can be used for\n                    premium features or extended call durations.\n                  </p>\n                  <ul className=\"text-xs text-purple-600 space-y-1\">\n                    <li>• Successful nomination = 5 credits</li>\n                    <li>• Completed intro call = 2 additional credits</li>\n                    <li>• Quality ratings boost your standing</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n\n            <Form {...form}>\n              <form\n                onSubmit={form.handleSubmit(onSubmit)}\n                className=\"space-y-6\"\n              >\n                {salesReps.map((_, index) => (\n                  <Card key={index} className=\"border border-gray-200\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex justify-between items-center mb-4\">\n                        <h4 className=\"text-lg font-medium text-gray-900\">\n                          Sales Rep #{index + 1}\n                        </h4>\n                        {salesReps.length > 1 && (\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => removeSalesRep(index)}\n                            className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                        <FormField\n                          control={form.control}\n                          name={`nominatedSalesReps.${index}.name`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-sm font-medium text-gray-700\">\n                                Full Name\n                              </FormLabel>\n                              <FormControl>\n                                <Input\n                                  placeholder=\"Sales rep's full name\"\n                                  {...field}\n                                  onChange={(e) => {\n                                    field.onChange(e);\n                                    const newSalesReps = [...salesReps];\n                                    newSalesReps[index].name = e.target.value;\n                                    setSalesReps(newSalesReps);\n                                  }}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name={`nominatedSalesReps.${index}.email`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-sm font-medium text-gray-700\">\n                                Email Address\n                              </FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"email\"\n                                  placeholder=\"email@company.com\"\n                                  {...field}\n                                  onChange={(e) => {\n                                    field.onChange(e);\n                                    const newSalesReps = [...salesReps];\n                                    newSalesReps[index].email = e.target.value;\n                                    setSalesReps(newSalesReps);\n                                  }}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name={`nominatedSalesReps.${index}.company`}\n                        render={({ field }) => (\n                          <FormItem className=\"mb-4\">\n                            <FormLabel className=\"text-sm font-medium text-gray-700\">\n                              Company\n                            </FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"Their company name\"\n                                {...field}\n                                onChange={(e) => {\n                                  field.onChange(e);\n                                  const newSalesReps = [...salesReps];\n                                  newSalesReps[index].company = e.target.value;\n                                  setSalesReps(newSalesReps);\n                                }}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name={`nominatedSalesReps.${index}.referralReason`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm font-medium text-gray-700\">\n                              Why do you recommend them?\n                            </FormLabel>\n                            <FormControl>\n                              <Textarea\n                                placeholder=\"Tell us why this sales rep would be a good addition to our platform...\"\n                                rows={3}\n                                {...field}\n                                onChange={(e) => {\n                                  field.onChange(e);\n                                  const newSalesReps = [...salesReps];\n                                  newSalesReps[index].referralReason =\n                                    e.target.value;\n                                  setSalesReps(newSalesReps);\n                                }}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </CardContent>\n                  </Card>\n                ))}\n\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={addSalesRep}\n                  className=\"w-full flex items-center gap-2 border-dashed\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  Add Another Sales Rep\n                </Button>\n\n                {/* Navigation Buttons */}\n                <div className=\"flex justify-between pt-6\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() =>\n                      setLocation(\"/signup/decision-maker/availability\")\n                    }\n                    className=\"flex items-center gap-2\"\n                  >\n                    <ArrowLeft className=\"h-4 w-4\" />\n                    Back\n                  </Button>\n\n                  <div className=\"flex gap-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      onClick={skipStep}\n                      className=\"text-gray-600\"\n                    >\n                      Skip for now\n                    </Button>\n\n                    <Button\n                      type=\"submit\"\n                      disabled={saveNominationMutation.isPending}\n                      className=\"flex items-center gap-2 bg-blue-600 hover:bg-purple-700\"\n                    >\n                      {saveNominationMutation.isPending ? (\n                        <Loader2 className=\"h-4 w-4 animate-spin\" />\n                      ) : (\n                        <>\n                          Continue\n                          <ArrowRight className=\"h-4 w-4\" />\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13559},"client/src/pages/signup/decision-maker/package.jsx":{"content":"import React, { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  ArrowLeft,\n  Check,\n  Loader2,\n  Star,\n  Shield,\n  CreditCard,\n  Zap,\n  Users,\n  Calendar,\n} from \"lucide-react\";\nimport { decisionMakerPackageSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport StripeCheckout from \"@/components/StripeCheckout\";\nimport StripePaymentForm from \"@/components/StripePaymentForm\";\n\nexport default function DecisionMakerChoosePackage() {\n  const [, setLocation] = useLocation();\n  const [showPayment, setShowPayment] = useState(false);\n  const [selectedPackage, setSelectedPackage] = useState(null);\n  const [userInfo, setUserInfo] = useState(null);\n  const { toast } = useToast();\n\n  // Get user info from localStorage or create test data\n  const getCurrentUserInfo = () => {\n    // In a real app, this would come from the signup session\n    const testUserInfo = {\n      email: \"mlp.yashvantgupknkta@gmail.com\", // Use the actual email from console logs\n      firstName: \"Yashwant\",\n      lastName: \"Sahu\",\n    };\n    return testUserInfo;\n  };\n\n  const form = useForm({\n    resolver: zodResolver(decisionMakerPackageSchema),\n    defaultValues: {\n      packageType: \"\",\n    },\n  });\n\n  const selectedValue = form.watch(\"packageType\");\n\n  const savePackageMutation = useMutation({\n    mutationFn: async (data) => {\n      console.log(\"Submitting decision maker package data:\", data);\n      const response = await apiRequest(\"/api/decision-maker/package\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      console.log(\"Decision maker package selection saved successfully:\", data);\n      toast({\n        title: \"Account Created Successfully!\",\n        description:\n          \"Welcome to Naeberly! Your decision maker account is now ready.\",\n      });\n      setLocation(\"/signup/decision-maker/professional-info\");\n    },\n    onError: (error) => {\n      console.error(\"Decision maker package save error:\", error);\n      toast({\n        title: \"Save Failed\",\n        description:\n          error.message || \"Failed to complete signup. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data) => {\n    const selectedPkg = packages.find((pkg) => pkg.id === data.packageType);\n\n    if (selectedPkg?.requiresPayment) {\n      const userData = getCurrentUserInfo();\n      setSelectedPackage(selectedPkg);\n      setUserInfo({\n        packageType: data.packageType,\n        email: userData.email,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n      });\n      setShowPayment(true);\n    } else {\n      // Free package - proceed directly\n      savePackageMutation.mutate({\n        packageType: data.packageType, // Use MongoDB ID for backend\n      });\n    }\n  };\n\n  const handlePaymentSuccess = () => {\n    // Complete the signup after payment\n    savePackageMutation.mutate({\n      packageType: selectedPackage.id, // Use MongoDB ID for backend\n    });\n  };\n\n  const handlePaymentError = (error) => {\n    toast({\n      title: \"Payment Failed\",\n      description:\n        error?.message || \"Payment could not be processed. Please try again.\",\n      variant: \"destructive\",\n    });\n    setShowPayment(false);\n  };\n\n  // Fetch subscription plans from API\n  const { data: subscriptionPlans, isLoading: plansLoading } = useQuery({\n    queryKey: [\"/api/subscription-plans\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"/api/subscription-plans\");\n      return response;\n    },\n  });\n\n  // Helper functions for enhanced UI\n  function getPackageIcon(planName) {\n    switch (planName?.toLowerCase()) {\n      case \"free\":\n        return Star;\n      case \"basic\":\n        return Zap;\n      case \"premium\":\n        return Shield;\n      case \"enterprise\":\n        return Users;\n      default:\n        return CreditCard;\n    }\n  }\n\n  function getPackageGradient(planName) {\n    switch (planName?.toLowerCase()) {\n      case \"free\":\n        return \"from-green-50 to-emerald-100\";\n      case \"basic\":\n        return \"from-blue-50 to-indigo-100\";\n      case \"premium\":\n        return \"from-purple-50 to-pink-100\";\n      case \"enterprise\":\n        return \"from-orange-50 to-red-100\";\n      default:\n        return \"from-gray-50 to-gray-100\";\n    }\n  }\n\n  // Helper function to map plan names to schema enum values\n  function getEnumValue(planName) {\n    switch (planName?.toLowerCase()) {\n      case \"free\":\n        return \"free\";\n      case \"basic\":\n        return \"basic\";\n      case \"premium\":\n        return \"premium\";\n      case \"enterprise\":\n        return \"premium\"; // Map enterprise to premium for DM\n      case \"pro-team\":\n        return \"premium\"; // Map pro-team to premium for DM\n      default:\n        return \"free\";\n    }\n  }\n\n  // Transform API data to match component structure\n  const packages =\n    subscriptionPlans?.map((plan) => {\n      // Build comprehensive features list from plan data\n      const baseFeatures =\n        plan.features && plan.features.length > 0 ? plan.features : [];\n\n      // Add structured features based on plan capabilities\n      const structuredFeatures = [\n        `Up to ${plan.maxCallCredits || 0} scheduled calls per month`,\n        `${plan.maxInvitations || 0} sales rep connections`,\n        plan.prioritySupport\n          ? \"Priority support & assistance\"\n          : \"Standard email support\",\n        \"Verified sales rep network access\",\n        \"Flexible scheduling preferences\",\n        \"Call quality assurance\",\n      ];\n\n      // Add premium features based on plan tier\n      if (plan.price > 0) {\n        structuredFeatures.push(\"Advanced call analytics\");\n        structuredFeatures.push(\"LinkedIn integration\");\n        structuredFeatures.push(\"Calendar sync\");\n      }\n\n      if (plan.price >= 39) {\n        structuredFeatures.push(\"Call recording access\");\n        structuredFeatures.push(\"Executive networking events\");\n        structuredFeatures.push(\"Performance insights\");\n        structuredFeatures.push(\"Custom availability settings\");\n      }\n\n      if (plan.price >= 59) {\n        structuredFeatures.push(\"Team coordination tools\");\n        structuredFeatures.push(\"Bulk call scheduling\");\n        structuredFeatures.push(\"Enterprise security features\");\n        structuredFeatures.push(\"Dedicated account manager\");\n      }\n\n      // Combine custom features with structured features\n      const allFeatures = [...baseFeatures, ...structuredFeatures];\n\n      const enumValue = getEnumValue(plan.name);\n\n      return {\n        id: plan.id, // Use unique MongoDB ID for selection\n        enumValue: enumValue, // Keep enum value for backend\n        name: plan.name,\n        price: plan.price?.toString() || \"0\",\n        displayPrice:\n          plan.price === 0 || plan.price === \"0\" ? \"Free\" : `$${plan.price}`,\n        period:\n          plan.billingInterval === \"monthly\"\n            ? \"month\"\n            : plan.billingPeriod || \"month\",\n        description:\n          plan.description ||\n          `Perfect for ${plan.name.toLowerCase()} decision makers`,\n        popular: plan.bestSeller || plan.featured || false,\n        features: allFeatures,\n        requiresPayment: plan.price > 0,\n        stripePriceId: plan.stripePriceId,\n        icon: getPackageIcon(plan.name),\n        gradient: getPackageGradient(plan.name),\n      };\n    }) || [];\n\n  // Set default to first available package when plans load\n  React.useEffect(() => {\n    if (packages && packages.length > 0 && !selectedValue) {\n      const freePackage =\n        packages.find((pkg) => pkg.enumValue === \"free\") || packages[0];\n      form.setValue(\"packageType\", freePackage.id);\n    }\n  }, [packages, selectedValue, form]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50\">\n      <div className=\"max-w-4xl mx-auto mt-16 px-4 py-8\">\n        {/* Progress Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-sm font-medium text-gray-600\">\n              Step 2 of 4\n            </span>\n            <span className=\"text-sm font-medium text-gray-600\">\n              50% Complete\n            </span>\n          </div>\n          <Progress value={50} className=\"h-2\" />\n        </div>\n\n        {/* Main Content */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Choose Your Plan\n          </h1>\n          <p className=\"text-gray-600\">\n            Select the plan that best fits your networking needs\n          </p>\n        </div>\n\n        {/* Benefits Banner */}\n        <div className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg p-6 mb-8\">\n          <div className=\"flex items-center justify-center space-x-8\">\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"h-5 w-5\" />\n              <span className=\"text-sm font-medium\">\n                Verified Sales Reps Only\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Check className=\"h-5 w-5\" />\n              <span className=\"text-sm font-medium\">Quality Guaranteed</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Star className=\"h-5 w-5\" />\n              <span className=\"text-sm font-medium\">Premium Networking</span>\n            </div>\n          </div>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)}>\n            <FormField\n              control={form.control}\n              name=\"packageType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormControl>\n                    <RadioGroup\n                      onValueChange={field.onChange}\n                      value={field.value}\n                      className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-8 mb-8\"\n                    >\n                      {plansLoading ? (\n                        <div className=\"col-span-full flex justify-center py-12\">\n                          <div className=\"text-center\">\n                            <Loader2 className=\"h-12 w-12 animate-spin text-blue-600 mx-auto mb-4\" />\n                            <p className=\"text-gray-600\">\n                              Loading subscription plans...\n                            </p>\n                          </div>\n                        </div>\n                      ) : (\n                        packages.map((pkg) => (\n                          <div key={pkg.id} className=\"relative\">\n                            <RadioGroupItem\n                              value={pkg.id}\n                              id={pkg.id}\n                              className=\"peer sr-only\"\n                            />\n                            <label\n                              htmlFor={pkg.id}\n                              className=\"flex flex-col cursor-pointer\"\n                            >\n                              <Card\n                                className={`peer-checked:ring-4 peer-checked:ring-purple-500 peer-checked:border-purple-500 peer-checked:shadow-2xl peer-checked:scale-105 hover:shadow-xl hover:scale-102 transition-all duration-300 h-full overflow-hidden ${selectedValue === pkg.id ? \"ring-4 ring-purple-500 border-purple-500 shadow-2xl scale-105\" : \"\"}`}\n                              >\n                                {/* Background Gradient */}\n                                <div\n                                  className={`absolute inset-0 bg-gradient-to-br ${pkg.gradient} opacity-10`}\n                                />\n\n                                <CardContent className=\"relative p-6 flex flex-col h-full\">\n                                  {pkg.popular && (\n                                    <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 z-10\">\n                                      <Badge className=\"bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg flex items-center gap-1\">\n                                        <Star className=\"h-3 w-3\" />\n                                        Most Popular\n                                      </Badge>\n                                    </div>\n                                  )}\n\n                                  {/* Package Icon */}\n                                  <div className=\"flex justify-center mb-4\">\n                                    <div\n                                      className={`p-3 rounded-full bg-gradient-to-br ${pkg.gradient} shadow-lg`}\n                                    >\n                                      {pkg.icon && (\n                                        <pkg.icon className=\"h-8 w-8 text-gray-700\" />\n                                      )}\n                                    </div>\n                                  </div>\n\n                                  <div className=\"text-center mb-6\">\n                                    <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                                      {pkg.name}\n                                    </h3>\n                                    <div className=\"mb-3\">\n                                      <span className=\"text-4xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent\">\n                                        {pkg.displayPrice}\n                                      </span>\n                                      {pkg.period !== \"forever\" && (\n                                        <span className=\"text-gray-600 ml-1\">\n                                          /{pkg.period}\n                                        </span>\n                                      )}\n                                    </div>\n                                    <p className=\"text-gray-600 text-sm leading-relaxed\">\n                                      {pkg.description}\n                                    </p>\n                                  </div>\n\n                                  <div className=\"flex-1\">\n                                    <ul className=\"space-y-3\">\n                                      {pkg.features.map((feature, index) => (\n                                        <li\n                                          key={index}\n                                          className=\"flex items-start gap-3\"\n                                        >\n                                          <div className=\"flex-shrink-0 mt-0.5\">\n                                            <Check className=\"h-4 w-4 text-green-500 bg-green-50 rounded-full p-0.5\" />\n                                          </div>\n                                          <span className=\"text-sm text-gray-700 leading-relaxed\">\n                                            {feature}\n                                          </span>\n                                        </li>\n                                      ))}\n                                    </ul>\n                                  </div>\n\n                                  {selectedValue === pkg.id && (\n                                    <div className=\"mt-6\">\n                                      <div className=\"text-center p-3 bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-lg\">\n                                        <div className=\"flex items-center justify-center gap-2\">\n                                          <span className=\"text-sm font-semibold text-purple-700\">\n                                            Selected Plan\n                                          </span>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  )}\n                                </CardContent>\n                              </Card>\n                            </label>\n                          </div>\n                        ))\n                      )}\n                    </RadioGroup>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Additional Benefits */}\n            <div className=\"bg-gray-50 rounded-lg p-6 mb-8\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4 text-center\">\n                What You Get with Every Plan\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-700\">\n                <div className=\"flex items-center space-x-2\">\n                  <Check className=\"h-4 w-4 text-green-500\" />\n                  <span>LinkedIn verification</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Check className=\"h-4 w-4 text-green-500\" />\n                  <span>Flexible scheduling</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Check className=\"h-4 w-4 text-green-500\" />\n                  <span>Quality assurance</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Check className=\"h-4 w-4 text-green-500\" />\n                  <span>Call recordings</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Check className=\"h-4 w-4 text-green-500\" />\n                  <span>Performance metrics</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Check className=\"h-4 w-4 text-green-500\" />\n                  <span>Community access</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Navigation Buttons */}\n            <div className=\"flex justify-between pt-6\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() =>\n                  setLocation(\"/signup/decision-maker/personal-info\")\n                }\n                className=\"flex items-center gap-2\"\n              >\n                <ArrowLeft className=\"h-4 w-4\" />\n                Back\n              </Button>\n\n              <Button\n                type=\"submit\"\n                disabled={savePackageMutation.isPending}\n                className=\"flex items-center gap-2 bg-purple-600 hover:bg-purple-700 px-8\"\n              >\n                {savePackageMutation.isPending ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <>Complete Signup</>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n\n        {/* Payment Modal */}\n        {showPayment && selectedPackage && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n            <div className=\"max-w-md w-full\">\n              <StripeCheckout\n                packageInfo={selectedPackage}\n                userInfo={userInfo}\n                onSuccess={handlePaymentSuccess}\n                onError={handlePaymentError}\n                isRecurring={false}\n              />\n              <div className=\"mt-4 text-center\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowPayment(false)}\n                  className=\"text-gray-600\"\n                >\n                  Cancel Payment\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":20276},"client/src/pages/signup/decision-maker/personal-info.jsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  ArrowLeft,\n  Linkedin,\n  CheckCircle,\n  AlertCircle,\n  Eye,\n  EyeOff,\n  Loader2,\n} from \"lucide-react\";\nimport { decisionMakerPersonalInfoSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function DecisionMakerPersonalInfo() {\n  const [, setLocation] = useLocation();\n  const [linkedinVerified, setLinkedinVerified] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm({\n    resolver: zodResolver(decisionMakerPersonalInfoSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      companyDomain: \"\",\n      linkedinUrl: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const linkedinVerifyMutation = useMutation({\n    mutationFn: async (linkedinUrl) => {\n      console.log(\n        \"Decision maker LinkedIn verification API call starting for:\",\n        linkedinUrl,\n      );\n      try {\n        const response = await apiRequest(\"/api/verify-linkedin\", {\n          method: \"POST\",\n          body: JSON.stringify({ linkedinUrl }),\n        });\n        console.log(\n          \"Decision maker LinkedIn verification API response:\",\n          response,\n        );\n        return response;\n      } catch (error) {\n        console.error(\"Decision maker LinkedIn verification API error:\", error);\n        throw error;\n      }\n    },\n    onSuccess: (data) => {\n      if (data.verified) {\n        setLinkedinVerified(true);\n        toast({\n          title: \"LinkedIn Verified\",\n          description:\n            data.message ||\n            \"Your LinkedIn profile has been successfully verified.\",\n        });\n      } else {\n        toast({\n          title: \"Verification Failed\",\n          description: data.message || \"Unable to verify LinkedIn profile.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Verification Failed\",\n        description:\n          error.message ||\n          \"Unable to verify LinkedIn profile. Please check the URL.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const savePersonalInfoMutation = useMutation({\n    mutationFn: async (data) => {\n      console.log(\n        \"Submitting decision maker form data:\",\n        data,\n        \"LinkedIn verified:\",\n        linkedinVerified,\n      );\n\n      // Get invitation context from session storage\n      const invitationContext = sessionStorage.getItem(\"invitationContext\");\n      let parsedInvitationContext = null;\n      if (invitationContext) {\n        try {\n          parsedInvitationContext = JSON.parse(invitationContext);\n          console.log(\"Including invitation context:\", parsedInvitationContext);\n        } catch (error) {\n          console.error(\"Failed to parse invitation context:\", error);\n        }\n      }\n\n      const response = await apiRequest(\"/api/decision-maker/personal-info\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          ...data,\n          linkedinVerified,\n          invitationContext: parsedInvitationContext,\n        }),\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      console.log(\"Decision maker personal info saved successfully:\", data);\n      toast({\n        title: \"Information Saved\",\n        description: \"Your personal information has been saved successfully.\",\n      });\n      setLocation(\"/signup/decision-maker/professional-info\");\n    },\n    onError: (error) => {\n      console.error(\"Decision maker form submission error:\", error);\n      toast({\n        title: \"Save Failed\",\n        description:\n          error.message || \"Failed to save information. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLinkedinVerify = () => {\n    const linkedinUrl = form.getValues(\"linkedinUrl\");\n    console.log(\"Decision maker LinkedIn verification attempt:\", {\n      linkedinUrl,\n    });\n\n    if (!linkedinUrl) {\n      toast({\n        title: \"LinkedIn URL Required\",\n        description: \"Please enter your LinkedIn profile URL first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    console.log(\n      \"Starting LinkedIn verification for decision maker:\",\n      linkedinUrl,\n    );\n    linkedinVerifyMutation.mutate(linkedinUrl);\n  };\n\n  const onSubmit = (data) => {\n    console.log(\"Decision maker form submission attempt:\", data);\n    console.log(\"Form errors:\", form.formState.errors);\n    console.log(\"LinkedIn verified:\", linkedinVerified);\n\n    if (!linkedinVerified) {\n      toast({\n        title: \"LinkedIn Verification Required\",\n        description: \"Please verify your LinkedIn profile before proceeding.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    savePersonalInfoMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50\">\n      <div className=\"max-w-2xl mx-auto mt-16 px-4 py-8\">\n        {/* Progress Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-sm font-medium text-gray-600\">\n              Step 1 of 4\n            </span>\n            <span className=\"text-sm font-medium text-gray-600\">\n              25% Complete\n            </span>\n          </div>\n          <Progress value={25} className=\"h-2\" />\n        </div>\n\n        {/* Main Form Card */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Personal Information\n              </h1>\n              <p className=\"text-gray-600\">\n                Let's start with your basic details and LinkedIn verification\n              </p>\n            </div>\n\n            <Form {...form}>\n              <form\n                onSubmit={form.handleSubmit(onSubmit)}\n                className=\"space-y-6\"\n              >\n                {/* Name Fields */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium text-gray-700\">\n                          First Name *\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Enter your first name\"\n                            {...field}\n                            className=\"mt-1\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium text-gray-700\">\n                          Last Name *\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Enter your last name\"\n                            {...field}\n                            className=\"mt-1\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Email */}\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Email Address *\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"Enter your email address\"\n                          {...field}\n                          className=\"mt-1\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Company Domain */}\n                <FormField\n                  control={form.control}\n                  name=\"companyDomain\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Company Domain *\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter your company domain (e.g., company.com)\"\n                          {...field}\n                          className=\"mt-1\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        This must match your email domain for verification\n                      </p>\n                    </FormItem>\n                  )}\n                />\n\n                {/* LinkedIn Verification */}\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6\">\n                  <div className=\"flex items-start space-x-3 mb-4\">\n                    <div className=\"w-8 h-8 bg-blue-600 rounded flex items-center justify-center\">\n                      <Linkedin className=\"text-white\" size={16} />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-gray-900 mb-1\">\n                        LinkedIn Verification Required\n                      </h3>\n                      <p className=\"text-sm text-gray-600\">\n                        We verify all decision makers through LinkedIn to ensure\n                        authentic connections\n                      </p>\n                    </div>\n                    {linkedinVerified && (\n                      <CheckCircle className=\"text-green-600\" size={20} />\n                    )}\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"linkedinUrl\"\n                    render={({ field }) => (\n                      <FormItem className=\"mb-4\">\n                        <FormLabel className=\"text-sm font-medium text-gray-700\">\n                          LinkedIn Profile URL *\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"https://linkedin.com/in/your-profile\"\n                            {...field}\n                            className=\"mt-1\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {linkedinVerified ? (\n                    <div className=\"flex items-center text-green-600 text-sm font-medium\">\n                      <CheckCircle className=\"mr-2\" size={16} />\n                      LinkedIn Verified\n                    </div>\n                  ) : (\n                    <Button\n                      type=\"button\"\n                      onClick={handleLinkedinVerify}\n                      disabled={\n                        !form.getValues(\"linkedinUrl\") ||\n                        linkedinVerifyMutation.isPending\n                      }\n                      className=\"bg-blue-600 hover:bg-blue-700\"\n                    >\n                      {linkedinVerifyMutation.isPending ? (\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      ) : (\n                        <Linkedin className=\"mr-2\" size={16} />\n                      )}\n                      Verify LinkedIn Profile\n                    </Button>\n                  )}\n                </div>\n\n                {/* Password Fields */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium text-gray-700\">\n                          Password *\n                        </FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Input\n                              type={showPassword ? \"text\" : \"password\"}\n                              placeholder=\"Create a secure password\"\n                              {...field}\n                              className=\"mt-1 pr-10\"\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                              onClick={() => setShowPassword(!showPassword)}\n                            >\n                              {showPassword ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"confirmPassword\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium text-gray-700\">\n                          Confirm Password *\n                        </FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Input\n                              type={showConfirmPassword ? \"text\" : \"password\"}\n                              placeholder=\"Confirm your password\"\n                              {...field}\n                              className=\"mt-1 pr-10\"\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                              onClick={() =>\n                                setShowConfirmPassword(!showConfirmPassword)\n                              }\n                            >\n                              {showConfirmPassword ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Password Requirements */}\n                <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n                  <h4 className=\"text-sm font-medium text-gray-700 mb-2\">\n                    Password Requirements:\n                  </h4>\n                  <ul className=\"text-xs text-gray-600 space-y-1\">\n                    <li>• At least 8 characters long</li>\n                    <li>• Contains uppercase and lowercase letters</li>\n                    <li>• Contains at least one number</li>\n                    <li>• Contains at least one special character</li>\n                  </ul>\n                </div>\n\n                {/* Navigation */}\n                <div className=\"flex justify-between items-center pt-6\">\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => setLocation(\"/\")}\n                    className=\"text-gray-600\"\n                  >\n                    <ArrowLeft className=\"mr-2\" size={16} />\n                    Back\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={savePersonalInfoMutation.isPending}\n                    className=\"bg-blue-600 hover:bg-purple-700 px-8\"\n                  >\n                    {savePersonalInfoMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Saving...\n                      </>\n                    ) : (\n                      \"Next\"\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17972},"client/src/pages/signup/decision-maker/professional-info.jsx":{"content":"import { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, ArrowRight, Loader2 } from \"lucide-react\";\nimport { decisionMakerProfessionalSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function DecisionMakerProfessionalInfo() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm({\n    resolver: zodResolver(decisionMakerProfessionalSchema),\n    defaultValues: {\n      jobTitle: \"\",\n      company: \"\",\n      industry: \"\",\n      companySize: \"\",\n      yearsInRole: \"\",\n    },\n  });\n\n  const saveProfessionalInfoMutation = useMutation({\n    mutationFn: async (data) => {\n      console.log(\"Submitting decision maker professional data:\", data);\n      const response = await apiRequest(\n        \"/api/decision-maker/professional-info\",\n        {\n          method: \"POST\",\n          body: JSON.stringify(data),\n        },\n      );\n      return response;\n    },\n    onSuccess: (data) => {\n      console.log(\"Decision maker professional info saved successfully:\", data);\n      toast({\n        title: \"Professional Information Saved\",\n        description:\n          \"Your professional background has been saved successfully.\",\n      });\n      setLocation(\"/signup/decision-maker/availability\");\n    },\n    onError: (error) => {\n      console.error(\"Decision maker professional info save error:\", error);\n      toast({\n        title: \"Save Failed\",\n        description:\n          error.message ||\n          \"Failed to save professional information. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data) => {\n    saveProfessionalInfoMutation.mutate(data);\n  };\n\n  const industries = [\n    \"Technology\",\n    \"Healthcare\",\n    \"Finance\",\n    \"Education\",\n    \"Manufacturing\",\n    \"Retail\",\n    \"Real Estate\",\n    \"Marketing & Advertising\",\n    \"Consulting\",\n    \"Energy\",\n    \"Telecommunications\",\n    \"Transportation\",\n    \"Other\",\n  ];\n\n  const companySizes = [\n    \"1-10 employees\",\n    \"11-50 employees\",\n    \"51-200 employees\",\n    \"201-1000 employees\",\n    \"1001-5000 employees\",\n    \"5000+ employees\",\n  ];\n\n  const yearsOptions = [\n    \"Less than 1 year\",\n    \"1-2 years\",\n    \"3-5 years\",\n    \"6-10 years\",\n    \"More than 10 years\",\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50\">\n      <div className=\"max-w-2xl mx-auto mt-16 px-4 py-8\">\n        {/* Progress Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-sm font-medium text-gray-600\">\n              Step 2 of 4\n            </span>\n            <span className=\"text-sm font-medium text-gray-600\">\n              50% Complete\n            </span>\n          </div>\n          <Progress value={50} className=\"h-2\" />\n        </div>\n\n        {/* Main Form Card */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Professional Background\n              </h1>\n              <p className=\"text-gray-600\">\n                Tell us about your professional experience and current role\n              </p>\n            </div>\n\n            <Form {...form}>\n              <form\n                onSubmit={form.handleSubmit(onSubmit)}\n                className=\"space-y-6\"\n              >\n                {/* Job Title */}\n                <FormField\n                  control={form.control}\n                  name=\"jobTitle\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Job Title *\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"e.g., Chief Technology Officer, VP of Sales\"\n                          {...field}\n                          className=\"mt-1\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Company */}\n                <FormField\n                  control={form.control}\n                  name=\"company\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Company *\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter your company name\"\n                          {...field}\n                          className=\"mt-1\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Industry */}\n                <FormField\n                  control={form.control}\n                  name=\"industry\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Industry *\n                      </FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue placeholder=\"Select your industry\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {industries.map((industry) => (\n                            <SelectItem key={industry} value={industry}>\n                              {industry}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Company Size */}\n                <FormField\n                  control={form.control}\n                  name=\"companySize\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Company Size *\n                      </FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue placeholder=\"Select company size\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {companySizes.map((size) => (\n                            <SelectItem key={size} value={size}>\n                              {size}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Years in Role */}\n                <FormField\n                  control={form.control}\n                  name=\"yearsInRole\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Years in Current Role\n                      </FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue placeholder=\"Select years of experience\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {yearsOptions.map((years) => (\n                            <SelectItem key={years} value={years}>\n                              {years}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Navigation Buttons */}\n                <div className=\"flex justify-between pt-6\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() =>\n                      setLocation(\"/signup/decision-maker/personal-info\")\n                    }\n                    className=\"flex items-center gap-2\"\n                  >\n                    <ArrowLeft className=\"h-4 w-4\" />\n                    Back\n                  </Button>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={saveProfessionalInfoMutation.isPending}\n                    className=\"flex items-center gap-2 bg-purple-600 hover:bg-purple-700\"\n                  >\n                    {saveProfessionalInfoMutation.isPending ? (\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    ) : (\n                      <>\n                        Continue\n                        <ArrowRight className=\"h-4 w-4\" />\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10593},"client/src/pages/signup/sales-rep/choose-package.jsx":{"content":"import React, { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  ArrowLeft,\n  Check,\n  Loader2,\n  Star,\n  CreditCard,\n  Zap,\n  Users,\n  Calendar,\n  Shield,\n} from \"lucide-react\";\nimport { salesRepPackageSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport StripeCheckout from \"@/components/StripeCheckout\";\n\nexport default function SalesRepChoosePackage() {\n  const [, setLocation] = useLocation();\n  const [showPayment, setShowPayment] = useState(false);\n  const [selectedPackage, setSelectedPackage] = useState(null);\n  const [userInfo, setUserInfo] = useState(null);\n  const { toast } = useToast();\n\n  const form = useForm({\n    resolver: zodResolver(salesRepPackageSchema),\n    defaultValues: {\n      packageType: \"\",\n    },\n  });\n\n  const selectedValue = form.watch(\"packageType\");\n\n  const savePackageMutation = useMutation({\n    mutationFn: async (data) => {\n      console.log(\"Submitting package data:\", data);\n      const response = await apiRequest(\"/api/sales-rep/package\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      console.log(\"Package selection saved successfully:\", data);\n      toast({\n        title: \"Account Created Successfully!\",\n        description:\n          \"Welcome to Naeborly! Your sales rep account is now ready.\",\n      });\n      setLocation(\"/signup/sales-rep/professional-info\");\n    },\n    onError: (error) => {\n      console.error(\"Package save error:\", error);\n      toast({\n        title: \"Save Failed\",\n        description:\n          error.message || \"Failed to complete signup. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data) => {\n    const selectedPkg = packages.find((pkg) => pkg.id === data.packageType);\n\n    if (selectedPkg?.requiresPayment) {\n      setSelectedPackage(selectedPkg);\n      setUserInfo({\n        packageType: data.packageType,\n        email: \"user@example.com\", // This would come from previous signup steps\n        firstName: \"User\",\n        lastName: \"Name\",\n      });\n      setShowPayment(true);\n    } else {\n      // Free package - proceed directly\n      savePackageMutation.mutate({\n        packageType: data.packageType, // Use MongoDB ID for backend\n      });\n    }\n  };\n\n  const handlePaymentSuccess = () => {\n    // Complete the signup after payment\n    savePackageMutation.mutate({\n      packageType: selectedPackage.id, // Use MongoDB ID for backend\n    });\n  };\n\n  const handlePaymentError = (error) => {\n    toast({\n      title: \"Payment Failed\",\n      description:\n        error?.message || \"Payment could not be processed. Please try again.\",\n      variant: \"destructive\",\n    });\n    setShowPayment(false);\n  };\n\n  // Fetch subscription plans from API\n  const { data: subscriptionPlans, isLoading: plansLoading } = useQuery({\n    queryKey: [\"/api/subscription-plans\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"/api/subscription-plans\");\n      return response;\n    },\n  });\n\n  // Helper functions for enhanced UI\n  function getPackageIcon(planName) {\n    switch (planName?.toLowerCase()) {\n      case \"free\":\n        return Star;\n      case \"basic\":\n        return Zap;\n      case \"premium\":\n        return Shield;\n      case \"pro-team\":\n        return Users;\n      default:\n        return CreditCard;\n    }\n  }\n\n  function getPackageGradient(planName) {\n    switch (planName?.toLowerCase()) {\n      case \"free\":\n        return \"from-gray-50 to-gray-100\";\n      case \"basic\":\n        return \"from-blue-50 to-indigo-100\";\n      case \"premium\":\n        return \"from-purple-50 to-pink-100\";\n      case \"pro-team\":\n        return \"from-green-50 to-emerald-100\";\n      default:\n        return \"from-gray-50 to-gray-100\";\n    }\n  }\n\n  // Helper function to map plan names to schema enum values\n  function getEnumValue(planName) {\n    switch (planName?.toLowerCase()) {\n      case \"free\":\n        return \"free\";\n      case \"basic\":\n        return \"basic\";\n      case \"premium\":\n        return \"premium\";\n      case \"enterprise\":\n        return \"pro-team\";\n      case \"pro-team\":\n        return \"pro-team\";\n      default:\n        return \"free\";\n    }\n  }\n\n  // Transform API data to match component structure\n  const packages =\n    subscriptionPlans?.map((plan) => {\n      // Build comprehensive features list from plan data\n      const baseFeatures =\n        plan.features && plan.features.length > 0 ? plan.features : [];\n\n      // Add structured features based on plan capabilities\n      const structuredFeatures = [\n        `${plan.maxInvitations || 0} decision maker invitations`,\n        `${plan.maxCallCredits || 0} call credits per month`,\n        plan.prioritySupport ? \"Priority support\" : \"Standard support\",\n        \"LinkedIn profile verification\",\n        \"Calendar integration\",\n        \"Basic analytics dashboard\",\n      ];\n\n      // Add premium features based on plan tier\n      if (plan.price > 0) {\n        structuredFeatures.push(\"Advanced scheduling tools\");\n        structuredFeatures.push(\"Email notifications\");\n      }\n\n      if (plan.price >= 39) {\n        structuredFeatures.push(\"Call recording & transcription\");\n        structuredFeatures.push(\"CRM integrations\");\n        structuredFeatures.push(\"Advanced analytics\");\n      }\n\n      if (plan.price >= 59) {\n        structuredFeatures.push(\"Team management\");\n        structuredFeatures.push(\"White-label options\");\n        structuredFeatures.push(\"Dedicated account manager\");\n      }\n\n      // Combine custom features with structured features\n      const allFeatures = [...baseFeatures, ...structuredFeatures];\n\n      const enumValue = getEnumValue(plan.name);\n\n      return {\n        id: plan.id, // Use unique MongoDB ID for selection\n        enumValue: enumValue, // Keep enum value for backend\n        name: plan.name,\n        price: plan.price?.toString() || \"0\",\n        displayPrice:\n          plan.price === 0 || plan.price === \"0\" ? \"Free\" : `$${plan.price}`,\n        period:\n          plan.billingInterval === \"monthly\"\n            ? \"month\"\n            : plan.billingPeriod || \"month\",\n        description:\n          plan.description ||\n          `Perfect for ${plan.name.toLowerCase()} sales professionals`,\n        popular: plan.bestSeller || plan.featured || false,\n        features: allFeatures,\n        requiresPayment: plan.price > 0,\n        stripePriceId: plan.stripePriceId,\n        icon: getPackageIcon(plan.name),\n        gradient: getPackageGradient(plan.name),\n      };\n    }) || [];\n\n  // Set default to first available package when plans load\n  React.useEffect(() => {\n    if (packages && packages.length > 0 && !selectedValue) {\n      const freePackage =\n        packages.find((pkg) => pkg.enumValue === \"free\") || packages[0];\n      form.setValue(\"packageType\", freePackage.id);\n    }\n  }, [packages, selectedValue, form]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50\">\n      <div className=\"max-w-4xl mx-auto mt-16 px-4 py-8\">\n        {/* Progress Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-sm font-medium text-gray-600\">\n              Step 2 of 4\n            </span>\n            <span className=\"text-sm font-medium text-gray-600\">\n              50% Complete\n            </span>\n          </div>\n          <Progress value={50} className=\"h-2\" />\n        </div>\n\n        {/* Main Content */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Choose Your Package\n          </h1>\n          <p className=\"text-gray-600\">\n            Select the plan that best fits your sales goals\n          </p>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)}>\n            <FormField\n              control={form.control}\n              name=\"packageType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormControl>\n                    <RadioGroup\n                      onValueChange={field.onChange}\n                      value={field.value}\n                      className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-8 mb-8\"\n                    >\n                      {plansLoading ? (\n                        <div className=\"col-span-full flex justify-center py-8\">\n                          <Loader2 className=\"h-8 w-8 animate-spin text-purple-600\" />\n                        </div>\n                      ) : (\n                        packages.map((pkg) => (\n                          <div key={pkg.id} className=\"relative\">\n                            <RadioGroupItem\n                              value={pkg.id}\n                              id={pkg.id}\n                              className=\"peer sr-only\"\n                            />\n                            <label\n                              htmlFor={pkg.id}\n                              className=\"flex flex-col cursor-pointer\"\n                            >\n                              <Card\n                                className={`peer-checked:ring-4 peer-checked:ring-purple-500 peer-checked:border-purple-500 peer-checked:shadow-2xl peer-checked:scale-105 hover:shadow-xl hover:scale-102 transition-all duration-300 h-full overflow-hidden ${selectedValue === pkg.id ? \"ring-4 ring-purple-500 border-purple-500 shadow-2xl scale-105\" : \"\"}`}\n                              >\n                                {/* Background Gradient */}\n                                <div\n                                  className={`absolute inset-0 bg-gradient-to-br ${pkg.gradient} opacity-10`}\n                                />\n\n                                <CardContent className=\"relative p-6 flex flex-col h-full\">\n                                  {pkg.popular && (\n                                    <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 z-10\">\n                                      <Badge className=\"bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg flex items-center gap-1\">\n                                        <Star className=\"h-3 w-3\" />\n                                        Most Popular\n                                      </Badge>\n                                    </div>\n                                  )}\n\n                                  {/* Package Icon */}\n                                  <div className=\"flex justify-center mb-4\">\n                                    <div\n                                      className={`p-3 rounded-full bg-gradient-to-br ${pkg.gradient} shadow-lg`}\n                                    >\n                                      {pkg.icon && (\n                                        <pkg.icon className=\"h-8 w-8 text-gray-700\" />\n                                      )}\n                                    </div>\n                                  </div>\n\n                                  <div className=\"text-center mb-6\">\n                                    <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                                      {pkg.name}\n                                    </h3>\n                                    <div className=\"mb-3\">\n                                      <span className=\"text-4xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent\">\n                                        {pkg.displayPrice}\n                                      </span>\n                                      {pkg.period !== \"forever\" && (\n                                        <span className=\"text-gray-600 ml-1\">\n                                          /{pkg.period}\n                                        </span>\n                                      )}\n                                    </div>\n                                    <p className=\"text-gray-600 text-sm leading-relaxed\">\n                                      {pkg.description}\n                                    </p>\n                                  </div>\n\n                                  <div className=\"flex-1\">\n                                    <ul className=\"space-y-3\">\n                                      {pkg.features.map((feature, index) => (\n                                        <li\n                                          key={index}\n                                          className=\"flex items-start gap-3\"\n                                        >\n                                          <div className=\"flex-shrink-0 mt-0.5\">\n                                            <Check className=\"h-4 w-4 text-green-500 bg-green-50 rounded-full p-0.5\" />\n                                          </div>\n                                          <span className=\"text-sm text-gray-700 leading-relaxed\">\n                                            {feature}\n                                          </span>\n                                        </li>\n                                      ))}\n                                    </ul>\n                                  </div>\n\n                                  <div\n                                    className={`mt-6 ${selectedValue === pkg.id ? \"block\" : \"hidden\"}`}\n                                  >\n                                    <div className=\"text-center p-3 bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-lg\">\n                                      <div className=\"flex items-center justify-center gap-2\">\n                                        <span className=\"text-sm font-semibold text-purple-700\">\n                                          ✓ Selected Plan\n                                        </span>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </CardContent>\n                              </Card>\n                            </label>\n                          </div>\n                        ))\n                      )}\n                    </RadioGroup>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Navigation Buttons */}\n            <div className=\"flex justify-between pt-6\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setLocation(\"/signup/sales-rep/personal-info\")}\n                className=\"flex items-center gap-2\"\n              >\n                <ArrowLeft className=\"h-4 w-4\" />\n                Back\n              </Button>\n\n              <Button\n                type=\"submit\"\n                disabled={savePackageMutation.isPending}\n                className=\"flex items-center gap-2 bg-purple-600 hover:bg-purple-700 px-8\"\n              >\n                {savePackageMutation.isPending ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <>Complete Signup</>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n\n        {/* Payment Modal */}\n        {showPayment && selectedPackage && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n            <div className=\"max-w-md w-full\">\n              <StripeCheckout\n                packageInfo={selectedPackage}\n                userInfo={userInfo}\n                onSuccess={handlePaymentSuccess}\n                onError={handlePaymentError}\n                isRecurring={true}\n              />\n              <div className=\"mt-4 text-center\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowPayment(false)}\n                  className=\"text-gray-600\"\n                >\n                  Cancel Payment\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":16704},"client/src/pages/signup/sales-rep/invite-decision-makers.jsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, ArrowRight, Plus, Trash2, Loader2 } from \"lucide-react\";\nimport { salesRepInvitesSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function InviteDecisionMakers() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [decisionMakers, setDecisionMakers] = useState([\n    { name: \"\", email: \"\" },\n  ]);\n\n  // Fetch user's package limits\n  const {\n    data: packageLimits,\n    isLoading: limitsLoading,\n    error: limitsError,\n  } = useQuery({\n    queryKey: [\"/api/user-package-limits\"],\n    retry: 1,\n    retryOnMount: false,\n    refetchOnWindowFocus: false,\n  });\n\n  const form = useForm({\n    resolver: zodResolver(salesRepInvitesSchema),\n    defaultValues: {\n      decisionMakers: [{ name: \"\", email: \"\" }],\n    },\n  });\n\n  const saveInvitesMutation = useMutation({\n    mutationFn: async (data) => {\n      console.log(\"Submitting invites data:\", data);\n      const response = await apiRequest(\"/api/sales-rep/invites\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      console.log(\"Invites saved successfully:\", data);\n      toast({\n        title: \"Registration Complete!\",\n        description:\n          data.message ||\n          \"Registration completed successfully! Invitations sent.\",\n      });\n      // Redirect to dashboard or thank you page\n      setTimeout(() => {\n        setLocation(\"/login\");\n      }, 2000);\n    },\n    onError: (error) => {\n      console.error(\"Invites save error:\", error);\n      console.error(\"Error details:\", {\n        message: error.message,\n        status: error.status,\n      });\n\n      // Handle session expired error specifically\n      if (error.message && error.message.includes(\"Session expired\")) {\n        toast({\n          title: \"Session Expired\",\n          description:\n            \"Your session has expired. Please refresh the page to continue.\",\n          variant: \"destructive\",\n        });\n        // Show refresh suggestion\n        setTimeout(() => {\n          if (\n            confirm(\n              \"Your registration is almost complete! Click OK to refresh the page and continue.\",\n            )\n          ) {\n            window.location.reload();\n          }\n        }, 2000);\n      } else if (error.message && error.message.includes(\"Unexpected token\")) {\n        // Handle JSON parsing errors\n        toast({\n          title: \"Connection Error\",\n          description:\n            \"There was a network issue. Please refresh the page and try again.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          if (\n            confirm(\"Please refresh the page to continue your registration.\")\n          ) {\n            window.location.reload();\n          }\n        }, 2000);\n      } else {\n        toast({\n          title: \"Save Failed\",\n          description:\n            error.message || \"Failed to save invitations. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const onSubmit = (data) => {\n    // Filter out empty entries\n    const validDecisionMakers = data.decisionMakers.filter(\n      (dm) => dm.name || dm.email,\n    );\n\n    // Validate against plan limits\n    const maxInvitations = packageLimits?.maxInvitations || 3;\n    if (validDecisionMakers.length > maxInvitations) {\n      toast({\n        title: \"Invitation Limit Exceeded\",\n        description: `Your ${packageLimits?.planName || \"Free\"} plan allows up to ${maxInvitations} invitations only.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    saveInvitesMutation.mutate({ decisionMakers: validDecisionMakers });\n  };\n\n  const addDecisionMaker = () => {\n    // Use dynamic limit from user's package\n    const maxInvitations = packageLimits?.maxInvitations || 3;\n    if (decisionMakers.length < maxInvitations) {\n      const newDecisionMakers = [...decisionMakers, { name: \"\", email: \"\" }];\n      setDecisionMakers(newDecisionMakers);\n      form.setValue(\"decisionMakers\", newDecisionMakers);\n    }\n  };\n\n  const removeDecisionMaker = (index) => {\n    if (decisionMakers.length > 1) {\n      const newDecisionMakers = decisionMakers.filter((_, i) => i !== index);\n      setDecisionMakers(newDecisionMakers);\n      form.setValue(\"decisionMakers\", newDecisionMakers);\n    }\n  };\n\n  const skipStep = () => {\n    // Submit empty invites to complete registration\n    saveInvitesMutation.mutate({ decisionMakers: [] });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50\">\n      <div className=\"max-w-2xl mx-auto mt-16 px-4 py-8\">\n        {/* Progress Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-sm font-medium text-gray-600\">\n              Step 4 of 4\n            </span>\n            <span className=\"text-sm font-medium text-gray-600\">\n              100% Complete\n            </span>\n          </div>\n          <Progress value={100} className=\"h-2\" />\n        </div>\n\n        {/* Main Form Card */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            {limitsLoading ? (\n              <div className=\"text-center mb-8\">\n                <div className=\"animate-spin w-6 h-6 border-2 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n                <p className=\"text-gray-600\">\n                  Loading your plan information...\n                </p>\n              </div>\n            ) : limitsError ? (\n              <div className=\"text-center mb-8\">\n                <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                  Invite Decision Makers\n                </h1>\n                <p className=\"text-gray-600\">\n                  Add up to 3 decision makers you'd like to connect with\n                  (optional)\n                </p>\n                <div className=\"mt-2\">\n                  <span className=\"text-sm text-gray-500\">\n                    {decisionMakers.length} of 3 decision makers added\n                  </span>\n                  <span className=\"ml-2 text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-full\">\n                    Default Limits\n                  </span>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center mb-8\">\n                <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                  Invite Decision Makers\n                </h1>\n                <p className=\"text-gray-600\">\n                  Add up to {packageLimits?.maxInvitations || 3} decision makers\n                  you'd like to connect with (optional)\n                </p>\n                <div className=\"mt-2\">\n                  <span className=\"text-sm text-gray-500\">\n                    {decisionMakers.length} of{\" \"}\n                    {packageLimits?.maxInvitations || 3} decision makers added\n                  </span>\n                  {packageLimits?.planName && (\n                    <span className=\"ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full\">\n                      {packageLimits.planName} Plan\n                    </span>\n                  )}\n                </div>\n                {packageLimits?.maxCallCredits && (\n                  <div className=\"mt-1\">\n                    <span className=\"text-xs text-gray-400\">\n                      Monthly Credits: {packageLimits.maxCallCredits}\n                    </span>\n                  </div>\n                )}\n              </div>\n            )}\n\n            <Form {...form}>\n              <form\n                onSubmit={form.handleSubmit(onSubmit)}\n                className=\"space-y-6\"\n              >\n                {decisionMakers.map((_, index) => (\n                  <div key={index} className=\"flex gap-4 items-end\">\n                    <div className=\"flex-1\">\n                      <FormField\n                        control={form.control}\n                        name={`decisionMakers.${index}.name`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm font-medium text-gray-700\">\n                              Name\n                            </FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"Decision maker's name\"\n                                {...field}\n                                onChange={(e) => {\n                                  field.onChange(e);\n                                  const newDecisionMakers = [...decisionMakers];\n                                  newDecisionMakers[index].name =\n                                    e.target.value;\n                                  setDecisionMakers(newDecisionMakers);\n                                }}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"flex-1\">\n                      <FormField\n                        control={form.control}\n                        name={`decisionMakers.${index}.email`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm font-medium text-gray-700\">\n                              Email\n                            </FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"email\"\n                                placeholder=\"email@company.com\"\n                                {...field}\n                                onChange={(e) => {\n                                  field.onChange(e);\n                                  const newDecisionMakers = [...decisionMakers];\n                                  newDecisionMakers[index].email =\n                                    e.target.value;\n                                  setDecisionMakers(newDecisionMakers);\n                                }}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {decisionMakers.length > 1 && (\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => removeDecisionMaker(index)}\n                        className=\"mb-2\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                ))}\n\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={addDecisionMaker}\n                  disabled={\n                    decisionMakers.length >=\n                    (packageLimits?.maxInvitations || 3)\n                  }\n                  className=\"w-full flex items-center gap-2\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  {decisionMakers.length >= (packageLimits?.maxInvitations || 3)\n                    ? `Maximum ${packageLimits?.maxInvitations || 3} Decision Makers Reached`\n                    : \"Add Another Decision Maker\"}\n                </Button>\n\n                {/* Navigation Buttons */}\n                <div className=\"flex justify-between pt-6\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() =>\n                      setLocation(\"/signup/sales-rep/professional-info\")\n                    }\n                    className=\"flex items-center gap-2\"\n                  >\n                    <ArrowLeft className=\"h-4 w-4\" />\n                    Back\n                  </Button>\n\n                  <div className=\"flex gap-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      onClick={skipStep}\n                      className=\"text-gray-600\"\n                    >\n                      Skip for now\n                    </Button>\n\n                    <Button\n                      type=\"submit\"\n                      disabled={saveInvitesMutation.isPending}\n                      className=\"flex items-center gap-2 bg-blue-600 hover:bg-purple-700\"\n                    >\n                      {saveInvitesMutation.isPending ? (\n                        <Loader2 className=\"h-4 w-4 animate-spin\" />\n                      ) : (\n                        <>\n                          Complete Registration\n                          <ArrowRight className=\"h-4 w-4\" />\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13850},"client/src/pages/signup/sales-rep/personal-info.jsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  ArrowLeft,\n  Linkedin,\n  CheckCircle,\n  AlertCircle,\n  Eye,\n  EyeOff,\n  Loader2,\n} from \"lucide-react\";\nimport { salesRepPersonalInfoSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function SalesRepPersonalInfo() {\n  const [, setLocation] = useLocation();\n  const [linkedinVerified, setLinkedinVerified] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm({\n    resolver: zodResolver(salesRepPersonalInfoSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      companyDomain: \"\",\n      linkedinUrl: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const linkedinVerifyMutation = useMutation({\n    mutationFn: async (linkedinUrl) => {\n      console.log(\"LinkedIn verification API call starting for:\", linkedinUrl);\n      try {\n        const response = await apiRequest(\"/api/verify-linkedin\", {\n          method: \"POST\",\n          body: JSON.stringify({ linkedinUrl }),\n        });\n        console.log(\"LinkedIn verification API response:\", response);\n        return response;\n      } catch (error) {\n        console.error(\"LinkedIn verification API error:\", error);\n        throw error;\n      }\n    },\n    onSuccess: (data) => {\n      console.log(\"LinkedIn verification success handler:\", data);\n      if (data && data.verified) {\n        setLinkedinVerified(true);\n        toast({\n          title: \"LinkedIn Verified\",\n          description:\n            data.message ||\n            \"Your LinkedIn profile has been successfully verified.\",\n        });\n      } else {\n        toast({\n          title: \"Verification Failed\",\n          description: data?.message || \"Unable to verify LinkedIn profile.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error) => {\n      console.error(\"LinkedIn verification error handler:\", error);\n      toast({\n        title: \"Verification Failed\",\n        description:\n          error.message ||\n          \"Unable to verify LinkedIn profile. Please check the URL.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const savePersonalInfoMutation = useMutation({\n    mutationFn: async (data) => {\n      console.log(\n        \"Submitting form data:\",\n        data,\n        \"LinkedIn verified:\",\n        linkedinVerified,\n      );\n      const response = await apiRequest(\"/api/sales-rep/personal-info\", {\n        method: \"POST\",\n        body: JSON.stringify({ ...data, linkedinVerified }),\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      console.log(\"Form submission successful:\", data);\n      toast({\n        title: \"Information Saved\",\n        description: \"Your personal information has been saved successfully.\",\n      });\n      setLocation(\"/signup/sales-rep/package\");\n    },\n    onError: (error) => {\n      console.error(\"Form submission error:\", error);\n      toast({\n        title: \"Save Failed\",\n        description:\n          error.message || \"Failed to save information. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLinkedinVerify = () => {\n    const linkedinUrl = form.getValues(\"linkedinUrl\");\n    console.log(\"LinkedIn verification attempt:\", { linkedinUrl });\n\n    if (!linkedinUrl) {\n      toast({\n        title: \"LinkedIn URL Required\",\n        description: \"Please enter your LinkedIn profile URL first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    console.log(\"Starting LinkedIn verification for:\", linkedinUrl);\n    linkedinVerifyMutation.mutate(linkedinUrl);\n  };\n\n  const onSubmit = (data) => {\n    console.log(\"Form submission attempt:\", data);\n    console.log(\"Form errors:\", form.formState.errors);\n    console.log(\"LinkedIn verified:\", linkedinVerified);\n    console.log(\"Form valid:\", form.formState.isValid);\n\n    if (!linkedinVerified) {\n      toast({\n        title: \"LinkedIn Verification Required\",\n        description: \"Please verify your LinkedIn profile before proceeding.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    savePersonalInfoMutation.mutate(data);\n  };\n\n  const isFormValid =\n    Object.keys(form.formState.errors).length === 0 && linkedinVerified;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br mt-16 from-blue-50 to-slate-50\">\n      <div className=\"max-w-2xl mx-auto px-4 py-8\">\n        {/* Progress Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-sm font-medium text-gray-600\">\n              Step 1 of 4\n            </span>\n            <span className=\"text-sm font-medium text-gray-600\">\n              25% Complete\n            </span>\n          </div>\n          <Progress value={25} className=\"h-2\" />\n        </div>\n\n        {/* Main Form Card */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Personal Information\n              </h1>\n              <p className=\"text-gray-600\">\n                Let's start with your basic details and LinkedIn verification\n              </p>\n            </div>\n\n            <Form {...form}>\n              <form\n                onSubmit={form.handleSubmit(onSubmit)}\n                className=\"space-y-6\"\n              >\n                {/* Name Fields */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium text-gray-700\">\n                          First Name *\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Enter your first name\"\n                            {...field}\n                            className=\"mt-1\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium text-gray-700\">\n                          Last Name *\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Enter your last name\"\n                            {...field}\n                            className=\"mt-1\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Email */}\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Email Address *\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"Enter your email address\"\n                          {...field}\n                          className=\"mt-1\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Company Domain */}\n                <FormField\n                  control={form.control}\n                  name=\"companyDomain\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Company Domain *\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter your company domain (e.g., company.com)\"\n                          {...field}\n                          className=\"mt-1\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        This must match your email domain for verification\n                      </p>\n                    </FormItem>\n                  )}\n                />\n\n                {/* LinkedIn Verification */}\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6\">\n                  <div className=\"flex items-start space-x-3 mb-4\">\n                    <div className=\"w-8 h-8 bg-blue-600 rounded flex items-center justify-center\">\n                      <Linkedin className=\"text-white\" size={16} />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-gray-900 mb-1\">\n                        LinkedIn Verification Required\n                      </h3>\n                      <p className=\"text-sm text-gray-600\">\n                        We verify all users through LinkedIn to maintain\n                        platform quality\n                      </p>\n                    </div>\n                    {linkedinVerified && (\n                      <CheckCircle className=\"text-green-600\" size={20} />\n                    )}\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"linkedinUrl\"\n                    render={({ field }) => (\n                      <FormItem className=\"mb-4\">\n                        <FormLabel className=\"text-sm font-medium text-gray-700\">\n                          LinkedIn Profile URL *\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"https://linkedin.com/in/yourprofile\"\n                            {...field}\n                            className=\"mt-1\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {linkedinVerified ? (\n                    <div className=\"flex items-center text-green-600 text-sm font-medium\">\n                      <CheckCircle className=\"mr-2\" size={16} />\n                      LinkedIn Verified\n                    </div>\n                  ) : (\n                    <Button\n                      type=\"button\"\n                      onClick={handleLinkedinVerify}\n                      disabled={\n                        !form.getValues(\"linkedinUrl\") ||\n                        linkedinVerifyMutation.isPending\n                      }\n                      className=\"bg-blue-600 hover:bg-blue-700\"\n                    >\n                      {linkedinVerifyMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Verifying...\n                        </>\n                      ) : (\n                        <>\n                          <Linkedin className=\"mr-2\" size={16} />\n                          Verify LinkedIn Profile\n                        </>\n                      )}\n                    </Button>\n                  )}\n                </div>\n\n                {/* Password Fields */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium text-gray-700\">\n                          Password *\n                        </FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Input\n                              type={showPassword ? \"text\" : \"password\"}\n                              placeholder=\"Create a secure password\"\n                              {...field}\n                              className=\"mt-1 pr-10\"\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                              onClick={() => setShowPassword(!showPassword)}\n                            >\n                              {showPassword ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"confirmPassword\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium text-gray-700\">\n                          Confirm Password *\n                        </FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Input\n                              type={showConfirmPassword ? \"text\" : \"password\"}\n                              placeholder=\"Confirm your password\"\n                              {...field}\n                              className=\"mt-1 pr-10\"\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                              onClick={() =>\n                                setShowConfirmPassword(!showConfirmPassword)\n                              }\n                            >\n                              {showConfirmPassword ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Form Errors */}\n                {Object.keys(form.formState.errors).length > 0 && (\n                  <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                    <div className=\"flex items-center space-x-2 text-red-800\">\n                      <AlertCircle size={16} />\n                      <span className=\"font-medium\">\n                        Please fix the following errors:\n                      </span>\n                    </div>\n                  </div>\n                )}\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Navigation */}\n        <div className=\"flex justify-between items-center mt-8\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(\"/\")}\n            className=\"text-gray-600\"\n          >\n            <ArrowLeft className=\"mr-2\" size={16} />\n            Back\n          </Button>\n          <Button\n            onClick={form.handleSubmit(onSubmit)}\n            disabled={savePersonalInfoMutation.isPending}\n            className=\"bg-purple-600 hover:bg-purple-700 px-8\"\n          >\n            {savePersonalInfoMutation.isPending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Saving...\n              </>\n            ) : (\n              \"Next\"\n            )}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17282},"client/src/pages/signup/sales-rep/professional-background.jsx":{"content":"import { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Loader2 } from \"lucide-react\";\nimport { salesRepProfessionalSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function SalesRepProfessionalBackground() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm({\n    resolver: zodResolver(salesRepProfessionalSchema),\n    defaultValues: {\n      jobTitle: \"\",\n      company: \"\",\n      industry: \"\",\n      companySize: \"\",\n      yearsInRole: \"\",\n    },\n  });\n\n  const saveProfessionalMutation = useMutation({\n    mutationFn: async (data) => {\n      console.log(\"Submitting professional data:\", data);\n      const response = await apiRequest(\n        \"/api/sales-rep/professional-info\",\n        \"POST\",\n        data,\n      );\n      return response;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success!\",\n        description: \"Professional information saved successfully!\",\n      });\n      setLocation(\"/signup/sales-rep/invite-decision-makers\");\n    },\n    onError: (error) => {\n      console.error(\"Professional info save error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save professional information\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data) => {\n    saveProfessionalMutation.mutate(data);\n  };\n\n  const handleBack = () => {\n    setLocation(\"/signup/sales-rep/package\");\n  };\n\n  const industries = [\n    \"Technology\",\n    \"Manufacturing\",\n    \"Healthcare\",\n    \"Finance\",\n    \"Retail\",\n    \"Education\",\n    \"Government\",\n    \"Non-profit\",\n    \"Other\",\n  ];\n\n  const companySizes = [\n    \"1-10 employees\",\n    \"11-50 employees\",\n    \"51-200 employees\",\n    \"201-500 employees\",\n    \"501-1000 employees\",\n    \"1000+ employees\",\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-slate-50\">\n      <div className=\"max-w-2xl mx-auto mt-16 px-4 py-8\">\n        {/* Progress Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-sm font-medium text-gray-600\">\n              Step 3 of 4\n            </span>\n            <span className=\"text-sm font-medium text-gray-600\">\n              75% Complete\n            </span>\n          </div>\n          <Progress value={75} className=\"h-2\" />\n        </div>\n\n        {/* Main Form Card */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Professional Background\n              </h1>\n              <p className=\"text-gray-600\">\n                Tell us about your role and company\n              </p>\n            </div>\n\n            <Form {...form}>\n              <form\n                onSubmit={form.handleSubmit(onSubmit)}\n                className=\"space-y-6\"\n              >\n                {/* Job Title */}\n                <FormField\n                  control={form.control}\n                  name=\"jobTitle\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Job Title *\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"e.g. Senior Sales Manager\"\n                          {...field}\n                          className=\"mt-1\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Company */}\n                <FormField\n                  control={form.control}\n                  name=\"company\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Company *\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"e.g. Salesforce, HubSpot, Microsoft\"\n                          {...field}\n                          className=\"mt-1\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {/* Industry */}\n                  <FormField\n                    control={form.control}\n                    name=\"industry\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium text-gray-700\">\n                          Industry *\n                        </FormLabel>\n                        <FormControl>\n                          <Select\n                            onValueChange={field.onChange}\n                            defaultValue={field.value}\n                          >\n                            <SelectTrigger className=\"mt-1\">\n                              <SelectValue placeholder=\"Select industry\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {industries.map((industry) => (\n                                <SelectItem key={industry} value={industry}>\n                                  {industry}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Company Size */}\n                  <FormField\n                    control={form.control}\n                    name=\"companySize\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium text-gray-700\">\n                          Company Size *\n                        </FormLabel>\n                        <FormControl>\n                          <Select\n                            onValueChange={field.onChange}\n                            defaultValue={field.value}\n                          >\n                            <SelectTrigger className=\"mt-1\">\n                              <SelectValue placeholder=\"Select company size\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {companySizes.map((size) => (\n                                <SelectItem key={size} value={size}>\n                                  {size}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Years in Current Role */}\n                <FormField\n                  control={form.control}\n                  name=\"yearsInRole\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Years in Current Role\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"e.g. 1-2 years\"\n                          {...field}\n                          className=\"mt-1\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Navigation */}\n                <div className=\"flex justify-between items-center mt-8\">\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    onClick={handleBack}\n                    className=\"text-gray-600\"\n                  >\n                    <ArrowLeft className=\"mr-2\" size={16} />\n                    Back\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={saveProfessionalMutation.isPending}\n                    className=\"bg-purple-600 hover:bg-purple-700 px-8\"\n                  >\n                    {saveProfessionalMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Saving...\n                      </>\n                    ) : (\n                      \"Continue\"\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9743},"client/src/pages/signup/sales-rep/professional-info.jsx":{"content":"import { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, ArrowRight, Loader2 } from \"lucide-react\";\nimport { salesRepProfessionalSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function SalesRepProfessionalInfo() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm({\n    resolver: zodResolver(salesRepProfessionalSchema),\n    defaultValues: {\n      jobTitle: \"\",\n      company: \"\",\n      industry: \"\",\n      companySize: \"\",\n      yearsInRole: \"\",\n    },\n  });\n\n  const saveProfessionalInfoMutation = useMutation({\n    mutationFn: async (data) => {\n      console.log(\"Submitting professional data:\", data);\n      const response = await apiRequest(\"/api/sales-rep/professional-info\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      console.log(\"Professional info saved successfully:\", data);\n      toast({\n        title: \"Professional Information Saved\",\n        description:\n          \"Your professional background has been saved successfully.\",\n      });\n      setLocation(\"/signup/sales-rep/invites\");\n    },\n    onError: (error) => {\n      console.error(\"Professional info save error:\", error);\n      toast({\n        title: \"Save Failed\",\n        description:\n          error.message ||\n          \"Failed to save professional information. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data) => {\n    saveProfessionalInfoMutation.mutate(data);\n  };\n\n  const industries = [\n    \"Technology\",\n    \"Healthcare\",\n    \"Finance\",\n    \"Education\",\n    \"Manufacturing\",\n    \"Retail\",\n    \"Real Estate\",\n    \"Marketing & Advertising\",\n    \"Consulting\",\n    \"Energy\",\n    \"Telecommunications\",\n    \"Transportation\",\n    \"Other\",\n  ];\n\n  const companySizes = [\n    \"1-10 employees\",\n    \"11-50 employees\",\n    \"51-200 employees\",\n    \"201-1000 employees\",\n    \"1001-5000 employees\",\n    \"5000+ employees\",\n  ];\n\n  const yearsOptions = [\n    \"Less than 1 year\",\n    \"1-2 years\",\n    \"3-5 years\",\n    \"6-10 years\",\n    \"More than 10 years\",\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-blue-50\">\n      <div className=\"max-w-2xl mx-auto mt-16 px-4 py-8\">\n        {/* Progress Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-sm font-medium text-gray-600\">\n              Step 2 of 4\n            </span>\n            <span className=\"text-sm font-medium text-gray-600\">\n              50% Complete\n            </span>\n          </div>\n          <Progress value={50} className=\"h-2\" />\n        </div>\n\n        {/* Main Form Card */}\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Professional Background\n              </h1>\n              <p className=\"text-gray-600\">\n                Tell us about your professional experience and current role\n              </p>\n            </div>\n\n            <Form {...form}>\n              <form\n                onSubmit={form.handleSubmit(onSubmit)}\n                className=\"space-y-6\"\n              >\n                {/* Job Title */}\n                <FormField\n                  control={form.control}\n                  name=\"jobTitle\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Job Title *\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"e.g., Senior Sales Representative\"\n                          {...field}\n                          className=\"mt-1\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Company */}\n                <FormField\n                  control={form.control}\n                  name=\"company\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Company *\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter your company name\"\n                          {...field}\n                          className=\"mt-1\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Industry */}\n                <FormField\n                  control={form.control}\n                  name=\"industry\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Industry *\n                      </FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue placeholder=\"Select your industry\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {industries.map((industry) => (\n                            <SelectItem key={industry} value={industry}>\n                              {industry}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Company Size */}\n                <FormField\n                  control={form.control}\n                  name=\"companySize\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Company Size *\n                      </FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue placeholder=\"Select company size\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {companySizes.map((size) => (\n                            <SelectItem key={size} value={size}>\n                              {size}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Years in Role */}\n                <FormField\n                  control={form.control}\n                  name=\"yearsInRole\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">\n                        Years in Current Role\n                      </FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue placeholder=\"Select years of experience\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {yearsOptions.map((years) => (\n                            <SelectItem key={years} value={years}>\n                              {years}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Navigation Buttons */}\n                <div className=\"flex justify-between pt-6\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() =>\n                      setLocation(\"/signup/sales-rep/personal-info\")\n                    }\n                    className=\"flex items-center gap-2\"\n                  >\n                    <ArrowLeft className=\"h-4 w-4\" />\n                    Back\n                  </Button>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={saveProfessionalInfoMutation.isPending}\n                    className=\"flex items-center gap-2 bg-purple-600 hover:bg-purple-700\"\n                  >\n                    {saveProfessionalInfoMutation.isPending ? (\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    ) : (\n                      <>\n                        Continue\n                        <ArrowRight className=\"h-4 w-4\" />\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10473}},"version":1}